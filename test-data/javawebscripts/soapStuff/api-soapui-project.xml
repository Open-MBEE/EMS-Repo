<?xml version="1.0" encoding="UTF-8"?>
<con:soapui-project activeEnvironment="Default" name="api" soapui-version="5.0.0" xmlns:con="http://eviware.com/soapui/config"><con:settings/><con:interface xsi:type="con:RestService" wadlVersion="http://wadl.dev.java.net/2009/02" name="mms" type="rest" basePath="/alfresco/service" definitionUrl="file:/Users/muschek/git/alfresco-view-repo/src/main/amp/web/mms/raml/api.wadl" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings/><con:definitionCache type="TEXT" rootPart="file:/Users/muschek/git/alfresco-view-repo/src/main/amp/web/mms/raml/api.wadl"><con:part><con:url>file:/Users/muschek/git/alfresco-view-repo/src/main/amp/web/mms/raml/api.wadl</con:url><con:content><![CDATA[<application xmlns="http://wadl.dev.java.net/2009/02">
  <doc xml:lang="en" title="mms"/>
  <resources base="https://europaems/alfresco/service">
    <resource path="workspaces" id="/workspaces">
      <doc xml:lang="en" title="/workspaces">This is a parallel of the sites branch and used for namespacing purposes, all the methods respond</doc>
      <resource path="{workspaceId}" id="/{workspaceId}">
        <doc xml:lang="en" title="/{workspaceId}"/>
        <param name="workspaceId" type="xs:string" required="true" default="" style="template" xmlns:xs="http://www.w3.org/2001/XMLSchema"/>
        <resource path="artifacts" id="/artifacts">
          <doc xml:lang="en" title="/artifacts"/>
          <param name="workspaceId" type="xs:string" required="true" default="" style="template" xmlns:xs="http://www.w3.org/2001/XMLSchema"/>
        </resource>
        <resource path="sites" id="/sites">
          <doc xml:lang="en" title="/sites">Read operations for sites</doc>
          <param name="workspaceId" type="xs:string" required="true" default="" style="template" xmlns:xs="http://www.w3.org/2001/XMLSchema"/>
          <resource path="{siteId}" id="/{siteId}">
            <doc xml:lang="en" title="/{siteId}"/>
            <param name="workspaceId" type="xs:string" required="true" default="" style="template" xmlns:xs="http://www.w3.org/2001/XMLSchema"/>
            <param name="siteId" type="xs:string" required="true" default="" style="template" xmlns:xs="http://www.w3.org/2001/XMLSchema">
              <doc xml:lang="en" title="siteId Parameter">Alfresco site identifier for the project under consideration</doc>
            </param>
            <resource path="projects" id="/projects">
              <doc xml:lang="en" title="/projects">Read operations for projects</doc>
              <param name="workspaceId" type="xs:string" required="true" default="" style="template" xmlns:xs="http://www.w3.org/2001/XMLSchema"/>
              <param name="siteId" type="xs:string" required="true" default="" style="template" xmlns:xs="http://www.w3.org/2001/XMLSchema"/>
              <resource path="{projectId}" id="/{projectId}">
                <doc xml:lang="en" title="/{projectId}">Read operations for projects</doc>
                <param name="workspaceId" type="xs:string" required="true" default="" style="template" xmlns:xs="http://www.w3.org/2001/XMLSchema"/>
                <param name="siteId" type="xs:string" required="true" default="" style="template" xmlns:xs="http://www.w3.org/2001/XMLSchema"/>
                <param name="projectId" type="xs:string" required="true" default="" style="template" xmlns:xs="http://www.w3.org/2001/XMLSchema">
                  <doc xml:lang="en" title="projectId Parameter">MD project ID for the project under consideration</doc>
                </param>
                <method name="GET" id="get">
                  <doc xml:lang="en" title="get">Read operation for projects</doc>
                  <request>
                    <param name="recurse" type="xs:boolean" required="false" default="" style="query" xmlns:xs="http://www.w3.org/2001/XMLSchema">
                      <doc xml:lang="en" title="recurse Parameter">If true, finds all elements recursively based on containment hierarchy</doc>
                    </param>
                    <param name="recurseDepth" type="xs:integer" required="false" default="" style="query" xmlns:xs="http://www.w3.org/2001/XMLSchema">
                      <doc xml:lang="en" title="recurseDepth Parameter">Depth to recurse to. 0 specifies infinite recursion (e.g., until all leaf nodes are found).</doc>
                    </param>
                    <param name="search" type="xs:string" required="false" default="" style="query" xmlns:xs="http://www.w3.org/2001/XMLSchema">
                      <doc xml:lang="en" title="search Parameter">Regular expression of the search to be executed at the specified scope. Currently search is against sysml:id, sysml:name, sysml:documentation, sysml:body.</doc>
                    </param>
                    <param name="timestamp" type="xs:date" required="false" default="" style="query" xmlns:xs="http://www.w3.org/2001/XMLSchema">
                      <doc xml:lang="en" title="timestamp Parameter">Timestamp to find most recent version of projects, specified in ISO8601 time format.</doc>
                    </param>
                  </request>
                  <response status="200">
                    <representation mediaType="application/json"/>
                  </response>
                  <response status="400">
                    <representation mediaType=""/>
                  </response>
                  <response status="401">
                    <representation mediaType=""/>
                  </response>
                  <response status="404">
                    <representation mediaType=""/>
                  </response>
                  <response status="500">
                    <representation mediaType=""/>
                  </response>
                </method>
              </resource>
              <method name="GET" id="get">
                <doc xml:lang="en" title="get">Retrieve all projects for which user has read permissions</doc>
                <request>
                  <param name="recurse" type="xs:boolean" required="false" default="" style="query" xmlns:xs="http://www.w3.org/2001/XMLSchema">
                    <doc xml:lang="en" title="recurse Parameter">If true, finds all elements recursively based on containment hierarchy</doc>
                  </param>
                  <param name="recurseDepth" type="xs:integer" required="false" default="" style="query" xmlns:xs="http://www.w3.org/2001/XMLSchema">
                    <doc xml:lang="en" title="recurseDepth Parameter">Depth to recurse to. 0 specifies infinite recursion (e.g., until all leaf nodes are found).</doc>
                  </param>
                  <param name="search" type="xs:string" required="false" default="" style="query" xmlns:xs="http://www.w3.org/2001/XMLSchema">
                    <doc xml:lang="en" title="search Parameter">Regular expression of the search to be executed at the specified scope. Currently search is against sysml:id, sysml:name, sysml:documentation, sysml:body.</doc>
                  </param>
                  <param name="timestamp" type="xs:date" required="false" default="" style="query" xmlns:xs="http://www.w3.org/2001/XMLSchema">
                    <doc xml:lang="en" title="timestamp Parameter">Timestamp to find most recent version of projects, specified in ISO8601 time format.</doc>
                  </param>
                </request>
                <response status="200">
                  <representation mediaType="application/json"/>
                </response>
                <response status="400">
                  <representation mediaType=""/>
                </response>
                <response status="401">
                  <representation mediaType=""/>
                </response>
                <response status="404">
                  <representation mediaType=""/>
                </response>
                <response status="500">
                  <representation mediaType=""/>
                </response>
              </method>
            </resource>
            <resource path="products" id="/products">
              <doc xml:lang="en" title="/products">Create, Update, and Delete operations for products</doc>
              <param name="workspaceId" type="xs:string" required="true" default="" style="template" xmlns:xs="http://www.w3.org/2001/XMLSchema"/>
              <param name="siteId" type="xs:string" required="true" default="" style="template" xmlns:xs="http://www.w3.org/2001/XMLSchema"/>
              <resource path="{productId}" id="/{productId}">
                <doc xml:lang="en" title="/{productId}">Create, Update, and Delete operations for products</doc>
                <param name="workspaceId" type="xs:string" required="true" default="" style="template" xmlns:xs="http://www.w3.org/2001/XMLSchema"/>
                <param name="siteId" type="xs:string" required="true" default="" style="template" xmlns:xs="http://www.w3.org/2001/XMLSchema"/>
                <param name="productId" type="xs:string" required="true" default="" style="template" xmlns:xs="http://www.w3.org/2001/XMLSchema">
                  <doc xml:lang="en" title="productId Parameter">Sysml ID for the product (document) under consideration</doc>
                </param>
                <resource path="snapshots" id="/snapshots">
                  <doc xml:lang="en" title="/snapshots">Scoped under /configurations and /products</doc>
                  <param name="workspaceId" type="xs:string" required="true" default="" style="template" xmlns:xs="http://www.w3.org/2001/XMLSchema"/>
                  <param name="siteId" type="xs:string" required="true" default="" style="template" xmlns:xs="http://www.w3.org/2001/XMLSchema"/>
                  <param name="productId" type="xs:string" required="true" default="" style="template" xmlns:xs="http://www.w3.org/2001/XMLSchema"/>
                  <resource path="{snapshotId}" id="/{snapshotId}">
                    <doc xml:lang="en" title="/{snapshotId}">Create, Update, and Delete operations for snapshots</doc>
                    <param name="workspaceId" type="xs:string" required="true" default="" style="template" xmlns:xs="http://www.w3.org/2001/XMLSchema"/>
                    <param name="siteId" type="xs:string" required="true" default="" style="template" xmlns:xs="http://www.w3.org/2001/XMLSchema"/>
                    <param name="productId" type="xs:string" required="true" default="" style="template" xmlns:xs="http://www.w3.org/2001/XMLSchema"/>
                    <param name="snapshotId" type="xs:string" required="true" default="" style="template" xmlns:xs="http://www.w3.org/2001/XMLSchema">
                      <doc xml:lang="en" title="snapshotId Parameter">ID for the snapshot under consideration</doc>
                    </param>
                    <method name="POST" id="post">
                      <doc xml:lang="en" title="post">Append operation for snapshots</doc>
                      <request>
                        <param name="recurse" type="xs:boolean" required="false" default="" style="query" xmlns:xs="http://www.w3.org/2001/XMLSchema">
                          <doc xml:lang="en" title="recurse Parameter">If true, finds all elements recursively based on containment hierarchy</doc>
                        </param>
                        <param name="recurseDepth" type="xs:integer" required="false" default="" style="query" xmlns:xs="http://www.w3.org/2001/XMLSchema">
                          <doc xml:lang="en" title="recurseDepth Parameter">Depth to recurse to. 0 specifies infinite recursion (e.g., until all leaf nodes are found).</doc>
                        </param>
                        <param name="search" type="xs:string" required="false" default="" style="query" xmlns:xs="http://www.w3.org/2001/XMLSchema">
                          <doc xml:lang="en" title="search Parameter">Regular expression of the search to be executed at the specified scope. Currently search is against sysml:id, sysml:name, sysml:documentation, sysml:body.</doc>
                        </param>
                        <param name="timestamp" type="xs:date" required="false" default="" style="query" xmlns:xs="http://www.w3.org/2001/XMLSchema">
                          <doc xml:lang="en" title="timestamp Parameter">Timestamp to find most recent version of snapshots, specified in ISO8601 time format.</doc>
                        </param>
                        <representation mediaType="application/json"/>
                      </request>
                      <response status="">
                        <representation mediaType="application/json"/>
                      </response>
                      <response status="200">
                        <representation mediaType="application/json"/>
                      </response>
                      <response status="202">
                        <representation mediaType=""/>
                      </response>
                      <response status="401">
                        <representation mediaType=""/>
                      </response>
                      <response status="404">
                        <representation mediaType=""/>
                      </response>
                      <response status="409">
                        <representation mediaType=""/>
                      </response>
                      <response status="500">
                        <representation mediaType=""/>
                      </response>
                    </method>
                    <method name="PUT" id="put">
                      <doc xml:lang="en" title="put">Create/update operation for snapshots</doc>
                      <request>
                        <param name="recurse" type="xs:boolean" required="false" default="" style="query" xmlns:xs="http://www.w3.org/2001/XMLSchema">
                          <doc xml:lang="en" title="recurse Parameter">If true, finds all elements recursively based on containment hierarchy</doc>
                        </param>
                        <param name="recurseDepth" type="xs:integer" required="false" default="" style="query" xmlns:xs="http://www.w3.org/2001/XMLSchema">
                          <doc xml:lang="en" title="recurseDepth Parameter">Depth to recurse to. 0 specifies infinite recursion (e.g., until all leaf nodes are found).</doc>
                        </param>
                        <param name="search" type="xs:string" required="false" default="" style="query" xmlns:xs="http://www.w3.org/2001/XMLSchema">
                          <doc xml:lang="en" title="search Parameter">Regular expression of the search to be executed at the specified scope. Currently search is against sysml:id, sysml:name, sysml:documentation, sysml:body.</doc>
                        </param>
                        <param name="timestamp" type="xs:date" required="false" default="" style="query" xmlns:xs="http://www.w3.org/2001/XMLSchema">
                          <doc xml:lang="en" title="timestamp Parameter">Timestamp to find most recent version of snapshots, specified in ISO8601 time format.</doc>
                        </param>
                        <representation mediaType="application/json"/>
                      </request>
                      <response status="">
                        <representation mediaType="application/json"/>
                      </response>
                      <response status="200">
                        <representation mediaType="application/json"/>
                      </response>
                      <response status="201">
                        <representation mediaType=""/>
                      </response>
                      <response status="202">
                        <representation mediaType=""/>
                      </response>
                      <response status="401">
                        <representation mediaType=""/>
                      </response>
                      <response status="404">
                        <representation mediaType=""/>
                      </response>
                      <response status="409">
                        <representation mediaType=""/>
                      </response>
                      <response status="500">
                        <representation mediaType=""/>
                      </response>
                    </method>
                    <method name="DELETE" id="delete">
                      <doc xml:lang="en" title="delete">Delete operation for snapshots</doc>
                      <request>
                        <param name="recurse" type="xs:boolean" required="false" default="" style="query" xmlns:xs="http://www.w3.org/2001/XMLSchema">
                          <doc xml:lang="en" title="recurse Parameter">If true, finds all elements recursively based on containment hierarchy</doc>
                        </param>
                        <param name="recurseDepth" type="xs:integer" required="false" default="" style="query" xmlns:xs="http://www.w3.org/2001/XMLSchema">
                          <doc xml:lang="en" title="recurseDepth Parameter">Depth to recurse to. 0 specifies infinite recursion (e.g., until all leaf nodes are found).</doc>
                        </param>
                        <param name="search" type="xs:string" required="false" default="" style="query" xmlns:xs="http://www.w3.org/2001/XMLSchema">
                          <doc xml:lang="en" title="search Parameter">Regular expression of the search to be executed at the specified scope. Currently search is against sysml:id, sysml:name, sysml:documentation, sysml:body.</doc>
                        </param>
                        <param name="timestamp" type="xs:date" required="false" default="" style="query" xmlns:xs="http://www.w3.org/2001/XMLSchema">
                          <doc xml:lang="en" title="timestamp Parameter">Timestamp to find most recent version of snapshots, specified in ISO8601 time format.</doc>
                        </param>
                      </request>
                      <response status="200">
                        <representation mediaType="application/json"/>
                      </response>
                      <response status="202">
                        <representation mediaType=""/>
                      </response>
                      <response status="401">
                        <representation mediaType=""/>
                      </response>
                      <response status="404">
                        <representation mediaType=""/>
                      </response>
                      <response status="500">
                        <representation mediaType=""/>
                      </response>
                    </method>
                    <method name="GET" id="get">
                      <doc xml:lang="en" title="get">Read operation for snapshots</doc>
                      <request>
                        <param name="recurse" type="xs:boolean" required="false" default="" style="query" xmlns:xs="http://www.w3.org/2001/XMLSchema">
                          <doc xml:lang="en" title="recurse Parameter">If true, finds all elements recursively based on containment hierarchy</doc>
                        </param>
                        <param name="recurseDepth" type="xs:integer" required="false" default="" style="query" xmlns:xs="http://www.w3.org/2001/XMLSchema">
                          <doc xml:lang="en" title="recurseDepth Parameter">Depth to recurse to. 0 specifies infinite recursion (e.g., until all leaf nodes are found).</doc>
                        </param>
                        <param name="search" type="xs:string" required="false" default="" style="query" xmlns:xs="http://www.w3.org/2001/XMLSchema">
                          <doc xml:lang="en" title="search Parameter">Regular expression of the search to be executed at the specified scope. Currently search is against sysml:id, sysml:name, sysml:documentation, sysml:body.</doc>
                        </param>
                        <param name="timestamp" type="xs:date" required="false" default="" style="query" xmlns:xs="http://www.w3.org/2001/XMLSchema">
                          <doc xml:lang="en" title="timestamp Parameter">Timestamp to find most recent version of snapshots, specified in ISO8601 time format.</doc>
                        </param>
                      </request>
                      <response status="200">
                        <representation mediaType="application/json"/>
                      </response>
                      <response status="400">
                        <representation mediaType=""/>
                      </response>
                      <response status="401">
                        <representation mediaType=""/>
                      </response>
                      <response status="404">
                        <representation mediaType=""/>
                      </response>
                      <response status="500">
                        <representation mediaType=""/>
                      </response>
                    </method>
                  </resource>
                  <method name="POST" id="post">
                    <doc xml:lang="en" title="post">Append operation for snapshots</doc>
                    <request>
                      <param name="recurse" type="xs:boolean" required="false" default="" style="query" xmlns:xs="http://www.w3.org/2001/XMLSchema">
                        <doc xml:lang="en" title="recurse Parameter">If true, finds all elements recursively based on containment hierarchy</doc>
                      </param>
                      <param name="recurseDepth" type="xs:integer" required="false" default="" style="query" xmlns:xs="http://www.w3.org/2001/XMLSchema">
                        <doc xml:lang="en" title="recurseDepth Parameter">Depth to recurse to. 0 specifies infinite recursion (e.g., until all leaf nodes are found).</doc>
                      </param>
                      <param name="search" type="xs:string" required="false" default="" style="query" xmlns:xs="http://www.w3.org/2001/XMLSchema">
                        <doc xml:lang="en" title="search Parameter">Regular expression of the search to be executed at the specified scope. Currently search is against sysml:id, sysml:name, sysml:documentation, sysml:body.</doc>
                      </param>
                      <param name="timestamp" type="xs:date" required="false" default="" style="query" xmlns:xs="http://www.w3.org/2001/XMLSchema">
                        <doc xml:lang="en" title="timestamp Parameter">Timestamp to find most recent version of snapshots, specified in ISO8601 time format.</doc>
                      </param>
                      <representation mediaType="application/json"/>
                    </request>
                    <response status="">
                      <representation mediaType="application/json"/>
                    </response>
                    <response status="200">
                      <representation mediaType="application/json"/>
                    </response>
                    <response status="202">
                      <representation mediaType=""/>
                    </response>
                    <response status="401">
                      <representation mediaType=""/>
                    </response>
                    <response status="404">
                      <representation mediaType=""/>
                    </response>
                    <response status="409">
                      <representation mediaType=""/>
                    </response>
                    <response status="500">
                      <representation mediaType=""/>
                    </response>
                  </method>
                  <method name="PUT" id="put">
                    <doc xml:lang="en" title="put">Create/update operation for snapshots</doc>
                    <request>
                      <param name="recurse" type="xs:boolean" required="false" default="" style="query" xmlns:xs="http://www.w3.org/2001/XMLSchema">
                        <doc xml:lang="en" title="recurse Parameter">If true, finds all elements recursively based on containment hierarchy</doc>
                      </param>
                      <param name="recurseDepth" type="xs:integer" required="false" default="" style="query" xmlns:xs="http://www.w3.org/2001/XMLSchema">
                        <doc xml:lang="en" title="recurseDepth Parameter">Depth to recurse to. 0 specifies infinite recursion (e.g., until all leaf nodes are found).</doc>
                      </param>
                      <param name="search" type="xs:string" required="false" default="" style="query" xmlns:xs="http://www.w3.org/2001/XMLSchema">
                        <doc xml:lang="en" title="search Parameter">Regular expression of the search to be executed at the specified scope. Currently search is against sysml:id, sysml:name, sysml:documentation, sysml:body.</doc>
                      </param>
                      <param name="timestamp" type="xs:date" required="false" default="" style="query" xmlns:xs="http://www.w3.org/2001/XMLSchema">
                        <doc xml:lang="en" title="timestamp Parameter">Timestamp to find most recent version of snapshots, specified in ISO8601 time format.</doc>
                      </param>
                      <representation mediaType="application/json"/>
                    </request>
                    <response status="">
                      <representation mediaType="application/json"/>
                    </response>
                    <response status="200">
                      <representation mediaType="application/json"/>
                    </response>
                    <response status="201">
                      <representation mediaType=""/>
                    </response>
                    <response status="202">
                      <representation mediaType=""/>
                    </response>
                    <response status="401">
                      <representation mediaType=""/>
                    </response>
                    <response status="404">
                      <representation mediaType=""/>
                    </response>
                    <response status="409">
                      <representation mediaType=""/>
                    </response>
                    <response status="500">
                      <representation mediaType=""/>
                    </response>
                  </method>
                  <method name="DELETE" id="delete">
                    <doc xml:lang="en" title="delete">Delete operation for snapshots</doc>
                    <request>
                      <param name="recurse" type="xs:boolean" required="false" default="" style="query" xmlns:xs="http://www.w3.org/2001/XMLSchema">
                        <doc xml:lang="en" title="recurse Parameter">If true, finds all elements recursively based on containment hierarchy</doc>
                      </param>
                      <param name="recurseDepth" type="xs:integer" required="false" default="" style="query" xmlns:xs="http://www.w3.org/2001/XMLSchema">
                        <doc xml:lang="en" title="recurseDepth Parameter">Depth to recurse to. 0 specifies infinite recursion (e.g., until all leaf nodes are found).</doc>
                      </param>
                      <param name="search" type="xs:string" required="false" default="" style="query" xmlns:xs="http://www.w3.org/2001/XMLSchema">
                        <doc xml:lang="en" title="search Parameter">Regular expression of the search to be executed at the specified scope. Currently search is against sysml:id, sysml:name, sysml:documentation, sysml:body.</doc>
                      </param>
                      <param name="timestamp" type="xs:date" required="false" default="" style="query" xmlns:xs="http://www.w3.org/2001/XMLSchema">
                        <doc xml:lang="en" title="timestamp Parameter">Timestamp to find most recent version of snapshots, specified in ISO8601 time format.</doc>
                      </param>
                    </request>
                    <response status="200">
                      <representation mediaType="application/json"/>
                    </response>
                    <response status="202">
                      <representation mediaType=""/>
                    </response>
                    <response status="401">
                      <representation mediaType=""/>
                    </response>
                    <response status="404">
                      <representation mediaType=""/>
                    </response>
                    <response status="500">
                      <representation mediaType=""/>
                    </response>
                  </method>
                  <method name="GET" id="get">
                    <doc xml:lang="en" title="get">Read operation for snapshots</doc>
                    <request>
                      <param name="recurse" type="xs:boolean" required="false" default="" style="query" xmlns:xs="http://www.w3.org/2001/XMLSchema">
                        <doc xml:lang="en" title="recurse Parameter">If true, finds all elements recursively based on containment hierarchy</doc>
                      </param>
                      <param name="recurseDepth" type="xs:integer" required="false" default="" style="query" xmlns:xs="http://www.w3.org/2001/XMLSchema">
                        <doc xml:lang="en" title="recurseDepth Parameter">Depth to recurse to. 0 specifies infinite recursion (e.g., until all leaf nodes are found).</doc>
                      </param>
                      <param name="search" type="xs:string" required="false" default="" style="query" xmlns:xs="http://www.w3.org/2001/XMLSchema">
                        <doc xml:lang="en" title="search Parameter">Regular expression of the search to be executed at the specified scope. Currently search is against sysml:id, sysml:name, sysml:documentation, sysml:body.</doc>
                      </param>
                      <param name="timestamp" type="xs:date" required="false" default="" style="query" xmlns:xs="http://www.w3.org/2001/XMLSchema">
                        <doc xml:lang="en" title="timestamp Parameter">Timestamp to find most recent version of snapshots, specified in ISO8601 time format.</doc>
                      </param>
                    </request>
                    <response status="200">
                      <representation mediaType="application/json"/>
                    </response>
                    <response status="400">
                      <representation mediaType=""/>
                    </response>
                    <response status="401">
                      <representation mediaType=""/>
                    </response>
                    <response status="404">
                      <representation mediaType=""/>
                    </response>
                    <response status="500">
                      <representation mediaType=""/>
                    </response>
                  </method>
                </resource>
                <method name="POST" id="post">
                  <doc xml:lang="en" title="post">Append operation for products</doc>
                  <request>
                    <param name="recurse" type="xs:boolean" required="false" default="" style="query" xmlns:xs="http://www.w3.org/2001/XMLSchema">
                      <doc xml:lang="en" title="recurse Parameter">If true, finds all elements recursively based on containment hierarchy</doc>
                    </param>
                    <param name="recurseDepth" type="xs:integer" required="false" default="" style="query" xmlns:xs="http://www.w3.org/2001/XMLSchema">
                      <doc xml:lang="en" title="recurseDepth Parameter">Depth to recurse to. 0 specifies infinite recursion (e.g., until all leaf nodes are found).</doc>
                    </param>
                    <param name="search" type="xs:string" required="false" default="" style="query" xmlns:xs="http://www.w3.org/2001/XMLSchema">
                      <doc xml:lang="en" title="search Parameter">Regular expression of the search to be executed at the specified scope. Currently search is against sysml:id, sysml:name, sysml:documentation, sysml:body.</doc>
                    </param>
                    <param name="timestamp" type="xs:date" required="false" default="" style="query" xmlns:xs="http://www.w3.org/2001/XMLSchema">
                      <doc xml:lang="en" title="timestamp Parameter">Timestamp to find most recent version of products, specified in ISO8601 time format.</doc>
                    </param>
                    <representation mediaType="application/json"/>
                  </request>
                  <response status="">
                    <representation mediaType="application/json"/>
                  </response>
                  <response status="200">
                    <representation mediaType="application/json"/>
                  </response>
                  <response status="202">
                    <representation mediaType=""/>
                  </response>
                  <response status="401">
                    <representation mediaType=""/>
                  </response>
                  <response status="404">
                    <representation mediaType=""/>
                  </response>
                  <response status="409">
                    <representation mediaType=""/>
                  </response>
                  <response status="500">
                    <representation mediaType=""/>
                  </response>
                </method>
                <method name="PUT" id="put">
                  <doc xml:lang="en" title="put">Create/update operation for products</doc>
                  <request>
                    <param name="recurse" type="xs:boolean" required="false" default="" style="query" xmlns:xs="http://www.w3.org/2001/XMLSchema">
                      <doc xml:lang="en" title="recurse Parameter">If true, finds all elements recursively based on containment hierarchy</doc>
                    </param>
                    <param name="recurseDepth" type="xs:integer" required="false" default="" style="query" xmlns:xs="http://www.w3.org/2001/XMLSchema">
                      <doc xml:lang="en" title="recurseDepth Parameter">Depth to recurse to. 0 specifies infinite recursion (e.g., until all leaf nodes are found).</doc>
                    </param>
                    <param name="search" type="xs:string" required="false" default="" style="query" xmlns:xs="http://www.w3.org/2001/XMLSchema">
                      <doc xml:lang="en" title="search Parameter">Regular expression of the search to be executed at the specified scope. Currently search is against sysml:id, sysml:name, sysml:documentation, sysml:body.</doc>
                    </param>
                    <param name="timestamp" type="xs:date" required="false" default="" style="query" xmlns:xs="http://www.w3.org/2001/XMLSchema">
                      <doc xml:lang="en" title="timestamp Parameter">Timestamp to find most recent version of products, specified in ISO8601 time format.</doc>
                    </param>
                    <representation mediaType="application/json"/>
                  </request>
                  <response status="">
                    <representation mediaType="application/json"/>
                  </response>
                  <response status="200">
                    <representation mediaType="application/json"/>
                  </response>
                  <response status="201">
                    <representation mediaType=""/>
                  </response>
                  <response status="202">
                    <representation mediaType=""/>
                  </response>
                  <response status="401">
                    <representation mediaType=""/>
                  </response>
                  <response status="404">
                    <representation mediaType=""/>
                  </response>
                  <response status="409">
                    <representation mediaType=""/>
                  </response>
                  <response status="500">
                    <representation mediaType=""/>
                  </response>
                </method>
                <method name="DELETE" id="delete">
                  <doc xml:lang="en" title="delete">Delete operation for products</doc>
                  <request>
                    <param name="recurse" type="xs:boolean" required="false" default="" style="query" xmlns:xs="http://www.w3.org/2001/XMLSchema">
                      <doc xml:lang="en" title="recurse Parameter">If true, finds all elements recursively based on containment hierarchy</doc>
                    </param>
                    <param name="recurseDepth" type="xs:integer" required="false" default="" style="query" xmlns:xs="http://www.w3.org/2001/XMLSchema">
                      <doc xml:lang="en" title="recurseDepth Parameter">Depth to recurse to. 0 specifies infinite recursion (e.g., until all leaf nodes are found).</doc>
                    </param>
                    <param name="search" type="xs:string" required="false" default="" style="query" xmlns:xs="http://www.w3.org/2001/XMLSchema">
                      <doc xml:lang="en" title="search Parameter">Regular expression of the search to be executed at the specified scope. Currently search is against sysml:id, sysml:name, sysml:documentation, sysml:body.</doc>
                    </param>
                    <param name="timestamp" type="xs:date" required="false" default="" style="query" xmlns:xs="http://www.w3.org/2001/XMLSchema">
                      <doc xml:lang="en" title="timestamp Parameter">Timestamp to find most recent version of products, specified in ISO8601 time format.</doc>
                    </param>
                  </request>
                  <response status="200">
                    <representation mediaType="application/json"/>
                  </response>
                  <response status="202">
                    <representation mediaType=""/>
                  </response>
                  <response status="401">
                    <representation mediaType=""/>
                  </response>
                  <response status="404">
                    <representation mediaType=""/>
                  </response>
                  <response status="500">
                    <representation mediaType=""/>
                  </response>
                </method>
                <method name="GET" id="get">
                  <doc xml:lang="en" title="get">Read operation for products</doc>
                  <request>
                    <param name="recurse" type="xs:boolean" required="false" default="" style="query" xmlns:xs="http://www.w3.org/2001/XMLSchema">
                      <doc xml:lang="en" title="recurse Parameter">If true, finds all elements recursively based on containment hierarchy</doc>
                    </param>
                    <param name="recurseDepth" type="xs:integer" required="false" default="" style="query" xmlns:xs="http://www.w3.org/2001/XMLSchema">
                      <doc xml:lang="en" title="recurseDepth Parameter">Depth to recurse to. 0 specifies infinite recursion (e.g., until all leaf nodes are found).</doc>
                    </param>
                    <param name="search" type="xs:string" required="false" default="" style="query" xmlns:xs="http://www.w3.org/2001/XMLSchema">
                      <doc xml:lang="en" title="search Parameter">Regular expression of the search to be executed at the specified scope. Currently search is against sysml:id, sysml:name, sysml:documentation, sysml:body.</doc>
                    </param>
                    <param name="timestamp" type="xs:date" required="false" default="" style="query" xmlns:xs="http://www.w3.org/2001/XMLSchema">
                      <doc xml:lang="en" title="timestamp Parameter">Timestamp to find most recent version of products, specified in ISO8601 time format.</doc>
                    </param>
                  </request>
                  <response status="200">
                    <representation mediaType="application/json"/>
                  </response>
                  <response status="400">
                    <representation mediaType=""/>
                  </response>
                  <response status="401">
                    <representation mediaType=""/>
                  </response>
                  <response status="404">
                    <representation mediaType=""/>
                  </response>
                  <response status="500">
                    <representation mediaType=""/>
                  </response>
                </method>
              </resource>
              <method name="POST" id="post">
                <doc xml:lang="en" title="post">Append operation for products</doc>
                <request>
                  <param name="recurse" type="xs:boolean" required="false" default="" style="query" xmlns:xs="http://www.w3.org/2001/XMLSchema">
                    <doc xml:lang="en" title="recurse Parameter">If true, finds all elements recursively based on containment hierarchy</doc>
                  </param>
                  <param name="recurseDepth" type="xs:integer" required="false" default="" style="query" xmlns:xs="http://www.w3.org/2001/XMLSchema">
                    <doc xml:lang="en" title="recurseDepth Parameter">Depth to recurse to. 0 specifies infinite recursion (e.g., until all leaf nodes are found).</doc>
                  </param>
                  <param name="search" type="xs:string" required="false" default="" style="query" xmlns:xs="http://www.w3.org/2001/XMLSchema">
                    <doc xml:lang="en" title="search Parameter">Regular expression of the search to be executed at the specified scope. Currently search is against sysml:id, sysml:name, sysml:documentation, sysml:body.</doc>
                  </param>
                  <param name="timestamp" type="xs:date" required="false" default="" style="query" xmlns:xs="http://www.w3.org/2001/XMLSchema">
                    <doc xml:lang="en" title="timestamp Parameter">Timestamp to find most recent version of products, specified in ISO8601 time format.</doc>
                  </param>
                  <representation mediaType="application/json"/>
                </request>
                <response status="">
                  <representation mediaType="application/json"/>
                </response>
                <response status="200">
                  <representation mediaType="application/json"/>
                </response>
                <response status="202">
                  <representation mediaType=""/>
                </response>
                <response status="401">
                  <representation mediaType=""/>
                </response>
                <response status="404">
                  <representation mediaType=""/>
                </response>
                <response status="409">
                  <representation mediaType=""/>
                </response>
                <response status="500">
                  <representation mediaType=""/>
                </response>
              </method>
              <method name="PUT" id="put">
                <doc xml:lang="en" title="put">Create/update operation for products</doc>
                <request>
                  <param name="recurse" type="xs:boolean" required="false" default="" style="query" xmlns:xs="http://www.w3.org/2001/XMLSchema">
                    <doc xml:lang="en" title="recurse Parameter">If true, finds all elements recursively based on containment hierarchy</doc>
                  </param>
                  <param name="recurseDepth" type="xs:integer" required="false" default="" style="query" xmlns:xs="http://www.w3.org/2001/XMLSchema">
                    <doc xml:lang="en" title="recurseDepth Parameter">Depth to recurse to. 0 specifies infinite recursion (e.g., until all leaf nodes are found).</doc>
                  </param>
                  <param name="search" type="xs:string" required="false" default="" style="query" xmlns:xs="http://www.w3.org/2001/XMLSchema">
                    <doc xml:lang="en" title="search Parameter">Regular expression of the search to be executed at the specified scope. Currently search is against sysml:id, sysml:name, sysml:documentation, sysml:body.</doc>
                  </param>
                  <param name="timestamp" type="xs:date" required="false" default="" style="query" xmlns:xs="http://www.w3.org/2001/XMLSchema">
                    <doc xml:lang="en" title="timestamp Parameter">Timestamp to find most recent version of products, specified in ISO8601 time format.</doc>
                  </param>
                  <representation mediaType="application/json"/>
                </request>
                <response status="">
                  <representation mediaType="application/json"/>
                </response>
                <response status="200">
                  <representation mediaType="application/json"/>
                </response>
                <response status="201">
                  <representation mediaType=""/>
                </response>
                <response status="202">
                  <representation mediaType=""/>
                </response>
                <response status="401">
                  <representation mediaType=""/>
                </response>
                <response status="404">
                  <representation mediaType=""/>
                </response>
                <response status="409">
                  <representation mediaType=""/>
                </response>
                <response status="500">
                  <representation mediaType=""/>
                </response>
              </method>
              <method name="DELETE" id="delete">
                <doc xml:lang="en" title="delete">Delete operation for products</doc>
                <request>
                  <param name="recurse" type="xs:boolean" required="false" default="" style="query" xmlns:xs="http://www.w3.org/2001/XMLSchema">
                    <doc xml:lang="en" title="recurse Parameter">If true, finds all elements recursively based on containment hierarchy</doc>
                  </param>
                  <param name="recurseDepth" type="xs:integer" required="false" default="" style="query" xmlns:xs="http://www.w3.org/2001/XMLSchema">
                    <doc xml:lang="en" title="recurseDepth Parameter">Depth to recurse to. 0 specifies infinite recursion (e.g., until all leaf nodes are found).</doc>
                  </param>
                  <param name="search" type="xs:string" required="false" default="" style="query" xmlns:xs="http://www.w3.org/2001/XMLSchema">
                    <doc xml:lang="en" title="search Parameter">Regular expression of the search to be executed at the specified scope. Currently search is against sysml:id, sysml:name, sysml:documentation, sysml:body.</doc>
                  </param>
                  <param name="timestamp" type="xs:date" required="false" default="" style="query" xmlns:xs="http://www.w3.org/2001/XMLSchema">
                    <doc xml:lang="en" title="timestamp Parameter">Timestamp to find most recent version of products, specified in ISO8601 time format.</doc>
                  </param>
                </request>
                <response status="200">
                  <representation mediaType="application/json"/>
                </response>
                <response status="202">
                  <representation mediaType=""/>
                </response>
                <response status="401">
                  <representation mediaType=""/>
                </response>
                <response status="404">
                  <representation mediaType=""/>
                </response>
                <response status="500">
                  <representation mediaType=""/>
                </response>
              </method>
              <method name="GET" id="get">
                <doc xml:lang="en" title="get">Retrieve all products for which user has read permissions</doc>
                <request>
                  <param name="recurse" type="xs:boolean" required="false" default="" style="query" xmlns:xs="http://www.w3.org/2001/XMLSchema">
                    <doc xml:lang="en" title="recurse Parameter">If true, finds all elements recursively based on containment hierarchy</doc>
                  </param>
                  <param name="recurseDepth" type="xs:integer" required="false" default="" style="query" xmlns:xs="http://www.w3.org/2001/XMLSchema">
                    <doc xml:lang="en" title="recurseDepth Parameter">Depth to recurse to. 0 specifies infinite recursion (e.g., until all leaf nodes are found).</doc>
                  </param>
                  <param name="search" type="xs:string" required="false" default="" style="query" xmlns:xs="http://www.w3.org/2001/XMLSchema">
                    <doc xml:lang="en" title="search Parameter">Regular expression of the search to be executed at the specified scope. Currently search is against sysml:id, sysml:name, sysml:documentation, sysml:body.</doc>
                  </param>
                  <param name="timestamp" type="xs:date" required="false" default="" style="query" xmlns:xs="http://www.w3.org/2001/XMLSchema">
                    <doc xml:lang="en" title="timestamp Parameter">Timestamp to find most recent version of products, specified in ISO8601 time format.</doc>
                  </param>
                </request>
                <response status="200">
                  <representation mediaType="application/json"/>
                </response>
                <response status="400">
                  <representation mediaType=""/>
                </response>
                <response status="401">
                  <representation mediaType=""/>
                </response>
                <response status="404">
                  <representation mediaType=""/>
                </response>
                <response status="500">
                  <representation mediaType=""/>
                </response>
              </method>
            </resource>
          </resource>
          <method name="GET" id="get">
            <doc xml:lang="en" title="get">Retrieve all sites for which user has read permissions</doc>
            <request>
              <param name="recurse" type="xs:boolean" required="false" default="" style="query" xmlns:xs="http://www.w3.org/2001/XMLSchema">
                <doc xml:lang="en" title="recurse Parameter">If true, finds all elements recursively based on containment hierarchy</doc>
              </param>
              <param name="recurseDepth" type="xs:integer" required="false" default="" style="query" xmlns:xs="http://www.w3.org/2001/XMLSchema">
                <doc xml:lang="en" title="recurseDepth Parameter">Depth to recurse to. 0 specifies infinite recursion (e.g., until all leaf nodes are found).</doc>
              </param>
              <param name="search" type="xs:string" required="false" default="" style="query" xmlns:xs="http://www.w3.org/2001/XMLSchema">
                <doc xml:lang="en" title="search Parameter">Regular expression of the search to be executed at the specified scope. Currently search is against sysml:id, sysml:name, sysml:documentation, sysml:body.</doc>
              </param>
              <param name="timestamp" type="xs:date" required="false" default="" style="query" xmlns:xs="http://www.w3.org/2001/XMLSchema">
                <doc xml:lang="en" title="timestamp Parameter">Timestamp to find most recent version of sites, specified in ISO8601 time format.</doc>
              </param>
            </request>
            <response status="200">
              <representation mediaType="application/json"/>
            </response>
            <response status="400">
              <representation mediaType=""/>
            </response>
            <response status="401">
              <representation mediaType=""/>
            </response>
            <response status="404">
              <representation mediaType=""/>
            </response>
            <response status="500">
              <representation mediaType=""/>
            </response>
          </method>
        </resource>
        <resource path="views" id="/views">
          <doc xml:lang="en" title="/views">Create, Update, and Delete operations for views</doc>
          <param name="workspaceId" type="xs:string" required="true" default="" style="template" xmlns:xs="http://www.w3.org/2001/XMLSchema"/>
          <resource path="{viewId}" id="/{viewId}">
            <doc xml:lang="en" title="/{viewId}">Create, Update, and Delete operations for views</doc>
            <param name="workspaceId" type="xs:string" required="true" default="" style="template" xmlns:xs="http://www.w3.org/2001/XMLSchema"/>
            <param name="viewId" type="xs:string" required="true" default="" style="template" xmlns:xs="http://www.w3.org/2001/XMLSchema">
              <doc xml:lang="en" title="viewId Parameter">Sysml ID for the view under consideration</doc>
            </param>
            <resource path="elements" id="/elements">
              <doc xml:lang="en" title="/elements">Create, Update, and Delete operations for elements</doc>
              <param name="workspaceId" type="xs:string" required="true" default="" style="template" xmlns:xs="http://www.w3.org/2001/XMLSchema"/>
              <param name="viewId" type="xs:string" required="true" default="" style="template" xmlns:xs="http://www.w3.org/2001/XMLSchema"/>
              <resource path="{elementId}" id="/{elementId}">
                <doc xml:lang="en" title="/{elementId}">Create, Update, and Delete operations for elements</doc>
                <param name="workspaceId" type="xs:string" required="true" default="" style="template" xmlns:xs="http://www.w3.org/2001/XMLSchema"/>
                <param name="viewId" type="xs:string" required="true" default="" style="template" xmlns:xs="http://www.w3.org/2001/XMLSchema"/>
                <param name="elementId" type="xs:string" required="true" default="" style="template" xmlns:xs="http://www.w3.org/2001/XMLSchema">
                  <doc xml:lang="en" title="elementId Parameter">Sysml ID for the element under consideration</doc>
                </param>
                <resource path="versions" id="/versions">
                  <doc xml:lang="en" title="/versions">Create, Update, and Delete operations for versions</doc>
                  <param name="workspaceId" type="xs:string" required="true" default="" style="template" xmlns:xs="http://www.w3.org/2001/XMLSchema"/>
                  <param name="viewId" type="xs:string" required="true" default="" style="template" xmlns:xs="http://www.w3.org/2001/XMLSchema"/>
                  <param name="elementId" type="xs:string" required="true" default="" style="template" xmlns:xs="http://www.w3.org/2001/XMLSchema"/>
                  <resource path="{versionId}" id="/{versionId}">
                    <doc xml:lang="en" title="/{versionId}">Create, Update, and Delete operations for versions</doc>
                    <param name="workspaceId" type="xs:string" required="true" default="" style="template" xmlns:xs="http://www.w3.org/2001/XMLSchema"/>
                    <param name="viewId" type="xs:string" required="true" default="" style="template" xmlns:xs="http://www.w3.org/2001/XMLSchema"/>
                    <param name="elementId" type="xs:string" required="true" default="" style="template" xmlns:xs="http://www.w3.org/2001/XMLSchema"/>
                    <param name="versionId" type="xs:string" required="true" default="" style="template" xmlns:xs="http://www.w3.org/2001/XMLSchema">
                      <doc xml:lang="en" title="versionId Parameter">Sysml ID for the version under consideration</doc>
                    </param>
                    <method name="POST" id="post">
                      <doc xml:lang="en" title="post">Append operation for versions</doc>
                      <request>
                        <param name="recurse" type="xs:boolean" required="false" default="" style="query" xmlns:xs="http://www.w3.org/2001/XMLSchema">
                          <doc xml:lang="en" title="recurse Parameter">If true, finds all elements recursively based on containment hierarchy</doc>
                        </param>
                        <param name="recurseDepth" type="xs:integer" required="false" default="" style="query" xmlns:xs="http://www.w3.org/2001/XMLSchema">
                          <doc xml:lang="en" title="recurseDepth Parameter">Depth to recurse to. 0 specifies infinite recursion (e.g., until all leaf nodes are found).</doc>
                        </param>
                        <param name="search" type="xs:string" required="false" default="" style="query" xmlns:xs="http://www.w3.org/2001/XMLSchema">
                          <doc xml:lang="en" title="search Parameter">Regular expression of the search to be executed at the specified scope. Currently search is against sysml:id, sysml:name, sysml:documentation, sysml:body.</doc>
                        </param>
                        <param name="timestamp" type="xs:date" required="false" default="" style="query" xmlns:xs="http://www.w3.org/2001/XMLSchema">
                          <doc xml:lang="en" title="timestamp Parameter">Timestamp to find most recent version of versions, specified in ISO8601 time format.</doc>
                        </param>
                        <representation mediaType="application/json"/>
                      </request>
                      <response status="">
                        <representation mediaType="application/json"/>
                      </response>
                      <response status="200">
                        <representation mediaType="application/json"/>
                      </response>
                      <response status="202">
                        <representation mediaType=""/>
                      </response>
                      <response status="401">
                        <representation mediaType=""/>
                      </response>
                      <response status="404">
                        <representation mediaType=""/>
                      </response>
                      <response status="409">
                        <representation mediaType=""/>
                      </response>
                      <response status="500">
                        <representation mediaType=""/>
                      </response>
                    </method>
                    <method name="PUT" id="put">
                      <doc xml:lang="en" title="put">Create/update operation for versions</doc>
                      <request>
                        <param name="recurse" type="xs:boolean" required="false" default="" style="query" xmlns:xs="http://www.w3.org/2001/XMLSchema">
                          <doc xml:lang="en" title="recurse Parameter">If true, finds all elements recursively based on containment hierarchy</doc>
                        </param>
                        <param name="recurseDepth" type="xs:integer" required="false" default="" style="query" xmlns:xs="http://www.w3.org/2001/XMLSchema">
                          <doc xml:lang="en" title="recurseDepth Parameter">Depth to recurse to. 0 specifies infinite recursion (e.g., until all leaf nodes are found).</doc>
                        </param>
                        <param name="search" type="xs:string" required="false" default="" style="query" xmlns:xs="http://www.w3.org/2001/XMLSchema">
                          <doc xml:lang="en" title="search Parameter">Regular expression of the search to be executed at the specified scope. Currently search is against sysml:id, sysml:name, sysml:documentation, sysml:body.</doc>
                        </param>
                        <param name="timestamp" type="xs:date" required="false" default="" style="query" xmlns:xs="http://www.w3.org/2001/XMLSchema">
                          <doc xml:lang="en" title="timestamp Parameter">Timestamp to find most recent version of versions, specified in ISO8601 time format.</doc>
                        </param>
                        <representation mediaType="application/json"/>
                      </request>
                      <response status="">
                        <representation mediaType="application/json"/>
                      </response>
                      <response status="200">
                        <representation mediaType="application/json"/>
                      </response>
                      <response status="201">
                        <representation mediaType=""/>
                      </response>
                      <response status="202">
                        <representation mediaType=""/>
                      </response>
                      <response status="401">
                        <representation mediaType=""/>
                      </response>
                      <response status="404">
                        <representation mediaType=""/>
                      </response>
                      <response status="409">
                        <representation mediaType=""/>
                      </response>
                      <response status="500">
                        <representation mediaType=""/>
                      </response>
                    </method>
                    <method name="DELETE" id="delete">
                      <doc xml:lang="en" title="delete">Delete operation for versions</doc>
                      <request>
                        <param name="recurse" type="xs:boolean" required="false" default="" style="query" xmlns:xs="http://www.w3.org/2001/XMLSchema">
                          <doc xml:lang="en" title="recurse Parameter">If true, finds all elements recursively based on containment hierarchy</doc>
                        </param>
                        <param name="recurseDepth" type="xs:integer" required="false" default="" style="query" xmlns:xs="http://www.w3.org/2001/XMLSchema">
                          <doc xml:lang="en" title="recurseDepth Parameter">Depth to recurse to. 0 specifies infinite recursion (e.g., until all leaf nodes are found).</doc>
                        </param>
                        <param name="search" type="xs:string" required="false" default="" style="query" xmlns:xs="http://www.w3.org/2001/XMLSchema">
                          <doc xml:lang="en" title="search Parameter">Regular expression of the search to be executed at the specified scope. Currently search is against sysml:id, sysml:name, sysml:documentation, sysml:body.</doc>
                        </param>
                        <param name="timestamp" type="xs:date" required="false" default="" style="query" xmlns:xs="http://www.w3.org/2001/XMLSchema">
                          <doc xml:lang="en" title="timestamp Parameter">Timestamp to find most recent version of versions, specified in ISO8601 time format.</doc>
                        </param>
                      </request>
                      <response status="200">
                        <representation mediaType="application/json"/>
                      </response>
                      <response status="202">
                        <representation mediaType=""/>
                      </response>
                      <response status="401">
                        <representation mediaType=""/>
                      </response>
                      <response status="404">
                        <representation mediaType=""/>
                      </response>
                      <response status="500">
                        <representation mediaType=""/>
                      </response>
                    </method>
                    <method name="GET" id="get">
                      <doc xml:lang="en" title="get">Read operation for versions</doc>
                      <request>
                        <param name="recurse" type="xs:boolean" required="false" default="" style="query" xmlns:xs="http://www.w3.org/2001/XMLSchema">
                          <doc xml:lang="en" title="recurse Parameter">If true, finds all elements recursively based on containment hierarchy</doc>
                        </param>
                        <param name="recurseDepth" type="xs:integer" required="false" default="" style="query" xmlns:xs="http://www.w3.org/2001/XMLSchema">
                          <doc xml:lang="en" title="recurseDepth Parameter">Depth to recurse to. 0 specifies infinite recursion (e.g., until all leaf nodes are found).</doc>
                        </param>
                        <param name="search" type="xs:string" required="false" default="" style="query" xmlns:xs="http://www.w3.org/2001/XMLSchema">
                          <doc xml:lang="en" title="search Parameter">Regular expression of the search to be executed at the specified scope. Currently search is against sysml:id, sysml:name, sysml:documentation, sysml:body.</doc>
                        </param>
                        <param name="timestamp" type="xs:date" required="false" default="" style="query" xmlns:xs="http://www.w3.org/2001/XMLSchema">
                          <doc xml:lang="en" title="timestamp Parameter">Timestamp to find most recent version of versions, specified in ISO8601 time format.</doc>
                        </param>
                      </request>
                      <response status="200">
                        <representation mediaType="application/json"/>
                      </response>
                      <response status="400">
                        <representation mediaType=""/>
                      </response>
                      <response status="401">
                        <representation mediaType=""/>
                      </response>
                      <response status="404">
                        <representation mediaType=""/>
                      </response>
                      <response status="500">
                        <representation mediaType=""/>
                      </response>
                    </method>
                  </resource>
                  <method name="POST" id="post">
                    <doc xml:lang="en" title="post">Append operation for versions</doc>
                    <request>
                      <param name="recurse" type="xs:boolean" required="false" default="" style="query" xmlns:xs="http://www.w3.org/2001/XMLSchema">
                        <doc xml:lang="en" title="recurse Parameter">If true, finds all elements recursively based on containment hierarchy</doc>
                      </param>
                      <param name="recurseDepth" type="xs:integer" required="false" default="" style="query" xmlns:xs="http://www.w3.org/2001/XMLSchema">
                        <doc xml:lang="en" title="recurseDepth Parameter">Depth to recurse to. 0 specifies infinite recursion (e.g., until all leaf nodes are found).</doc>
                      </param>
                      <param name="search" type="xs:string" required="false" default="" style="query" xmlns:xs="http://www.w3.org/2001/XMLSchema">
                        <doc xml:lang="en" title="search Parameter">Regular expression of the search to be executed at the specified scope. Currently search is against sysml:id, sysml:name, sysml:documentation, sysml:body.</doc>
                      </param>
                      <param name="timestamp" type="xs:date" required="false" default="" style="query" xmlns:xs="http://www.w3.org/2001/XMLSchema">
                        <doc xml:lang="en" title="timestamp Parameter">Timestamp to find most recent version of versions, specified in ISO8601 time format.</doc>
                      </param>
                      <representation mediaType="application/json"/>
                    </request>
                    <response status="">
                      <representation mediaType="application/json"/>
                    </response>
                    <response status="200">
                      <representation mediaType="application/json"/>
                    </response>
                    <response status="202">
                      <representation mediaType=""/>
                    </response>
                    <response status="401">
                      <representation mediaType=""/>
                    </response>
                    <response status="404">
                      <representation mediaType=""/>
                    </response>
                    <response status="409">
                      <representation mediaType=""/>
                    </response>
                    <response status="500">
                      <representation mediaType=""/>
                    </response>
                  </method>
                  <method name="PUT" id="put">
                    <doc xml:lang="en" title="put">Create/update operation for versions</doc>
                    <request>
                      <param name="recurse" type="xs:boolean" required="false" default="" style="query" xmlns:xs="http://www.w3.org/2001/XMLSchema">
                        <doc xml:lang="en" title="recurse Parameter">If true, finds all elements recursively based on containment hierarchy</doc>
                      </param>
                      <param name="recurseDepth" type="xs:integer" required="false" default="" style="query" xmlns:xs="http://www.w3.org/2001/XMLSchema">
                        <doc xml:lang="en" title="recurseDepth Parameter">Depth to recurse to. 0 specifies infinite recursion (e.g., until all leaf nodes are found).</doc>
                      </param>
                      <param name="search" type="xs:string" required="false" default="" style="query" xmlns:xs="http://www.w3.org/2001/XMLSchema">
                        <doc xml:lang="en" title="search Parameter">Regular expression of the search to be executed at the specified scope. Currently search is against sysml:id, sysml:name, sysml:documentation, sysml:body.</doc>
                      </param>
                      <param name="timestamp" type="xs:date" required="false" default="" style="query" xmlns:xs="http://www.w3.org/2001/XMLSchema">
                        <doc xml:lang="en" title="timestamp Parameter">Timestamp to find most recent version of versions, specified in ISO8601 time format.</doc>
                      </param>
                      <representation mediaType="application/json"/>
                    </request>
                    <response status="">
                      <representation mediaType="application/json"/>
                    </response>
                    <response status="200">
                      <representation mediaType="application/json"/>
                    </response>
                    <response status="201">
                      <representation mediaType=""/>
                    </response>
                    <response status="202">
                      <representation mediaType=""/>
                    </response>
                    <response status="401">
                      <representation mediaType=""/>
                    </response>
                    <response status="404">
                      <representation mediaType=""/>
                    </response>
                    <response status="409">
                      <representation mediaType=""/>
                    </response>
                    <response status="500">
                      <representation mediaType=""/>
                    </response>
                  </method>
                  <method name="DELETE" id="delete">
                    <doc xml:lang="en" title="delete">Delete operation for versions</doc>
                    <request>
                      <param name="recurse" type="xs:boolean" required="false" default="" style="query" xmlns:xs="http://www.w3.org/2001/XMLSchema">
                        <doc xml:lang="en" title="recurse Parameter">If true, finds all elements recursively based on containment hierarchy</doc>
                      </param>
                      <param name="recurseDepth" type="xs:integer" required="false" default="" style="query" xmlns:xs="http://www.w3.org/2001/XMLSchema">
                        <doc xml:lang="en" title="recurseDepth Parameter">Depth to recurse to. 0 specifies infinite recursion (e.g., until all leaf nodes are found).</doc>
                      </param>
                      <param name="search" type="xs:string" required="false" default="" style="query" xmlns:xs="http://www.w3.org/2001/XMLSchema">
                        <doc xml:lang="en" title="search Parameter">Regular expression of the search to be executed at the specified scope. Currently search is against sysml:id, sysml:name, sysml:documentation, sysml:body.</doc>
                      </param>
                      <param name="timestamp" type="xs:date" required="false" default="" style="query" xmlns:xs="http://www.w3.org/2001/XMLSchema">
                        <doc xml:lang="en" title="timestamp Parameter">Timestamp to find most recent version of versions, specified in ISO8601 time format.</doc>
                      </param>
                    </request>
                    <response status="200">
                      <representation mediaType="application/json"/>
                    </response>
                    <response status="202">
                      <representation mediaType=""/>
                    </response>
                    <response status="401">
                      <representation mediaType=""/>
                    </response>
                    <response status="404">
                      <representation mediaType=""/>
                    </response>
                    <response status="500">
                      <representation mediaType=""/>
                    </response>
                  </method>
                  <method name="GET" id="get">
                    <doc xml:lang="en" title="get">Read operation for versions</doc>
                    <request>
                      <param name="recurse" type="xs:boolean" required="false" default="" style="query" xmlns:xs="http://www.w3.org/2001/XMLSchema">
                        <doc xml:lang="en" title="recurse Parameter">If true, finds all elements recursively based on containment hierarchy</doc>
                      </param>
                      <param name="recurseDepth" type="xs:integer" required="false" default="" style="query" xmlns:xs="http://www.w3.org/2001/XMLSchema">
                        <doc xml:lang="en" title="recurseDepth Parameter">Depth to recurse to. 0 specifies infinite recursion (e.g., until all leaf nodes are found).</doc>
                      </param>
                      <param name="search" type="xs:string" required="false" default="" style="query" xmlns:xs="http://www.w3.org/2001/XMLSchema">
                        <doc xml:lang="en" title="search Parameter">Regular expression of the search to be executed at the specified scope. Currently search is against sysml:id, sysml:name, sysml:documentation, sysml:body.</doc>
                      </param>
                      <param name="timestamp" type="xs:date" required="false" default="" style="query" xmlns:xs="http://www.w3.org/2001/XMLSchema">
                        <doc xml:lang="en" title="timestamp Parameter">Timestamp to find most recent version of versions, specified in ISO8601 time format.</doc>
                      </param>
                    </request>
                    <response status="200">
                      <representation mediaType="application/json"/>
                    </response>
                    <response status="400">
                      <representation mediaType=""/>
                    </response>
                    <response status="401">
                      <representation mediaType=""/>
                    </response>
                    <response status="404">
                      <representation mediaType=""/>
                    </response>
                    <response status="500">
                      <representation mediaType=""/>
                    </response>
                  </method>
                </resource>
                <resource path="comments" id="/comments">
                  <doc xml:lang="en" title="/comments">Create, Update, and Delete operations for comments</doc>
                  <param name="workspaceId" type="xs:string" required="true" default="" style="template" xmlns:xs="http://www.w3.org/2001/XMLSchema"/>
                  <param name="viewId" type="xs:string" required="true" default="" style="template" xmlns:xs="http://www.w3.org/2001/XMLSchema"/>
                  <param name="elementId" type="xs:string" required="true" default="" style="template" xmlns:xs="http://www.w3.org/2001/XMLSchema"/>
                  <resource path="{commentId}" id="/{commentId}">
                    <doc xml:lang="en" title="/{commentId}">Create, Update, and Delete operations for comments</doc>
                    <param name="workspaceId" type="xs:string" required="true" default="" style="template" xmlns:xs="http://www.w3.org/2001/XMLSchema"/>
                    <param name="viewId" type="xs:string" required="true" default="" style="template" xmlns:xs="http://www.w3.org/2001/XMLSchema"/>
                    <param name="elementId" type="xs:string" required="true" default="" style="template" xmlns:xs="http://www.w3.org/2001/XMLSchema"/>
                    <param name="commentId" type="xs:string" required="true" default="" style="template" xmlns:xs="http://www.w3.org/2001/XMLSchema">
                      <doc xml:lang="en" title="commentId Parameter">Sysml ID for comment under consideration</doc>
                    </param>
                    <method name="POST" id="post">
                      <doc xml:lang="en" title="post">Append operation for comments</doc>
                      <request>
                        <param name="recurse" type="xs:boolean" required="false" default="" style="query" xmlns:xs="http://www.w3.org/2001/XMLSchema">
                          <doc xml:lang="en" title="recurse Parameter">If true, finds all elements recursively based on containment hierarchy</doc>
                        </param>
                        <param name="recurseDepth" type="xs:integer" required="false" default="" style="query" xmlns:xs="http://www.w3.org/2001/XMLSchema">
                          <doc xml:lang="en" title="recurseDepth Parameter">Depth to recurse to. 0 specifies infinite recursion (e.g., until all leaf nodes are found).</doc>
                        </param>
                        <param name="search" type="xs:string" required="false" default="" style="query" xmlns:xs="http://www.w3.org/2001/XMLSchema">
                          <doc xml:lang="en" title="search Parameter">Regular expression of the search to be executed at the specified scope. Currently search is against sysml:id, sysml:name, sysml:documentation, sysml:body.</doc>
                        </param>
                        <param name="timestamp" type="xs:date" required="false" default="" style="query" xmlns:xs="http://www.w3.org/2001/XMLSchema">
                          <doc xml:lang="en" title="timestamp Parameter">Timestamp to find most recent version of comments, specified in ISO8601 time format.</doc>
                        </param>
                        <representation mediaType="application/json"/>
                      </request>
                      <response status="">
                        <representation mediaType="application/json"/>
                      </response>
                      <response status="200">
                        <representation mediaType="application/json"/>
                      </response>
                      <response status="202">
                        <representation mediaType=""/>
                      </response>
                      <response status="401">
                        <representation mediaType=""/>
                      </response>
                      <response status="404">
                        <representation mediaType=""/>
                      </response>
                      <response status="409">
                        <representation mediaType=""/>
                      </response>
                      <response status="500">
                        <representation mediaType=""/>
                      </response>
                    </method>
                    <method name="PUT" id="put">
                      <doc xml:lang="en" title="put">Create/update operation for comments</doc>
                      <request>
                        <param name="recurse" type="xs:boolean" required="false" default="" style="query" xmlns:xs="http://www.w3.org/2001/XMLSchema">
                          <doc xml:lang="en" title="recurse Parameter">If true, finds all elements recursively based on containment hierarchy</doc>
                        </param>
                        <param name="recurseDepth" type="xs:integer" required="false" default="" style="query" xmlns:xs="http://www.w3.org/2001/XMLSchema">
                          <doc xml:lang="en" title="recurseDepth Parameter">Depth to recurse to. 0 specifies infinite recursion (e.g., until all leaf nodes are found).</doc>
                        </param>
                        <param name="search" type="xs:string" required="false" default="" style="query" xmlns:xs="http://www.w3.org/2001/XMLSchema">
                          <doc xml:lang="en" title="search Parameter">Regular expression of the search to be executed at the specified scope. Currently search is against sysml:id, sysml:name, sysml:documentation, sysml:body.</doc>
                        </param>
                        <param name="timestamp" type="xs:date" required="false" default="" style="query" xmlns:xs="http://www.w3.org/2001/XMLSchema">
                          <doc xml:lang="en" title="timestamp Parameter">Timestamp to find most recent version of comments, specified in ISO8601 time format.</doc>
                        </param>
                        <representation mediaType="application/json"/>
                      </request>
                      <response status="">
                        <representation mediaType="application/json"/>
                      </response>
                      <response status="200">
                        <representation mediaType="application/json"/>
                      </response>
                      <response status="201">
                        <representation mediaType=""/>
                      </response>
                      <response status="202">
                        <representation mediaType=""/>
                      </response>
                      <response status="401">
                        <representation mediaType=""/>
                      </response>
                      <response status="404">
                        <representation mediaType=""/>
                      </response>
                      <response status="409">
                        <representation mediaType=""/>
                      </response>
                      <response status="500">
                        <representation mediaType=""/>
                      </response>
                    </method>
                    <method name="DELETE" id="delete">
                      <doc xml:lang="en" title="delete">Delete operation for comments</doc>
                      <request>
                        <param name="recurse" type="xs:boolean" required="false" default="" style="query" xmlns:xs="http://www.w3.org/2001/XMLSchema">
                          <doc xml:lang="en" title="recurse Parameter">If true, finds all elements recursively based on containment hierarchy</doc>
                        </param>
                        <param name="recurseDepth" type="xs:integer" required="false" default="" style="query" xmlns:xs="http://www.w3.org/2001/XMLSchema">
                          <doc xml:lang="en" title="recurseDepth Parameter">Depth to recurse to. 0 specifies infinite recursion (e.g., until all leaf nodes are found).</doc>
                        </param>
                        <param name="search" type="xs:string" required="false" default="" style="query" xmlns:xs="http://www.w3.org/2001/XMLSchema">
                          <doc xml:lang="en" title="search Parameter">Regular expression of the search to be executed at the specified scope. Currently search is against sysml:id, sysml:name, sysml:documentation, sysml:body.</doc>
                        </param>
                        <param name="timestamp" type="xs:date" required="false" default="" style="query" xmlns:xs="http://www.w3.org/2001/XMLSchema">
                          <doc xml:lang="en" title="timestamp Parameter">Timestamp to find most recent version of comments, specified in ISO8601 time format.</doc>
                        </param>
                      </request>
                      <response status="200">
                        <representation mediaType="application/json"/>
                      </response>
                      <response status="202">
                        <representation mediaType=""/>
                      </response>
                      <response status="401">
                        <representation mediaType=""/>
                      </response>
                      <response status="404">
                        <representation mediaType=""/>
                      </response>
                      <response status="500">
                        <representation mediaType=""/>
                      </response>
                    </method>
                    <method name="GET" id="get">
                      <doc xml:lang="en" title="get">Read operation for comments</doc>
                      <request>
                        <param name="recurse" type="xs:boolean" required="false" default="" style="query" xmlns:xs="http://www.w3.org/2001/XMLSchema">
                          <doc xml:lang="en" title="recurse Parameter">If true, finds all elements recursively based on containment hierarchy</doc>
                        </param>
                        <param name="recurseDepth" type="xs:integer" required="false" default="" style="query" xmlns:xs="http://www.w3.org/2001/XMLSchema">
                          <doc xml:lang="en" title="recurseDepth Parameter">Depth to recurse to. 0 specifies infinite recursion (e.g., until all leaf nodes are found).</doc>
                        </param>
                        <param name="search" type="xs:string" required="false" default="" style="query" xmlns:xs="http://www.w3.org/2001/XMLSchema">
                          <doc xml:lang="en" title="search Parameter">Regular expression of the search to be executed at the specified scope. Currently search is against sysml:id, sysml:name, sysml:documentation, sysml:body.</doc>
                        </param>
                        <param name="timestamp" type="xs:date" required="false" default="" style="query" xmlns:xs="http://www.w3.org/2001/XMLSchema">
                          <doc xml:lang="en" title="timestamp Parameter">Timestamp to find most recent version of comments, specified in ISO8601 time format.</doc>
                        </param>
                      </request>
                      <response status="200">
                        <representation mediaType="application/json"/>
                      </response>
                      <response status="400">
                        <representation mediaType=""/>
                      </response>
                      <response status="401">
                        <representation mediaType=""/>
                      </response>
                      <response status="404">
                        <representation mediaType=""/>
                      </response>
                      <response status="500">
                        <representation mediaType=""/>
                      </response>
                    </method>
                  </resource>
                  <method name="POST" id="post">
                    <doc xml:lang="en" title="post">Append operation for comments</doc>
                    <request>
                      <param name="recurse" type="xs:boolean" required="false" default="" style="query" xmlns:xs="http://www.w3.org/2001/XMLSchema">
                        <doc xml:lang="en" title="recurse Parameter">If true, finds all elements recursively based on containment hierarchy</doc>
                      </param>
                      <param name="recurseDepth" type="xs:integer" required="false" default="" style="query" xmlns:xs="http://www.w3.org/2001/XMLSchema">
                        <doc xml:lang="en" title="recurseDepth Parameter">Depth to recurse to. 0 specifies infinite recursion (e.g., until all leaf nodes are found).</doc>
                      </param>
                      <param name="search" type="xs:string" required="false" default="" style="query" xmlns:xs="http://www.w3.org/2001/XMLSchema">
                        <doc xml:lang="en" title="search Parameter">Regular expression of the search to be executed at the specified scope. Currently search is against sysml:id, sysml:name, sysml:documentation, sysml:body.</doc>
                      </param>
                      <param name="timestamp" type="xs:date" required="false" default="" style="query" xmlns:xs="http://www.w3.org/2001/XMLSchema">
                        <doc xml:lang="en" title="timestamp Parameter">Timestamp to find most recent version of comments, specified in ISO8601 time format.</doc>
                      </param>
                      <representation mediaType="application/json"/>
                    </request>
                    <response status="">
                      <representation mediaType="application/json"/>
                    </response>
                    <response status="200">
                      <representation mediaType="application/json"/>
                    </response>
                    <response status="202">
                      <representation mediaType=""/>
                    </response>
                    <response status="401">
                      <representation mediaType=""/>
                    </response>
                    <response status="404">
                      <representation mediaType=""/>
                    </response>
                    <response status="409">
                      <representation mediaType=""/>
                    </response>
                    <response status="500">
                      <representation mediaType=""/>
                    </response>
                  </method>
                  <method name="PUT" id="put">
                    <doc xml:lang="en" title="put">Create/update operation for comments</doc>
                    <request>
                      <param name="recurse" type="xs:boolean" required="false" default="" style="query" xmlns:xs="http://www.w3.org/2001/XMLSchema">
                        <doc xml:lang="en" title="recurse Parameter">If true, finds all elements recursively based on containment hierarchy</doc>
                      </param>
                      <param name="recurseDepth" type="xs:integer" required="false" default="" style="query" xmlns:xs="http://www.w3.org/2001/XMLSchema">
                        <doc xml:lang="en" title="recurseDepth Parameter">Depth to recurse to. 0 specifies infinite recursion (e.g., until all leaf nodes are found).</doc>
                      </param>
                      <param name="search" type="xs:string" required="false" default="" style="query" xmlns:xs="http://www.w3.org/2001/XMLSchema">
                        <doc xml:lang="en" title="search Parameter">Regular expression of the search to be executed at the specified scope. Currently search is against sysml:id, sysml:name, sysml:documentation, sysml:body.</doc>
                      </param>
                      <param name="timestamp" type="xs:date" required="false" default="" style="query" xmlns:xs="http://www.w3.org/2001/XMLSchema">
                        <doc xml:lang="en" title="timestamp Parameter">Timestamp to find most recent version of comments, specified in ISO8601 time format.</doc>
                      </param>
                      <representation mediaType="application/json"/>
                    </request>
                    <response status="">
                      <representation mediaType="application/json"/>
                    </response>
                    <response status="200">
                      <representation mediaType="application/json"/>
                    </response>
                    <response status="201">
                      <representation mediaType=""/>
                    </response>
                    <response status="202">
                      <representation mediaType=""/>
                    </response>
                    <response status="401">
                      <representation mediaType=""/>
                    </response>
                    <response status="404">
                      <representation mediaType=""/>
                    </response>
                    <response status="409">
                      <representation mediaType=""/>
                    </response>
                    <response status="500">
                      <representation mediaType=""/>
                    </response>
                  </method>
                  <method name="DELETE" id="delete">
                    <doc xml:lang="en" title="delete">Delete operation for comments</doc>
                    <request>
                      <param name="recurse" type="xs:boolean" required="false" default="" style="query" xmlns:xs="http://www.w3.org/2001/XMLSchema">
                        <doc xml:lang="en" title="recurse Parameter">If true, finds all elements recursively based on containment hierarchy</doc>
                      </param>
                      <param name="recurseDepth" type="xs:integer" required="false" default="" style="query" xmlns:xs="http://www.w3.org/2001/XMLSchema">
                        <doc xml:lang="en" title="recurseDepth Parameter">Depth to recurse to. 0 specifies infinite recursion (e.g., until all leaf nodes are found).</doc>
                      </param>
                      <param name="search" type="xs:string" required="false" default="" style="query" xmlns:xs="http://www.w3.org/2001/XMLSchema">
                        <doc xml:lang="en" title="search Parameter">Regular expression of the search to be executed at the specified scope. Currently search is against sysml:id, sysml:name, sysml:documentation, sysml:body.</doc>
                      </param>
                      <param name="timestamp" type="xs:date" required="false" default="" style="query" xmlns:xs="http://www.w3.org/2001/XMLSchema">
                        <doc xml:lang="en" title="timestamp Parameter">Timestamp to find most recent version of comments, specified in ISO8601 time format.</doc>
                      </param>
                    </request>
                    <response status="200">
                      <representation mediaType="application/json"/>
                    </response>
                    <response status="202">
                      <representation mediaType=""/>
                    </response>
                    <response status="401">
                      <representation mediaType=""/>
                    </response>
                    <response status="404">
                      <representation mediaType=""/>
                    </response>
                    <response status="500">
                      <representation mediaType=""/>
                    </response>
                  </method>
                  <method name="GET" id="get">
                    <doc xml:lang="en" title="get">Read operation for comments</doc>
                    <request>
                      <param name="recurse" type="xs:boolean" required="false" default="" style="query" xmlns:xs="http://www.w3.org/2001/XMLSchema">
                        <doc xml:lang="en" title="recurse Parameter">If true, finds all elements recursively based on containment hierarchy</doc>
                      </param>
                      <param name="recurseDepth" type="xs:integer" required="false" default="" style="query" xmlns:xs="http://www.w3.org/2001/XMLSchema">
                        <doc xml:lang="en" title="recurseDepth Parameter">Depth to recurse to. 0 specifies infinite recursion (e.g., until all leaf nodes are found).</doc>
                      </param>
                      <param name="search" type="xs:string" required="false" default="" style="query" xmlns:xs="http://www.w3.org/2001/XMLSchema">
                        <doc xml:lang="en" title="search Parameter">Regular expression of the search to be executed at the specified scope. Currently search is against sysml:id, sysml:name, sysml:documentation, sysml:body.</doc>
                      </param>
                      <param name="timestamp" type="xs:date" required="false" default="" style="query" xmlns:xs="http://www.w3.org/2001/XMLSchema">
                        <doc xml:lang="en" title="timestamp Parameter">Timestamp to find most recent version of comments, specified in ISO8601 time format.</doc>
                      </param>
                    </request>
                    <response status="200">
                      <representation mediaType="application/json"/>
                    </response>
                    <response status="400">
                      <representation mediaType=""/>
                    </response>
                    <response status="401">
                      <representation mediaType=""/>
                    </response>
                    <response status="404">
                      <representation mediaType=""/>
                    </response>
                    <response status="500">
                      <representation mediaType=""/>
                    </response>
                  </method>
                </resource>
                <method name="POST" id="post">
                  <doc xml:lang="en" title="post">Append operation for elements</doc>
                  <request>
                    <param name="recurse" type="xs:boolean" required="false" default="" style="query" xmlns:xs="http://www.w3.org/2001/XMLSchema">
                      <doc xml:lang="en" title="recurse Parameter">If true, finds all elements recursively based on containment hierarchy</doc>
                    </param>
                    <param name="recurseDepth" type="xs:integer" required="false" default="" style="query" xmlns:xs="http://www.w3.org/2001/XMLSchema">
                      <doc xml:lang="en" title="recurseDepth Parameter">Depth to recurse to. 0 specifies infinite recursion (e.g., until all leaf nodes are found).</doc>
                    </param>
                    <param name="search" type="xs:string" required="false" default="" style="query" xmlns:xs="http://www.w3.org/2001/XMLSchema">
                      <doc xml:lang="en" title="search Parameter">Regular expression of the search to be executed at the specified scope. Currently search is against sysml:id, sysml:name, sysml:documentation, sysml:body.</doc>
                    </param>
                    <param name="timestamp" type="xs:date" required="false" default="" style="query" xmlns:xs="http://www.w3.org/2001/XMLSchema">
                      <doc xml:lang="en" title="timestamp Parameter">Timestamp to find most recent version of elements, specified in ISO8601 time format.</doc>
                    </param>
                    <representation mediaType="application/json"/>
                  </request>
                  <response status="">
                    <representation mediaType="application/json"/>
                  </response>
                  <response status="200">
                    <representation mediaType="application/json"/>
                  </response>
                  <response status="202">
                    <representation mediaType=""/>
                  </response>
                  <response status="401">
                    <representation mediaType=""/>
                  </response>
                  <response status="404">
                    <representation mediaType=""/>
                  </response>
                  <response status="409">
                    <representation mediaType=""/>
                  </response>
                  <response status="500">
                    <representation mediaType=""/>
                  </response>
                </method>
                <method name="PUT" id="put">
                  <doc xml:lang="en" title="put">Create/update operation for elements</doc>
                  <request>
                    <param name="recurse" type="xs:boolean" required="false" default="" style="query" xmlns:xs="http://www.w3.org/2001/XMLSchema">
                      <doc xml:lang="en" title="recurse Parameter">If true, finds all elements recursively based on containment hierarchy</doc>
                    </param>
                    <param name="recurseDepth" type="xs:integer" required="false" default="" style="query" xmlns:xs="http://www.w3.org/2001/XMLSchema">
                      <doc xml:lang="en" title="recurseDepth Parameter">Depth to recurse to. 0 specifies infinite recursion (e.g., until all leaf nodes are found).</doc>
                    </param>
                    <param name="search" type="xs:string" required="false" default="" style="query" xmlns:xs="http://www.w3.org/2001/XMLSchema">
                      <doc xml:lang="en" title="search Parameter">Regular expression of the search to be executed at the specified scope. Currently search is against sysml:id, sysml:name, sysml:documentation, sysml:body.</doc>
                    </param>
                    <param name="timestamp" type="xs:date" required="false" default="" style="query" xmlns:xs="http://www.w3.org/2001/XMLSchema">
                      <doc xml:lang="en" title="timestamp Parameter">Timestamp to find most recent version of elements, specified in ISO8601 time format.</doc>
                    </param>
                    <representation mediaType="application/json"/>
                  </request>
                  <response status="">
                    <representation mediaType="application/json"/>
                  </response>
                  <response status="200">
                    <representation mediaType="application/json"/>
                  </response>
                  <response status="201">
                    <representation mediaType=""/>
                  </response>
                  <response status="202">
                    <representation mediaType=""/>
                  </response>
                  <response status="401">
                    <representation mediaType=""/>
                  </response>
                  <response status="404">
                    <representation mediaType=""/>
                  </response>
                  <response status="409">
                    <representation mediaType=""/>
                  </response>
                  <response status="500">
                    <representation mediaType=""/>
                  </response>
                </method>
                <method name="DELETE" id="delete">
                  <doc xml:lang="en" title="delete">Delete operation for elements</doc>
                  <request>
                    <param name="recurse" type="xs:boolean" required="false" default="" style="query" xmlns:xs="http://www.w3.org/2001/XMLSchema">
                      <doc xml:lang="en" title="recurse Parameter">If true, finds all elements recursively based on containment hierarchy</doc>
                    </param>
                    <param name="recurseDepth" type="xs:integer" required="false" default="" style="query" xmlns:xs="http://www.w3.org/2001/XMLSchema">
                      <doc xml:lang="en" title="recurseDepth Parameter">Depth to recurse to. 0 specifies infinite recursion (e.g., until all leaf nodes are found).</doc>
                    </param>
                    <param name="search" type="xs:string" required="false" default="" style="query" xmlns:xs="http://www.w3.org/2001/XMLSchema">
                      <doc xml:lang="en" title="search Parameter">Regular expression of the search to be executed at the specified scope. Currently search is against sysml:id, sysml:name, sysml:documentation, sysml:body.</doc>
                    </param>
                    <param name="timestamp" type="xs:date" required="false" default="" style="query" xmlns:xs="http://www.w3.org/2001/XMLSchema">
                      <doc xml:lang="en" title="timestamp Parameter">Timestamp to find most recent version of elements, specified in ISO8601 time format.</doc>
                    </param>
                  </request>
                  <response status="200">
                    <representation mediaType="application/json"/>
                  </response>
                  <response status="202">
                    <representation mediaType=""/>
                  </response>
                  <response status="401">
                    <representation mediaType=""/>
                  </response>
                  <response status="404">
                    <representation mediaType=""/>
                  </response>
                  <response status="500">
                    <representation mediaType=""/>
                  </response>
                </method>
                <method name="GET" id="get">
                  <doc xml:lang="en" title="get">Read operation for elements</doc>
                  <request>
                    <param name="recurse" type="xs:boolean" required="false" default="" style="query" xmlns:xs="http://www.w3.org/2001/XMLSchema">
                      <doc xml:lang="en" title="recurse Parameter">If true, finds all elements recursively based on containment hierarchy</doc>
                    </param>
                    <param name="recurseDepth" type="xs:integer" required="false" default="" style="query" xmlns:xs="http://www.w3.org/2001/XMLSchema">
                      <doc xml:lang="en" title="recurseDepth Parameter">Depth to recurse to. 0 specifies infinite recursion (e.g., until all leaf nodes are found).</doc>
                    </param>
                    <param name="search" type="xs:string" required="false" default="" style="query" xmlns:xs="http://www.w3.org/2001/XMLSchema">
                      <doc xml:lang="en" title="search Parameter">Regular expression of the search to be executed at the specified scope. Currently search is against sysml:id, sysml:name, sysml:documentation, sysml:body.</doc>
                    </param>
                    <param name="timestamp" type="xs:date" required="false" default="" style="query" xmlns:xs="http://www.w3.org/2001/XMLSchema">
                      <doc xml:lang="en" title="timestamp Parameter">Timestamp to find most recent version of elements, specified in ISO8601 time format.</doc>
                    </param>
                  </request>
                  <response status="200">
                    <representation mediaType="application/json"/>
                  </response>
                  <response status="400">
                    <representation mediaType=""/>
                  </response>
                  <response status="401">
                    <representation mediaType=""/>
                  </response>
                  <response status="404">
                    <representation mediaType=""/>
                  </response>
                  <response status="500">
                    <representation mediaType=""/>
                  </response>
                </method>
              </resource>
              <method name="POST" id="post">
                <doc xml:lang="en" title="post">Append operation for elements</doc>
                <request>
                  <param name="recurse" type="xs:boolean" required="false" default="" style="query" xmlns:xs="http://www.w3.org/2001/XMLSchema">
                    <doc xml:lang="en" title="recurse Parameter">If true, finds all elements recursively based on containment hierarchy</doc>
                  </param>
                  <param name="recurseDepth" type="xs:integer" required="false" default="" style="query" xmlns:xs="http://www.w3.org/2001/XMLSchema">
                    <doc xml:lang="en" title="recurseDepth Parameter">Depth to recurse to. 0 specifies infinite recursion (e.g., until all leaf nodes are found).</doc>
                  </param>
                  <param name="search" type="xs:string" required="false" default="" style="query" xmlns:xs="http://www.w3.org/2001/XMLSchema">
                    <doc xml:lang="en" title="search Parameter">Regular expression of the search to be executed at the specified scope. Currently search is against sysml:id, sysml:name, sysml:documentation, sysml:body.</doc>
                  </param>
                  <param name="timestamp" type="xs:date" required="false" default="" style="query" xmlns:xs="http://www.w3.org/2001/XMLSchema">
                    <doc xml:lang="en" title="timestamp Parameter">Timestamp to find most recent version of elements, specified in ISO8601 time format.</doc>
                  </param>
                  <representation mediaType="application/json"/>
                </request>
                <response status="">
                  <representation mediaType="application/json"/>
                </response>
                <response status="200">
                  <representation mediaType="application/json"/>
                </response>
                <response status="202">
                  <representation mediaType=""/>
                </response>
                <response status="401">
                  <representation mediaType=""/>
                </response>
                <response status="404">
                  <representation mediaType=""/>
                </response>
                <response status="409">
                  <representation mediaType=""/>
                </response>
                <response status="500">
                  <representation mediaType=""/>
                </response>
              </method>
              <method name="PUT" id="put">
                <doc xml:lang="en" title="put">Create/update operation for elements</doc>
                <request>
                  <param name="recurse" type="xs:boolean" required="false" default="" style="query" xmlns:xs="http://www.w3.org/2001/XMLSchema">
                    <doc xml:lang="en" title="recurse Parameter">If true, finds all elements recursively based on containment hierarchy</doc>
                  </param>
                  <param name="recurseDepth" type="xs:integer" required="false" default="" style="query" xmlns:xs="http://www.w3.org/2001/XMLSchema">
                    <doc xml:lang="en" title="recurseDepth Parameter">Depth to recurse to. 0 specifies infinite recursion (e.g., until all leaf nodes are found).</doc>
                  </param>
                  <param name="search" type="xs:string" required="false" default="" style="query" xmlns:xs="http://www.w3.org/2001/XMLSchema">
                    <doc xml:lang="en" title="search Parameter">Regular expression of the search to be executed at the specified scope. Currently search is against sysml:id, sysml:name, sysml:documentation, sysml:body.</doc>
                  </param>
                  <param name="timestamp" type="xs:date" required="false" default="" style="query" xmlns:xs="http://www.w3.org/2001/XMLSchema">
                    <doc xml:lang="en" title="timestamp Parameter">Timestamp to find most recent version of elements, specified in ISO8601 time format.</doc>
                  </param>
                  <representation mediaType="application/json"/>
                </request>
                <response status="">
                  <representation mediaType="application/json"/>
                </response>
                <response status="200">
                  <representation mediaType="application/json"/>
                </response>
                <response status="201">
                  <representation mediaType=""/>
                </response>
                <response status="202">
                  <representation mediaType=""/>
                </response>
                <response status="401">
                  <representation mediaType=""/>
                </response>
                <response status="404">
                  <representation mediaType=""/>
                </response>
                <response status="409">
                  <representation mediaType=""/>
                </response>
                <response status="500">
                  <representation mediaType=""/>
                </response>
              </method>
              <method name="DELETE" id="delete">
                <doc xml:lang="en" title="delete">Delete operation for elements</doc>
                <request>
                  <param name="recurse" type="xs:boolean" required="false" default="" style="query" xmlns:xs="http://www.w3.org/2001/XMLSchema">
                    <doc xml:lang="en" title="recurse Parameter">If true, finds all elements recursively based on containment hierarchy</doc>
                  </param>
                  <param name="recurseDepth" type="xs:integer" required="false" default="" style="query" xmlns:xs="http://www.w3.org/2001/XMLSchema">
                    <doc xml:lang="en" title="recurseDepth Parameter">Depth to recurse to. 0 specifies infinite recursion (e.g., until all leaf nodes are found).</doc>
                  </param>
                  <param name="search" type="xs:string" required="false" default="" style="query" xmlns:xs="http://www.w3.org/2001/XMLSchema">
                    <doc xml:lang="en" title="search Parameter">Regular expression of the search to be executed at the specified scope. Currently search is against sysml:id, sysml:name, sysml:documentation, sysml:body.</doc>
                  </param>
                  <param name="timestamp" type="xs:date" required="false" default="" style="query" xmlns:xs="http://www.w3.org/2001/XMLSchema">
                    <doc xml:lang="en" title="timestamp Parameter">Timestamp to find most recent version of elements, specified in ISO8601 time format.</doc>
                  </param>
                </request>
                <response status="200">
                  <representation mediaType="application/json"/>
                </response>
                <response status="202">
                  <representation mediaType=""/>
                </response>
                <response status="401">
                  <representation mediaType=""/>
                </response>
                <response status="404">
                  <representation mediaType=""/>
                </response>
                <response status="500">
                  <representation mediaType=""/>
                </response>
              </method>
              <method name="GET" id="get">
                <doc xml:lang="en" title="get">Read operation for elements</doc>
                <request>
                  <param name="recurse" type="xs:boolean" required="false" default="" style="query" xmlns:xs="http://www.w3.org/2001/XMLSchema">
                    <doc xml:lang="en" title="recurse Parameter">If true, finds all elements recursively based on containment hierarchy</doc>
                  </param>
                  <param name="recurseDepth" type="xs:integer" required="false" default="" style="query" xmlns:xs="http://www.w3.org/2001/XMLSchema">
                    <doc xml:lang="en" title="recurseDepth Parameter">Depth to recurse to. 0 specifies infinite recursion (e.g., until all leaf nodes are found).</doc>
                  </param>
                  <param name="search" type="xs:string" required="false" default="" style="query" xmlns:xs="http://www.w3.org/2001/XMLSchema">
                    <doc xml:lang="en" title="search Parameter">Regular expression of the search to be executed at the specified scope. Currently search is against sysml:id, sysml:name, sysml:documentation, sysml:body.</doc>
                  </param>
                  <param name="timestamp" type="xs:date" required="false" default="" style="query" xmlns:xs="http://www.w3.org/2001/XMLSchema">
                    <doc xml:lang="en" title="timestamp Parameter">Timestamp to find most recent version of elements, specified in ISO8601 time format.</doc>
                  </param>
                </request>
                <response status="200">
                  <representation mediaType="application/json"/>
                </response>
                <response status="400">
                  <representation mediaType=""/>
                </response>
                <response status="401">
                  <representation mediaType=""/>
                </response>
                <response status="404">
                  <representation mediaType=""/>
                </response>
                <response status="500">
                  <representation mediaType=""/>
                </response>
              </method>
            </resource>
            <method name="POST" id="post">
              <doc xml:lang="en" title="post">Append operation for views</doc>
              <request>
                <param name="recurse" type="xs:boolean" required="false" default="" style="query" xmlns:xs="http://www.w3.org/2001/XMLSchema">
                  <doc xml:lang="en" title="recurse Parameter">If true, finds all elements recursively based on containment hierarchy</doc>
                </param>
                <param name="recurseDepth" type="xs:integer" required="false" default="" style="query" xmlns:xs="http://www.w3.org/2001/XMLSchema">
                  <doc xml:lang="en" title="recurseDepth Parameter">Depth to recurse to. 0 specifies infinite recursion (e.g., until all leaf nodes are found).</doc>
                </param>
                <param name="search" type="xs:string" required="false" default="" style="query" xmlns:xs="http://www.w3.org/2001/XMLSchema">
                  <doc xml:lang="en" title="search Parameter">Regular expression of the search to be executed at the specified scope. Currently search is against sysml:id, sysml:name, sysml:documentation, sysml:body.</doc>
                </param>
                <param name="timestamp" type="xs:date" required="false" default="" style="query" xmlns:xs="http://www.w3.org/2001/XMLSchema">
                  <doc xml:lang="en" title="timestamp Parameter">Timestamp to find most recent version of views, specified in ISO8601 time format.</doc>
                </param>
                <representation mediaType="application/json"/>
              </request>
              <response status="">
                <representation mediaType="application/json"/>
              </response>
              <response status="200">
                <representation mediaType="application/json"/>
              </response>
              <response status="202">
                <representation mediaType=""/>
              </response>
              <response status="401">
                <representation mediaType=""/>
              </response>
              <response status="404">
                <representation mediaType=""/>
              </response>
              <response status="409">
                <representation mediaType=""/>
              </response>
              <response status="500">
                <representation mediaType=""/>
              </response>
            </method>
            <method name="PUT" id="put">
              <doc xml:lang="en" title="put">Create/update operation for views</doc>
              <request>
                <param name="recurse" type="xs:boolean" required="false" default="" style="query" xmlns:xs="http://www.w3.org/2001/XMLSchema">
                  <doc xml:lang="en" title="recurse Parameter">If true, finds all elements recursively based on containment hierarchy</doc>
                </param>
                <param name="recurseDepth" type="xs:integer" required="false" default="" style="query" xmlns:xs="http://www.w3.org/2001/XMLSchema">
                  <doc xml:lang="en" title="recurseDepth Parameter">Depth to recurse to. 0 specifies infinite recursion (e.g., until all leaf nodes are found).</doc>
                </param>
                <param name="search" type="xs:string" required="false" default="" style="query" xmlns:xs="http://www.w3.org/2001/XMLSchema">
                  <doc xml:lang="en" title="search Parameter">Regular expression of the search to be executed at the specified scope. Currently search is against sysml:id, sysml:name, sysml:documentation, sysml:body.</doc>
                </param>
                <param name="timestamp" type="xs:date" required="false" default="" style="query" xmlns:xs="http://www.w3.org/2001/XMLSchema">
                  <doc xml:lang="en" title="timestamp Parameter">Timestamp to find most recent version of views, specified in ISO8601 time format.</doc>
                </param>
                <representation mediaType="application/json"/>
              </request>
              <response status="">
                <representation mediaType="application/json"/>
              </response>
              <response status="200">
                <representation mediaType="application/json"/>
              </response>
              <response status="201">
                <representation mediaType=""/>
              </response>
              <response status="202">
                <representation mediaType=""/>
              </response>
              <response status="401">
                <representation mediaType=""/>
              </response>
              <response status="404">
                <representation mediaType=""/>
              </response>
              <response status="409">
                <representation mediaType=""/>
              </response>
              <response status="500">
                <representation mediaType=""/>
              </response>
            </method>
            <method name="DELETE" id="delete">
              <doc xml:lang="en" title="delete">Delete operation for views</doc>
              <request>
                <param name="recurse" type="xs:boolean" required="false" default="" style="query" xmlns:xs="http://www.w3.org/2001/XMLSchema">
                  <doc xml:lang="en" title="recurse Parameter">If true, finds all elements recursively based on containment hierarchy</doc>
                </param>
                <param name="recurseDepth" type="xs:integer" required="false" default="" style="query" xmlns:xs="http://www.w3.org/2001/XMLSchema">
                  <doc xml:lang="en" title="recurseDepth Parameter">Depth to recurse to. 0 specifies infinite recursion (e.g., until all leaf nodes are found).</doc>
                </param>
                <param name="search" type="xs:string" required="false" default="" style="query" xmlns:xs="http://www.w3.org/2001/XMLSchema">
                  <doc xml:lang="en" title="search Parameter">Regular expression of the search to be executed at the specified scope. Currently search is against sysml:id, sysml:name, sysml:documentation, sysml:body.</doc>
                </param>
                <param name="timestamp" type="xs:date" required="false" default="" style="query" xmlns:xs="http://www.w3.org/2001/XMLSchema">
                  <doc xml:lang="en" title="timestamp Parameter">Timestamp to find most recent version of views, specified in ISO8601 time format.</doc>
                </param>
              </request>
              <response status="200">
                <representation mediaType="application/json"/>
              </response>
              <response status="202">
                <representation mediaType=""/>
              </response>
              <response status="401">
                <representation mediaType=""/>
              </response>
              <response status="404">
                <representation mediaType=""/>
              </response>
              <response status="500">
                <representation mediaType=""/>
              </response>
            </method>
            <method name="GET" id="get">
              <doc xml:lang="en" title="get">Read operation for views</doc>
              <request>
                <param name="recurse" type="xs:boolean" required="false" default="" style="query" xmlns:xs="http://www.w3.org/2001/XMLSchema">
                  <doc xml:lang="en" title="recurse Parameter">If true, finds all elements recursively based on containment hierarchy</doc>
                </param>
                <param name="recurseDepth" type="xs:integer" required="false" default="" style="query" xmlns:xs="http://www.w3.org/2001/XMLSchema">
                  <doc xml:lang="en" title="recurseDepth Parameter">Depth to recurse to. 0 specifies infinite recursion (e.g., until all leaf nodes are found).</doc>
                </param>
                <param name="search" type="xs:string" required="false" default="" style="query" xmlns:xs="http://www.w3.org/2001/XMLSchema">
                  <doc xml:lang="en" title="search Parameter">Regular expression of the search to be executed at the specified scope. Currently search is against sysml:id, sysml:name, sysml:documentation, sysml:body.</doc>
                </param>
                <param name="timestamp" type="xs:date" required="false" default="" style="query" xmlns:xs="http://www.w3.org/2001/XMLSchema">
                  <doc xml:lang="en" title="timestamp Parameter">Timestamp to find most recent version of views, specified in ISO8601 time format.</doc>
                </param>
              </request>
              <response status="200">
                <representation mediaType="application/json"/>
              </response>
              <response status="400">
                <representation mediaType=""/>
              </response>
              <response status="401">
                <representation mediaType=""/>
              </response>
              <response status="404">
                <representation mediaType=""/>
              </response>
              <response status="500">
                <representation mediaType=""/>
              </response>
            </method>
          </resource>
          <method name="POST" id="post">
            <doc xml:lang="en" title="post">Append operation for views</doc>
            <request>
              <param name="recurse" type="xs:boolean" required="false" default="" style="query" xmlns:xs="http://www.w3.org/2001/XMLSchema">
                <doc xml:lang="en" title="recurse Parameter">If true, finds all elements recursively based on containment hierarchy</doc>
              </param>
              <param name="recurseDepth" type="xs:integer" required="false" default="" style="query" xmlns:xs="http://www.w3.org/2001/XMLSchema">
                <doc xml:lang="en" title="recurseDepth Parameter">Depth to recurse to. 0 specifies infinite recursion (e.g., until all leaf nodes are found).</doc>
              </param>
              <param name="search" type="xs:string" required="false" default="" style="query" xmlns:xs="http://www.w3.org/2001/XMLSchema">
                <doc xml:lang="en" title="search Parameter">Regular expression of the search to be executed at the specified scope. Currently search is against sysml:id, sysml:name, sysml:documentation, sysml:body.</doc>
              </param>
              <param name="timestamp" type="xs:date" required="false" default="" style="query" xmlns:xs="http://www.w3.org/2001/XMLSchema">
                <doc xml:lang="en" title="timestamp Parameter">Timestamp to find most recent version of views, specified in ISO8601 time format.</doc>
              </param>
              <representation mediaType="application/json"/>
            </request>
            <response status="">
              <representation mediaType="application/json"/>
            </response>
            <response status="200">
              <representation mediaType="application/json"/>
            </response>
            <response status="202">
              <representation mediaType=""/>
            </response>
            <response status="401">
              <representation mediaType=""/>
            </response>
            <response status="404">
              <representation mediaType=""/>
            </response>
            <response status="409">
              <representation mediaType=""/>
            </response>
            <response status="500">
              <representation mediaType=""/>
            </response>
          </method>
          <method name="PUT" id="put">
            <doc xml:lang="en" title="put">Create/update operation for views</doc>
            <request>
              <param name="recurse" type="xs:boolean" required="false" default="" style="query" xmlns:xs="http://www.w3.org/2001/XMLSchema">
                <doc xml:lang="en" title="recurse Parameter">If true, finds all elements recursively based on containment hierarchy</doc>
              </param>
              <param name="recurseDepth" type="xs:integer" required="false" default="" style="query" xmlns:xs="http://www.w3.org/2001/XMLSchema">
                <doc xml:lang="en" title="recurseDepth Parameter">Depth to recurse to. 0 specifies infinite recursion (e.g., until all leaf nodes are found).</doc>
              </param>
              <param name="search" type="xs:string" required="false" default="" style="query" xmlns:xs="http://www.w3.org/2001/XMLSchema">
                <doc xml:lang="en" title="search Parameter">Regular expression of the search to be executed at the specified scope. Currently search is against sysml:id, sysml:name, sysml:documentation, sysml:body.</doc>
              </param>
              <param name="timestamp" type="xs:date" required="false" default="" style="query" xmlns:xs="http://www.w3.org/2001/XMLSchema">
                <doc xml:lang="en" title="timestamp Parameter">Timestamp to find most recent version of views, specified in ISO8601 time format.</doc>
              </param>
              <representation mediaType="application/json"/>
            </request>
            <response status="">
              <representation mediaType="application/json"/>
            </response>
            <response status="200">
              <representation mediaType="application/json"/>
            </response>
            <response status="201">
              <representation mediaType=""/>
            </response>
            <response status="202">
              <representation mediaType=""/>
            </response>
            <response status="401">
              <representation mediaType=""/>
            </response>
            <response status="404">
              <representation mediaType=""/>
            </response>
            <response status="409">
              <representation mediaType=""/>
            </response>
            <response status="500">
              <representation mediaType=""/>
            </response>
          </method>
          <method name="DELETE" id="delete">
            <doc xml:lang="en" title="delete">Delete operation for views</doc>
            <request>
              <param name="recurse" type="xs:boolean" required="false" default="" style="query" xmlns:xs="http://www.w3.org/2001/XMLSchema">
                <doc xml:lang="en" title="recurse Parameter">If true, finds all elements recursively based on containment hierarchy</doc>
              </param>
              <param name="recurseDepth" type="xs:integer" required="false" default="" style="query" xmlns:xs="http://www.w3.org/2001/XMLSchema">
                <doc xml:lang="en" title="recurseDepth Parameter">Depth to recurse to. 0 specifies infinite recursion (e.g., until all leaf nodes are found).</doc>
              </param>
              <param name="search" type="xs:string" required="false" default="" style="query" xmlns:xs="http://www.w3.org/2001/XMLSchema">
                <doc xml:lang="en" title="search Parameter">Regular expression of the search to be executed at the specified scope. Currently search is against sysml:id, sysml:name, sysml:documentation, sysml:body.</doc>
              </param>
              <param name="timestamp" type="xs:date" required="false" default="" style="query" xmlns:xs="http://www.w3.org/2001/XMLSchema">
                <doc xml:lang="en" title="timestamp Parameter">Timestamp to find most recent version of views, specified in ISO8601 time format.</doc>
              </param>
            </request>
            <response status="200">
              <representation mediaType="application/json"/>
            </response>
            <response status="202">
              <representation mediaType=""/>
            </response>
            <response status="401">
              <representation mediaType=""/>
            </response>
            <response status="404">
              <representation mediaType=""/>
            </response>
            <response status="500">
              <representation mediaType=""/>
            </response>
          </method>
          <method name="GET" id="get">
            <doc xml:lang="en" title="get">Read operation for views</doc>
            <request>
              <param name="recurse" type="xs:boolean" required="false" default="" style="query" xmlns:xs="http://www.w3.org/2001/XMLSchema">
                <doc xml:lang="en" title="recurse Parameter">If true, finds all elements recursively based on containment hierarchy</doc>
              </param>
              <param name="recurseDepth" type="xs:integer" required="false" default="" style="query" xmlns:xs="http://www.w3.org/2001/XMLSchema">
                <doc xml:lang="en" title="recurseDepth Parameter">Depth to recurse to. 0 specifies infinite recursion (e.g., until all leaf nodes are found).</doc>
              </param>
              <param name="search" type="xs:string" required="false" default="" style="query" xmlns:xs="http://www.w3.org/2001/XMLSchema">
                <doc xml:lang="en" title="search Parameter">Regular expression of the search to be executed at the specified scope. Currently search is against sysml:id, sysml:name, sysml:documentation, sysml:body.</doc>
              </param>
              <param name="timestamp" type="xs:date" required="false" default="" style="query" xmlns:xs="http://www.w3.org/2001/XMLSchema">
                <doc xml:lang="en" title="timestamp Parameter">Timestamp to find most recent version of views, specified in ISO8601 time format.</doc>
              </param>
            </request>
            <response status="200">
              <representation mediaType="application/json"/>
            </response>
            <response status="400">
              <representation mediaType=""/>
            </response>
            <response status="401">
              <representation mediaType=""/>
            </response>
            <response status="404">
              <representation mediaType=""/>
            </response>
            <response status="500">
              <representation mediaType=""/>
            </response>
          </method>
        </resource>
        <resource path="configurations" id="/configurations">
          <doc xml:lang="en" title="/configurations">Create, Update, and Delete operations for configurations</doc>
          <param name="workspaceId" type="xs:string" required="true" default="" style="template" xmlns:xs="http://www.w3.org/2001/XMLSchema"/>
          <resource path="{configurationId}" id="/{configurationId}">
            <doc xml:lang="en" title="/{configurationId}">Create, Update, and Delete operations for configurations</doc>
            <param name="workspaceId" type="xs:string" required="true" default="" style="template" xmlns:xs="http://www.w3.org/2001/XMLSchema"/>
            <param name="configurationId" type="xs:string" required="true" default="" style="template" xmlns:xs="http://www.w3.org/2001/XMLSchema">
              <doc xml:lang="en" title="configurationId Parameter">ID for the configuration under consideration</doc>
            </param>
            <resource path="snapshots" id="/snapshots">
              <doc xml:lang="en" title="/snapshots">Scoped under /configurations and /products</doc>
              <param name="workspaceId" type="xs:string" required="true" default="" style="template" xmlns:xs="http://www.w3.org/2001/XMLSchema"/>
              <param name="configurationId" type="xs:string" required="true" default="" style="template" xmlns:xs="http://www.w3.org/2001/XMLSchema"/>
              <resource path="{snapshotId}" id="/{snapshotId}">
                <doc xml:lang="en" title="/{snapshotId}">Create, Update, and Delete operations for snapshots</doc>
                <param name="workspaceId" type="xs:string" required="true" default="" style="template" xmlns:xs="http://www.w3.org/2001/XMLSchema"/>
                <param name="configurationId" type="xs:string" required="true" default="" style="template" xmlns:xs="http://www.w3.org/2001/XMLSchema"/>
                <param name="snapshotId" type="xs:string" required="true" default="" style="template" xmlns:xs="http://www.w3.org/2001/XMLSchema">
                  <doc xml:lang="en" title="snapshotId Parameter">ID for the snapshot under consideration</doc>
                </param>
                <method name="POST" id="post">
                  <doc xml:lang="en" title="post">Append operation for snapshots</doc>
                  <request>
                    <param name="recurse" type="xs:boolean" required="false" default="" style="query" xmlns:xs="http://www.w3.org/2001/XMLSchema">
                      <doc xml:lang="en" title="recurse Parameter">If true, finds all elements recursively based on containment hierarchy</doc>
                    </param>
                    <param name="recurseDepth" type="xs:integer" required="false" default="" style="query" xmlns:xs="http://www.w3.org/2001/XMLSchema">
                      <doc xml:lang="en" title="recurseDepth Parameter">Depth to recurse to. 0 specifies infinite recursion (e.g., until all leaf nodes are found).</doc>
                    </param>
                    <param name="search" type="xs:string" required="false" default="" style="query" xmlns:xs="http://www.w3.org/2001/XMLSchema">
                      <doc xml:lang="en" title="search Parameter">Regular expression of the search to be executed at the specified scope. Currently search is against sysml:id, sysml:name, sysml:documentation, sysml:body.</doc>
                    </param>
                    <param name="timestamp" type="xs:date" required="false" default="" style="query" xmlns:xs="http://www.w3.org/2001/XMLSchema">
                      <doc xml:lang="en" title="timestamp Parameter">Timestamp to find most recent version of snapshots, specified in ISO8601 time format.</doc>
                    </param>
                    <representation mediaType="application/json"/>
                  </request>
                  <response status="">
                    <representation mediaType="application/json"/>
                  </response>
                  <response status="200">
                    <representation mediaType="application/json"/>
                  </response>
                  <response status="202">
                    <representation mediaType=""/>
                  </response>
                  <response status="401">
                    <representation mediaType=""/>
                  </response>
                  <response status="404">
                    <representation mediaType=""/>
                  </response>
                  <response status="409">
                    <representation mediaType=""/>
                  </response>
                  <response status="500">
                    <representation mediaType=""/>
                  </response>
                </method>
                <method name="PUT" id="put">
                  <doc xml:lang="en" title="put">Create/update operation for snapshots</doc>
                  <request>
                    <param name="recurse" type="xs:boolean" required="false" default="" style="query" xmlns:xs="http://www.w3.org/2001/XMLSchema">
                      <doc xml:lang="en" title="recurse Parameter">If true, finds all elements recursively based on containment hierarchy</doc>
                    </param>
                    <param name="recurseDepth" type="xs:integer" required="false" default="" style="query" xmlns:xs="http://www.w3.org/2001/XMLSchema">
                      <doc xml:lang="en" title="recurseDepth Parameter">Depth to recurse to. 0 specifies infinite recursion (e.g., until all leaf nodes are found).</doc>
                    </param>
                    <param name="search" type="xs:string" required="false" default="" style="query" xmlns:xs="http://www.w3.org/2001/XMLSchema">
                      <doc xml:lang="en" title="search Parameter">Regular expression of the search to be executed at the specified scope. Currently search is against sysml:id, sysml:name, sysml:documentation, sysml:body.</doc>
                    </param>
                    <param name="timestamp" type="xs:date" required="false" default="" style="query" xmlns:xs="http://www.w3.org/2001/XMLSchema">
                      <doc xml:lang="en" title="timestamp Parameter">Timestamp to find most recent version of snapshots, specified in ISO8601 time format.</doc>
                    </param>
                    <representation mediaType="application/json"/>
                  </request>
                  <response status="">
                    <representation mediaType="application/json"/>
                  </response>
                  <response status="200">
                    <representation mediaType="application/json"/>
                  </response>
                  <response status="201">
                    <representation mediaType=""/>
                  </response>
                  <response status="202">
                    <representation mediaType=""/>
                  </response>
                  <response status="401">
                    <representation mediaType=""/>
                  </response>
                  <response status="404">
                    <representation mediaType=""/>
                  </response>
                  <response status="409">
                    <representation mediaType=""/>
                  </response>
                  <response status="500">
                    <representation mediaType=""/>
                  </response>
                </method>
                <method name="DELETE" id="delete">
                  <doc xml:lang="en" title="delete">Delete operation for snapshots</doc>
                  <request>
                    <param name="recurse" type="xs:boolean" required="false" default="" style="query" xmlns:xs="http://www.w3.org/2001/XMLSchema">
                      <doc xml:lang="en" title="recurse Parameter">If true, finds all elements recursively based on containment hierarchy</doc>
                    </param>
                    <param name="recurseDepth" type="xs:integer" required="false" default="" style="query" xmlns:xs="http://www.w3.org/2001/XMLSchema">
                      <doc xml:lang="en" title="recurseDepth Parameter">Depth to recurse to. 0 specifies infinite recursion (e.g., until all leaf nodes are found).</doc>
                    </param>
                    <param name="search" type="xs:string" required="false" default="" style="query" xmlns:xs="http://www.w3.org/2001/XMLSchema">
                      <doc xml:lang="en" title="search Parameter">Regular expression of the search to be executed at the specified scope. Currently search is against sysml:id, sysml:name, sysml:documentation, sysml:body.</doc>
                    </param>
                    <param name="timestamp" type="xs:date" required="false" default="" style="query" xmlns:xs="http://www.w3.org/2001/XMLSchema">
                      <doc xml:lang="en" title="timestamp Parameter">Timestamp to find most recent version of snapshots, specified in ISO8601 time format.</doc>
                    </param>
                  </request>
                  <response status="200">
                    <representation mediaType="application/json"/>
                  </response>
                  <response status="202">
                    <representation mediaType=""/>
                  </response>
                  <response status="401">
                    <representation mediaType=""/>
                  </response>
                  <response status="404">
                    <representation mediaType=""/>
                  </response>
                  <response status="500">
                    <representation mediaType=""/>
                  </response>
                </method>
                <method name="GET" id="get">
                  <doc xml:lang="en" title="get">Read operation for snapshots</doc>
                  <request>
                    <param name="recurse" type="xs:boolean" required="false" default="" style="query" xmlns:xs="http://www.w3.org/2001/XMLSchema">
                      <doc xml:lang="en" title="recurse Parameter">If true, finds all elements recursively based on containment hierarchy</doc>
                    </param>
                    <param name="recurseDepth" type="xs:integer" required="false" default="" style="query" xmlns:xs="http://www.w3.org/2001/XMLSchema">
                      <doc xml:lang="en" title="recurseDepth Parameter">Depth to recurse to. 0 specifies infinite recursion (e.g., until all leaf nodes are found).</doc>
                    </param>
                    <param name="search" type="xs:string" required="false" default="" style="query" xmlns:xs="http://www.w3.org/2001/XMLSchema">
                      <doc xml:lang="en" title="search Parameter">Regular expression of the search to be executed at the specified scope. Currently search is against sysml:id, sysml:name, sysml:documentation, sysml:body.</doc>
                    </param>
                    <param name="timestamp" type="xs:date" required="false" default="" style="query" xmlns:xs="http://www.w3.org/2001/XMLSchema">
                      <doc xml:lang="en" title="timestamp Parameter">Timestamp to find most recent version of snapshots, specified in ISO8601 time format.</doc>
                    </param>
                  </request>
                  <response status="200">
                    <representation mediaType="application/json"/>
                  </response>
                  <response status="400">
                    <representation mediaType=""/>
                  </response>
                  <response status="401">
                    <representation mediaType=""/>
                  </response>
                  <response status="404">
                    <representation mediaType=""/>
                  </response>
                  <response status="500">
                    <representation mediaType=""/>
                  </response>
                </method>
              </resource>
              <method name="POST" id="post">
                <doc xml:lang="en" title="post">Append operation for snapshots</doc>
                <request>
                  <param name="recurse" type="xs:boolean" required="false" default="" style="query" xmlns:xs="http://www.w3.org/2001/XMLSchema">
                    <doc xml:lang="en" title="recurse Parameter">If true, finds all elements recursively based on containment hierarchy</doc>
                  </param>
                  <param name="recurseDepth" type="xs:integer" required="false" default="" style="query" xmlns:xs="http://www.w3.org/2001/XMLSchema">
                    <doc xml:lang="en" title="recurseDepth Parameter">Depth to recurse to. 0 specifies infinite recursion (e.g., until all leaf nodes are found).</doc>
                  </param>
                  <param name="search" type="xs:string" required="false" default="" style="query" xmlns:xs="http://www.w3.org/2001/XMLSchema">
                    <doc xml:lang="en" title="search Parameter">Regular expression of the search to be executed at the specified scope. Currently search is against sysml:id, sysml:name, sysml:documentation, sysml:body.</doc>
                  </param>
                  <param name="timestamp" type="xs:date" required="false" default="" style="query" xmlns:xs="http://www.w3.org/2001/XMLSchema">
                    <doc xml:lang="en" title="timestamp Parameter">Timestamp to find most recent version of snapshots, specified in ISO8601 time format.</doc>
                  </param>
                  <representation mediaType="application/json"/>
                </request>
                <response status="">
                  <representation mediaType="application/json"/>
                </response>
                <response status="200">
                  <representation mediaType="application/json"/>
                </response>
                <response status="202">
                  <representation mediaType=""/>
                </response>
                <response status="401">
                  <representation mediaType=""/>
                </response>
                <response status="404">
                  <representation mediaType=""/>
                </response>
                <response status="409">
                  <representation mediaType=""/>
                </response>
                <response status="500">
                  <representation mediaType=""/>
                </response>
              </method>
              <method name="PUT" id="put">
                <doc xml:lang="en" title="put">Create/update operation for snapshots</doc>
                <request>
                  <param name="recurse" type="xs:boolean" required="false" default="" style="query" xmlns:xs="http://www.w3.org/2001/XMLSchema">
                    <doc xml:lang="en" title="recurse Parameter">If true, finds all elements recursively based on containment hierarchy</doc>
                  </param>
                  <param name="recurseDepth" type="xs:integer" required="false" default="" style="query" xmlns:xs="http://www.w3.org/2001/XMLSchema">
                    <doc xml:lang="en" title="recurseDepth Parameter">Depth to recurse to. 0 specifies infinite recursion (e.g., until all leaf nodes are found).</doc>
                  </param>
                  <param name="search" type="xs:string" required="false" default="" style="query" xmlns:xs="http://www.w3.org/2001/XMLSchema">
                    <doc xml:lang="en" title="search Parameter">Regular expression of the search to be executed at the specified scope. Currently search is against sysml:id, sysml:name, sysml:documentation, sysml:body.</doc>
                  </param>
                  <param name="timestamp" type="xs:date" required="false" default="" style="query" xmlns:xs="http://www.w3.org/2001/XMLSchema">
                    <doc xml:lang="en" title="timestamp Parameter">Timestamp to find most recent version of snapshots, specified in ISO8601 time format.</doc>
                  </param>
                  <representation mediaType="application/json"/>
                </request>
                <response status="">
                  <representation mediaType="application/json"/>
                </response>
                <response status="200">
                  <representation mediaType="application/json"/>
                </response>
                <response status="201">
                  <representation mediaType=""/>
                </response>
                <response status="202">
                  <representation mediaType=""/>
                </response>
                <response status="401">
                  <representation mediaType=""/>
                </response>
                <response status="404">
                  <representation mediaType=""/>
                </response>
                <response status="409">
                  <representation mediaType=""/>
                </response>
                <response status="500">
                  <representation mediaType=""/>
                </response>
              </method>
              <method name="DELETE" id="delete">
                <doc xml:lang="en" title="delete">Delete operation for snapshots</doc>
                <request>
                  <param name="recurse" type="xs:boolean" required="false" default="" style="query" xmlns:xs="http://www.w3.org/2001/XMLSchema">
                    <doc xml:lang="en" title="recurse Parameter">If true, finds all elements recursively based on containment hierarchy</doc>
                  </param>
                  <param name="recurseDepth" type="xs:integer" required="false" default="" style="query" xmlns:xs="http://www.w3.org/2001/XMLSchema">
                    <doc xml:lang="en" title="recurseDepth Parameter">Depth to recurse to. 0 specifies infinite recursion (e.g., until all leaf nodes are found).</doc>
                  </param>
                  <param name="search" type="xs:string" required="false" default="" style="query" xmlns:xs="http://www.w3.org/2001/XMLSchema">
                    <doc xml:lang="en" title="search Parameter">Regular expression of the search to be executed at the specified scope. Currently search is against sysml:id, sysml:name, sysml:documentation, sysml:body.</doc>
                  </param>
                  <param name="timestamp" type="xs:date" required="false" default="" style="query" xmlns:xs="http://www.w3.org/2001/XMLSchema">
                    <doc xml:lang="en" title="timestamp Parameter">Timestamp to find most recent version of snapshots, specified in ISO8601 time format.</doc>
                  </param>
                </request>
                <response status="200">
                  <representation mediaType="application/json"/>
                </response>
                <response status="202">
                  <representation mediaType=""/>
                </response>
                <response status="401">
                  <representation mediaType=""/>
                </response>
                <response status="404">
                  <representation mediaType=""/>
                </response>
                <response status="500">
                  <representation mediaType=""/>
                </response>
              </method>
              <method name="GET" id="get">
                <doc xml:lang="en" title="get">Read operation for snapshots</doc>
                <request>
                  <param name="recurse" type="xs:boolean" required="false" default="" style="query" xmlns:xs="http://www.w3.org/2001/XMLSchema">
                    <doc xml:lang="en" title="recurse Parameter">If true, finds all elements recursively based on containment hierarchy</doc>
                  </param>
                  <param name="recurseDepth" type="xs:integer" required="false" default="" style="query" xmlns:xs="http://www.w3.org/2001/XMLSchema">
                    <doc xml:lang="en" title="recurseDepth Parameter">Depth to recurse to. 0 specifies infinite recursion (e.g., until all leaf nodes are found).</doc>
                  </param>
                  <param name="search" type="xs:string" required="false" default="" style="query" xmlns:xs="http://www.w3.org/2001/XMLSchema">
                    <doc xml:lang="en" title="search Parameter">Regular expression of the search to be executed at the specified scope. Currently search is against sysml:id, sysml:name, sysml:documentation, sysml:body.</doc>
                  </param>
                  <param name="timestamp" type="xs:date" required="false" default="" style="query" xmlns:xs="http://www.w3.org/2001/XMLSchema">
                    <doc xml:lang="en" title="timestamp Parameter">Timestamp to find most recent version of snapshots, specified in ISO8601 time format.</doc>
                  </param>
                </request>
                <response status="200">
                  <representation mediaType="application/json"/>
                </response>
                <response status="400">
                  <representation mediaType=""/>
                </response>
                <response status="401">
                  <representation mediaType=""/>
                </response>
                <response status="404">
                  <representation mediaType=""/>
                </response>
                <response status="500">
                  <representation mediaType=""/>
                </response>
              </method>
            </resource>
            <method name="POST" id="post">
              <doc xml:lang="en" title="post">Append operation for configurations</doc>
              <request>
                <param name="recurse" type="xs:boolean" required="false" default="" style="query" xmlns:xs="http://www.w3.org/2001/XMLSchema">
                  <doc xml:lang="en" title="recurse Parameter">If true, finds all elements recursively based on containment hierarchy</doc>
                </param>
                <param name="recurseDepth" type="xs:integer" required="false" default="" style="query" xmlns:xs="http://www.w3.org/2001/XMLSchema">
                  <doc xml:lang="en" title="recurseDepth Parameter">Depth to recurse to. 0 specifies infinite recursion (e.g., until all leaf nodes are found).</doc>
                </param>
                <param name="search" type="xs:string" required="false" default="" style="query" xmlns:xs="http://www.w3.org/2001/XMLSchema">
                  <doc xml:lang="en" title="search Parameter">Regular expression of the search to be executed at the specified scope. Currently search is against sysml:id, sysml:name, sysml:documentation, sysml:body.</doc>
                </param>
                <param name="timestamp" type="xs:date" required="false" default="" style="query" xmlns:xs="http://www.w3.org/2001/XMLSchema">
                  <doc xml:lang="en" title="timestamp Parameter">Timestamp to find most recent version of configurations, specified in ISO8601 time format.</doc>
                </param>
                <representation mediaType="application/json"/>
              </request>
              <response status="">
                <representation mediaType="application/json"/>
              </response>
              <response status="200">
                <representation mediaType="application/json"/>
              </response>
              <response status="202">
                <representation mediaType=""/>
              </response>
              <response status="401">
                <representation mediaType=""/>
              </response>
              <response status="404">
                <representation mediaType=""/>
              </response>
              <response status="409">
                <representation mediaType=""/>
              </response>
              <response status="500">
                <representation mediaType=""/>
              </response>
            </method>
            <method name="PUT" id="put">
              <doc xml:lang="en" title="put">Create/update operation for configurations</doc>
              <request>
                <param name="recurse" type="xs:boolean" required="false" default="" style="query" xmlns:xs="http://www.w3.org/2001/XMLSchema">
                  <doc xml:lang="en" title="recurse Parameter">If true, finds all elements recursively based on containment hierarchy</doc>
                </param>
                <param name="recurseDepth" type="xs:integer" required="false" default="" style="query" xmlns:xs="http://www.w3.org/2001/XMLSchema">
                  <doc xml:lang="en" title="recurseDepth Parameter">Depth to recurse to. 0 specifies infinite recursion (e.g., until all leaf nodes are found).</doc>
                </param>
                <param name="search" type="xs:string" required="false" default="" style="query" xmlns:xs="http://www.w3.org/2001/XMLSchema">
                  <doc xml:lang="en" title="search Parameter">Regular expression of the search to be executed at the specified scope. Currently search is against sysml:id, sysml:name, sysml:documentation, sysml:body.</doc>
                </param>
                <param name="timestamp" type="xs:date" required="false" default="" style="query" xmlns:xs="http://www.w3.org/2001/XMLSchema">
                  <doc xml:lang="en" title="timestamp Parameter">Timestamp to find most recent version of configurations, specified in ISO8601 time format.</doc>
                </param>
                <representation mediaType="application/json"/>
              </request>
              <response status="">
                <representation mediaType="application/json"/>
              </response>
              <response status="200">
                <representation mediaType="application/json"/>
              </response>
              <response status="201">
                <representation mediaType=""/>
              </response>
              <response status="202">
                <representation mediaType=""/>
              </response>
              <response status="401">
                <representation mediaType=""/>
              </response>
              <response status="404">
                <representation mediaType=""/>
              </response>
              <response status="409">
                <representation mediaType=""/>
              </response>
              <response status="500">
                <representation mediaType=""/>
              </response>
            </method>
            <method name="DELETE" id="delete">
              <doc xml:lang="en" title="delete">Delete operation for configurations</doc>
              <request>
                <param name="recurse" type="xs:boolean" required="false" default="" style="query" xmlns:xs="http://www.w3.org/2001/XMLSchema">
                  <doc xml:lang="en" title="recurse Parameter">If true, finds all elements recursively based on containment hierarchy</doc>
                </param>
                <param name="recurseDepth" type="xs:integer" required="false" default="" style="query" xmlns:xs="http://www.w3.org/2001/XMLSchema">
                  <doc xml:lang="en" title="recurseDepth Parameter">Depth to recurse to. 0 specifies infinite recursion (e.g., until all leaf nodes are found).</doc>
                </param>
                <param name="search" type="xs:string" required="false" default="" style="query" xmlns:xs="http://www.w3.org/2001/XMLSchema">
                  <doc xml:lang="en" title="search Parameter">Regular expression of the search to be executed at the specified scope. Currently search is against sysml:id, sysml:name, sysml:documentation, sysml:body.</doc>
                </param>
                <param name="timestamp" type="xs:date" required="false" default="" style="query" xmlns:xs="http://www.w3.org/2001/XMLSchema">
                  <doc xml:lang="en" title="timestamp Parameter">Timestamp to find most recent version of configurations, specified in ISO8601 time format.</doc>
                </param>
              </request>
              <response status="200">
                <representation mediaType="application/json"/>
              </response>
              <response status="202">
                <representation mediaType=""/>
              </response>
              <response status="401">
                <representation mediaType=""/>
              </response>
              <response status="404">
                <representation mediaType=""/>
              </response>
              <response status="500">
                <representation mediaType=""/>
              </response>
            </method>
            <method name="GET" id="get">
              <doc xml:lang="en" title="get">Read operation for configurations</doc>
              <request>
                <param name="recurse" type="xs:boolean" required="false" default="" style="query" xmlns:xs="http://www.w3.org/2001/XMLSchema">
                  <doc xml:lang="en" title="recurse Parameter">If true, finds all elements recursively based on containment hierarchy</doc>
                </param>
                <param name="recurseDepth" type="xs:integer" required="false" default="" style="query" xmlns:xs="http://www.w3.org/2001/XMLSchema">
                  <doc xml:lang="en" title="recurseDepth Parameter">Depth to recurse to. 0 specifies infinite recursion (e.g., until all leaf nodes are found).</doc>
                </param>
                <param name="search" type="xs:string" required="false" default="" style="query" xmlns:xs="http://www.w3.org/2001/XMLSchema">
                  <doc xml:lang="en" title="search Parameter">Regular expression of the search to be executed at the specified scope. Currently search is against sysml:id, sysml:name, sysml:documentation, sysml:body.</doc>
                </param>
                <param name="timestamp" type="xs:date" required="false" default="" style="query" xmlns:xs="http://www.w3.org/2001/XMLSchema">
                  <doc xml:lang="en" title="timestamp Parameter">Timestamp to find most recent version of configurations, specified in ISO8601 time format.</doc>
                </param>
              </request>
              <response status="200">
                <representation mediaType="application/json"/>
              </response>
              <response status="400">
                <representation mediaType=""/>
              </response>
              <response status="401">
                <representation mediaType=""/>
              </response>
              <response status="404">
                <representation mediaType=""/>
              </response>
              <response status="500">
                <representation mediaType=""/>
              </response>
            </method>
          </resource>
          <method name="POST" id="post">
            <doc xml:lang="en" title="post">Append operation for configurations</doc>
            <request>
              <param name="recurse" type="xs:boolean" required="false" default="" style="query" xmlns:xs="http://www.w3.org/2001/XMLSchema">
                <doc xml:lang="en" title="recurse Parameter">If true, finds all elements recursively based on containment hierarchy</doc>
              </param>
              <param name="recurseDepth" type="xs:integer" required="false" default="" style="query" xmlns:xs="http://www.w3.org/2001/XMLSchema">
                <doc xml:lang="en" title="recurseDepth Parameter">Depth to recurse to. 0 specifies infinite recursion (e.g., until all leaf nodes are found).</doc>
              </param>
              <param name="search" type="xs:string" required="false" default="" style="query" xmlns:xs="http://www.w3.org/2001/XMLSchema">
                <doc xml:lang="en" title="search Parameter">Regular expression of the search to be executed at the specified scope. Currently search is against sysml:id, sysml:name, sysml:documentation, sysml:body.</doc>
              </param>
              <param name="timestamp" type="xs:date" required="false" default="" style="query" xmlns:xs="http://www.w3.org/2001/XMLSchema">
                <doc xml:lang="en" title="timestamp Parameter">Timestamp to find most recent version of configurations, specified in ISO8601 time format.</doc>
              </param>
              <representation mediaType="application/json"/>
            </request>
            <response status="">
              <representation mediaType="application/json"/>
            </response>
            <response status="200">
              <representation mediaType="application/json"/>
            </response>
            <response status="202">
              <representation mediaType=""/>
            </response>
            <response status="401">
              <representation mediaType=""/>
            </response>
            <response status="404">
              <representation mediaType=""/>
            </response>
            <response status="409">
              <representation mediaType=""/>
            </response>
            <response status="500">
              <representation mediaType=""/>
            </response>
          </method>
          <method name="PUT" id="put">
            <doc xml:lang="en" title="put">Create/update operation for configurations</doc>
            <request>
              <param name="recurse" type="xs:boolean" required="false" default="" style="query" xmlns:xs="http://www.w3.org/2001/XMLSchema">
                <doc xml:lang="en" title="recurse Parameter">If true, finds all elements recursively based on containment hierarchy</doc>
              </param>
              <param name="recurseDepth" type="xs:integer" required="false" default="" style="query" xmlns:xs="http://www.w3.org/2001/XMLSchema">
                <doc xml:lang="en" title="recurseDepth Parameter">Depth to recurse to. 0 specifies infinite recursion (e.g., until all leaf nodes are found).</doc>
              </param>
              <param name="search" type="xs:string" required="false" default="" style="query" xmlns:xs="http://www.w3.org/2001/XMLSchema">
                <doc xml:lang="en" title="search Parameter">Regular expression of the search to be executed at the specified scope. Currently search is against sysml:id, sysml:name, sysml:documentation, sysml:body.</doc>
              </param>
              <param name="timestamp" type="xs:date" required="false" default="" style="query" xmlns:xs="http://www.w3.org/2001/XMLSchema">
                <doc xml:lang="en" title="timestamp Parameter">Timestamp to find most recent version of configurations, specified in ISO8601 time format.</doc>
              </param>
              <representation mediaType="application/json"/>
            </request>
            <response status="">
              <representation mediaType="application/json"/>
            </response>
            <response status="200">
              <representation mediaType="application/json"/>
            </response>
            <response status="201">
              <representation mediaType=""/>
            </response>
            <response status="202">
              <representation mediaType=""/>
            </response>
            <response status="401">
              <representation mediaType=""/>
            </response>
            <response status="404">
              <representation mediaType=""/>
            </response>
            <response status="409">
              <representation mediaType=""/>
            </response>
            <response status="500">
              <representation mediaType=""/>
            </response>
          </method>
          <method name="DELETE" id="delete">
            <doc xml:lang="en" title="delete">Delete operation for configurations</doc>
            <request>
              <param name="recurse" type="xs:boolean" required="false" default="" style="query" xmlns:xs="http://www.w3.org/2001/XMLSchema">
                <doc xml:lang="en" title="recurse Parameter">If true, finds all elements recursively based on containment hierarchy</doc>
              </param>
              <param name="recurseDepth" type="xs:integer" required="false" default="" style="query" xmlns:xs="http://www.w3.org/2001/XMLSchema">
                <doc xml:lang="en" title="recurseDepth Parameter">Depth to recurse to. 0 specifies infinite recursion (e.g., until all leaf nodes are found).</doc>
              </param>
              <param name="search" type="xs:string" required="false" default="" style="query" xmlns:xs="http://www.w3.org/2001/XMLSchema">
                <doc xml:lang="en" title="search Parameter">Regular expression of the search to be executed at the specified scope. Currently search is against sysml:id, sysml:name, sysml:documentation, sysml:body.</doc>
              </param>
              <param name="timestamp" type="xs:date" required="false" default="" style="query" xmlns:xs="http://www.w3.org/2001/XMLSchema">
                <doc xml:lang="en" title="timestamp Parameter">Timestamp to find most recent version of configurations, specified in ISO8601 time format.</doc>
              </param>
            </request>
            <response status="200">
              <representation mediaType="application/json"/>
            </response>
            <response status="202">
              <representation mediaType=""/>
            </response>
            <response status="401">
              <representation mediaType=""/>
            </response>
            <response status="404">
              <representation mediaType=""/>
            </response>
            <response status="500">
              <representation mediaType=""/>
            </response>
          </method>
          <method name="GET" id="get">
            <doc xml:lang="en" title="get">Read operation for configurations</doc>
            <request>
              <param name="recurse" type="xs:boolean" required="false" default="" style="query" xmlns:xs="http://www.w3.org/2001/XMLSchema">
                <doc xml:lang="en" title="recurse Parameter">If true, finds all elements recursively based on containment hierarchy</doc>
              </param>
              <param name="recurseDepth" type="xs:integer" required="false" default="" style="query" xmlns:xs="http://www.w3.org/2001/XMLSchema">
                <doc xml:lang="en" title="recurseDepth Parameter">Depth to recurse to. 0 specifies infinite recursion (e.g., until all leaf nodes are found).</doc>
              </param>
              <param name="search" type="xs:string" required="false" default="" style="query" xmlns:xs="http://www.w3.org/2001/XMLSchema">
                <doc xml:lang="en" title="search Parameter">Regular expression of the search to be executed at the specified scope. Currently search is against sysml:id, sysml:name, sysml:documentation, sysml:body.</doc>
              </param>
              <param name="timestamp" type="xs:date" required="false" default="" style="query" xmlns:xs="http://www.w3.org/2001/XMLSchema">
                <doc xml:lang="en" title="timestamp Parameter">Timestamp to find most recent version of configurations, specified in ISO8601 time format.</doc>
              </param>
            </request>
            <response status="200">
              <representation mediaType="application/json"/>
            </response>
            <response status="400">
              <representation mediaType=""/>
            </response>
            <response status="401">
              <representation mediaType=""/>
            </response>
            <response status="404">
              <representation mediaType=""/>
            </response>
            <response status="500">
              <representation mediaType=""/>
            </response>
          </method>
        </resource>
        <resource path="changesets" id="/changesets">
          <doc xml:lang="en" title="/changesets">Create, Update, and Delete operations for changesets</doc>
          <param name="workspaceId" type="xs:string" required="true" default="" style="template" xmlns:xs="http://www.w3.org/2001/XMLSchema"/>
          <method name="POST" id="post">
            <doc xml:lang="en" title="post">Append operation for changesets</doc>
            <request>
              <param name="recurse" type="xs:boolean" required="false" default="" style="query" xmlns:xs="http://www.w3.org/2001/XMLSchema">
                <doc xml:lang="en" title="recurse Parameter">If true, finds all elements recursively based on containment hierarchy</doc>
              </param>
              <param name="recurseDepth" type="xs:integer" required="false" default="" style="query" xmlns:xs="http://www.w3.org/2001/XMLSchema">
                <doc xml:lang="en" title="recurseDepth Parameter">Depth to recurse to. 0 specifies infinite recursion (e.g., until all leaf nodes are found).</doc>
              </param>
              <param name="search" type="xs:string" required="false" default="" style="query" xmlns:xs="http://www.w3.org/2001/XMLSchema">
                <doc xml:lang="en" title="search Parameter">Regular expression of the search to be executed at the specified scope. Currently search is against sysml:id, sysml:name, sysml:documentation, sysml:body.</doc>
              </param>
              <param name="timestamp" type="xs:date" required="false" default="" style="query" xmlns:xs="http://www.w3.org/2001/XMLSchema">
                <doc xml:lang="en" title="timestamp Parameter">Timestamp to find most recent version of changesets, specified in ISO8601 time format.</doc>
              </param>
              <representation mediaType="application/json"/>
            </request>
            <response status="">
              <representation mediaType="application/json"/>
            </response>
            <response status="200">
              <representation mediaType="application/json"/>
            </response>
            <response status="202">
              <representation mediaType=""/>
            </response>
            <response status="401">
              <representation mediaType=""/>
            </response>
            <response status="404">
              <representation mediaType=""/>
            </response>
            <response status="409">
              <representation mediaType=""/>
            </response>
            <response status="500">
              <representation mediaType=""/>
            </response>
          </method>
          <method name="PUT" id="put">
            <doc xml:lang="en" title="put">Create/update operation for changesets</doc>
            <request>
              <param name="recurse" type="xs:boolean" required="false" default="" style="query" xmlns:xs="http://www.w3.org/2001/XMLSchema">
                <doc xml:lang="en" title="recurse Parameter">If true, finds all elements recursively based on containment hierarchy</doc>
              </param>
              <param name="recurseDepth" type="xs:integer" required="false" default="" style="query" xmlns:xs="http://www.w3.org/2001/XMLSchema">
                <doc xml:lang="en" title="recurseDepth Parameter">Depth to recurse to. 0 specifies infinite recursion (e.g., until all leaf nodes are found).</doc>
              </param>
              <param name="search" type="xs:string" required="false" default="" style="query" xmlns:xs="http://www.w3.org/2001/XMLSchema">
                <doc xml:lang="en" title="search Parameter">Regular expression of the search to be executed at the specified scope. Currently search is against sysml:id, sysml:name, sysml:documentation, sysml:body.</doc>
              </param>
              <param name="timestamp" type="xs:date" required="false" default="" style="query" xmlns:xs="http://www.w3.org/2001/XMLSchema">
                <doc xml:lang="en" title="timestamp Parameter">Timestamp to find most recent version of changesets, specified in ISO8601 time format.</doc>
              </param>
              <representation mediaType="application/json"/>
            </request>
            <response status="">
              <representation mediaType="application/json"/>
            </response>
            <response status="200">
              <representation mediaType="application/json"/>
            </response>
            <response status="201">
              <representation mediaType=""/>
            </response>
            <response status="202">
              <representation mediaType=""/>
            </response>
            <response status="401">
              <representation mediaType=""/>
            </response>
            <response status="404">
              <representation mediaType=""/>
            </response>
            <response status="409">
              <representation mediaType=""/>
            </response>
            <response status="500">
              <representation mediaType=""/>
            </response>
          </method>
          <method name="DELETE" id="delete">
            <doc xml:lang="en" title="delete">Delete operation for changesets</doc>
            <request>
              <param name="recurse" type="xs:boolean" required="false" default="" style="query" xmlns:xs="http://www.w3.org/2001/XMLSchema">
                <doc xml:lang="en" title="recurse Parameter">If true, finds all elements recursively based on containment hierarchy</doc>
              </param>
              <param name="recurseDepth" type="xs:integer" required="false" default="" style="query" xmlns:xs="http://www.w3.org/2001/XMLSchema">
                <doc xml:lang="en" title="recurseDepth Parameter">Depth to recurse to. 0 specifies infinite recursion (e.g., until all leaf nodes are found).</doc>
              </param>
              <param name="search" type="xs:string" required="false" default="" style="query" xmlns:xs="http://www.w3.org/2001/XMLSchema">
                <doc xml:lang="en" title="search Parameter">Regular expression of the search to be executed at the specified scope. Currently search is against sysml:id, sysml:name, sysml:documentation, sysml:body.</doc>
              </param>
              <param name="timestamp" type="xs:date" required="false" default="" style="query" xmlns:xs="http://www.w3.org/2001/XMLSchema">
                <doc xml:lang="en" title="timestamp Parameter">Timestamp to find most recent version of changesets, specified in ISO8601 time format.</doc>
              </param>
            </request>
            <response status="200">
              <representation mediaType="application/json"/>
            </response>
            <response status="202">
              <representation mediaType=""/>
            </response>
            <response status="401">
              <representation mediaType=""/>
            </response>
            <response status="404">
              <representation mediaType=""/>
            </response>
            <response status="500">
              <representation mediaType=""/>
            </response>
          </method>
          <method name="GET" id="get">
            <doc xml:lang="en" title="get">Read operation for changesets</doc>
            <request>
              <param name="recurse" type="xs:boolean" required="false" default="" style="query" xmlns:xs="http://www.w3.org/2001/XMLSchema">
                <doc xml:lang="en" title="recurse Parameter">If true, finds all elements recursively based on containment hierarchy</doc>
              </param>
              <param name="recurseDepth" type="xs:integer" required="false" default="" style="query" xmlns:xs="http://www.w3.org/2001/XMLSchema">
                <doc xml:lang="en" title="recurseDepth Parameter">Depth to recurse to. 0 specifies infinite recursion (e.g., until all leaf nodes are found).</doc>
              </param>
              <param name="search" type="xs:string" required="false" default="" style="query" xmlns:xs="http://www.w3.org/2001/XMLSchema">
                <doc xml:lang="en" title="search Parameter">Regular expression of the search to be executed at the specified scope. Currently search is against sysml:id, sysml:name, sysml:documentation, sysml:body.</doc>
              </param>
              <param name="timestamp" type="xs:date" required="false" default="" style="query" xmlns:xs="http://www.w3.org/2001/XMLSchema">
                <doc xml:lang="en" title="timestamp Parameter">Timestamp to find most recent version of changesets, specified in ISO8601 time format.</doc>
              </param>
            </request>
            <response status="200">
              <representation mediaType="application/json"/>
            </response>
            <response status="400">
              <representation mediaType=""/>
            </response>
            <response status="401">
              <representation mediaType=""/>
            </response>
            <response status="404">
              <representation mediaType=""/>
            </response>
            <response status="500">
              <representation mediaType=""/>
            </response>
          </method>
        </resource>
        <resource path="constraints" id="/constraints">
          <doc xml:lang="en" title="/constraints"/>
          <param name="workspaceId" type="xs:string" required="true" default="" style="template" xmlns:xs="http://www.w3.org/2001/XMLSchema"/>
        </resource>
        <resource path="elements" id="/elements">
          <doc xml:lang="en" title="/elements">Create, Update, and Delete operations for elements</doc>
          <param name="workspaceId" type="xs:string" required="true" default="" style="template" xmlns:xs="http://www.w3.org/2001/XMLSchema"/>
          <resource path="{elementId}" id="/{elementId}">
            <doc xml:lang="en" title="/{elementId}">Create, Update, and Delete operations for elements</doc>
            <param name="workspaceId" type="xs:string" required="true" default="" style="template" xmlns:xs="http://www.w3.org/2001/XMLSchema"/>
            <param name="elementId" type="xs:string" required="true" default="" style="template" xmlns:xs="http://www.w3.org/2001/XMLSchema">
              <doc xml:lang="en" title="elementId Parameter">Sysml ID for the element under consideration</doc>
            </param>
            <resource path="versions" id="/versions">
              <doc xml:lang="en" title="/versions">Create, Update, and Delete operations for versions</doc>
              <param name="workspaceId" type="xs:string" required="true" default="" style="template" xmlns:xs="http://www.w3.org/2001/XMLSchema"/>
              <param name="elementId" type="xs:string" required="true" default="" style="template" xmlns:xs="http://www.w3.org/2001/XMLSchema"/>
              <resource path="{versionId}" id="/{versionId}">
                <doc xml:lang="en" title="/{versionId}">Create, Update, and Delete operations for versions</doc>
                <param name="workspaceId" type="xs:string" required="true" default="" style="template" xmlns:xs="http://www.w3.org/2001/XMLSchema"/>
                <param name="elementId" type="xs:string" required="true" default="" style="template" xmlns:xs="http://www.w3.org/2001/XMLSchema"/>
                <param name="versionId" type="xs:string" required="true" default="" style="template" xmlns:xs="http://www.w3.org/2001/XMLSchema">
                  <doc xml:lang="en" title="versionId Parameter">Sysml ID for the version under consideration</doc>
                </param>
                <method name="POST" id="post">
                  <doc xml:lang="en" title="post">Append operation for versions</doc>
                  <request>
                    <param name="recurse" type="xs:boolean" required="false" default="" style="query" xmlns:xs="http://www.w3.org/2001/XMLSchema">
                      <doc xml:lang="en" title="recurse Parameter">If true, finds all elements recursively based on containment hierarchy</doc>
                    </param>
                    <param name="recurseDepth" type="xs:integer" required="false" default="" style="query" xmlns:xs="http://www.w3.org/2001/XMLSchema">
                      <doc xml:lang="en" title="recurseDepth Parameter">Depth to recurse to. 0 specifies infinite recursion (e.g., until all leaf nodes are found).</doc>
                    </param>
                    <param name="search" type="xs:string" required="false" default="" style="query" xmlns:xs="http://www.w3.org/2001/XMLSchema">
                      <doc xml:lang="en" title="search Parameter">Regular expression of the search to be executed at the specified scope. Currently search is against sysml:id, sysml:name, sysml:documentation, sysml:body.</doc>
                    </param>
                    <param name="timestamp" type="xs:date" required="false" default="" style="query" xmlns:xs="http://www.w3.org/2001/XMLSchema">
                      <doc xml:lang="en" title="timestamp Parameter">Timestamp to find most recent version of versions, specified in ISO8601 time format.</doc>
                    </param>
                    <representation mediaType="application/json"/>
                  </request>
                  <response status="">
                    <representation mediaType="application/json"/>
                  </response>
                  <response status="200">
                    <representation mediaType="application/json"/>
                  </response>
                  <response status="202">
                    <representation mediaType=""/>
                  </response>
                  <response status="401">
                    <representation mediaType=""/>
                  </response>
                  <response status="404">
                    <representation mediaType=""/>
                  </response>
                  <response status="409">
                    <representation mediaType=""/>
                  </response>
                  <response status="500">
                    <representation mediaType=""/>
                  </response>
                </method>
                <method name="PUT" id="put">
                  <doc xml:lang="en" title="put">Create/update operation for versions</doc>
                  <request>
                    <param name="recurse" type="xs:boolean" required="false" default="" style="query" xmlns:xs="http://www.w3.org/2001/XMLSchema">
                      <doc xml:lang="en" title="recurse Parameter">If true, finds all elements recursively based on containment hierarchy</doc>
                    </param>
                    <param name="recurseDepth" type="xs:integer" required="false" default="" style="query" xmlns:xs="http://www.w3.org/2001/XMLSchema">
                      <doc xml:lang="en" title="recurseDepth Parameter">Depth to recurse to. 0 specifies infinite recursion (e.g., until all leaf nodes are found).</doc>
                    </param>
                    <param name="search" type="xs:string" required="false" default="" style="query" xmlns:xs="http://www.w3.org/2001/XMLSchema">
                      <doc xml:lang="en" title="search Parameter">Regular expression of the search to be executed at the specified scope. Currently search is against sysml:id, sysml:name, sysml:documentation, sysml:body.</doc>
                    </param>
                    <param name="timestamp" type="xs:date" required="false" default="" style="query" xmlns:xs="http://www.w3.org/2001/XMLSchema">
                      <doc xml:lang="en" title="timestamp Parameter">Timestamp to find most recent version of versions, specified in ISO8601 time format.</doc>
                    </param>
                    <representation mediaType="application/json"/>
                  </request>
                  <response status="">
                    <representation mediaType="application/json"/>
                  </response>
                  <response status="200">
                    <representation mediaType="application/json"/>
                  </response>
                  <response status="201">
                    <representation mediaType=""/>
                  </response>
                  <response status="202">
                    <representation mediaType=""/>
                  </response>
                  <response status="401">
                    <representation mediaType=""/>
                  </response>
                  <response status="404">
                    <representation mediaType=""/>
                  </response>
                  <response status="409">
                    <representation mediaType=""/>
                  </response>
                  <response status="500">
                    <representation mediaType=""/>
                  </response>
                </method>
                <method name="DELETE" id="delete">
                  <doc xml:lang="en" title="delete">Delete operation for versions</doc>
                  <request>
                    <param name="recurse" type="xs:boolean" required="false" default="" style="query" xmlns:xs="http://www.w3.org/2001/XMLSchema">
                      <doc xml:lang="en" title="recurse Parameter">If true, finds all elements recursively based on containment hierarchy</doc>
                    </param>
                    <param name="recurseDepth" type="xs:integer" required="false" default="" style="query" xmlns:xs="http://www.w3.org/2001/XMLSchema">
                      <doc xml:lang="en" title="recurseDepth Parameter">Depth to recurse to. 0 specifies infinite recursion (e.g., until all leaf nodes are found).</doc>
                    </param>
                    <param name="search" type="xs:string" required="false" default="" style="query" xmlns:xs="http://www.w3.org/2001/XMLSchema">
                      <doc xml:lang="en" title="search Parameter">Regular expression of the search to be executed at the specified scope. Currently search is against sysml:id, sysml:name, sysml:documentation, sysml:body.</doc>
                    </param>
                    <param name="timestamp" type="xs:date" required="false" default="" style="query" xmlns:xs="http://www.w3.org/2001/XMLSchema">
                      <doc xml:lang="en" title="timestamp Parameter">Timestamp to find most recent version of versions, specified in ISO8601 time format.</doc>
                    </param>
                  </request>
                  <response status="200">
                    <representation mediaType="application/json"/>
                  </response>
                  <response status="202">
                    <representation mediaType=""/>
                  </response>
                  <response status="401">
                    <representation mediaType=""/>
                  </response>
                  <response status="404">
                    <representation mediaType=""/>
                  </response>
                  <response status="500">
                    <representation mediaType=""/>
                  </response>
                </method>
                <method name="GET" id="get">
                  <doc xml:lang="en" title="get">Read operation for versions</doc>
                  <request>
                    <param name="recurse" type="xs:boolean" required="false" default="" style="query" xmlns:xs="http://www.w3.org/2001/XMLSchema">
                      <doc xml:lang="en" title="recurse Parameter">If true, finds all elements recursively based on containment hierarchy</doc>
                    </param>
                    <param name="recurseDepth" type="xs:integer" required="false" default="" style="query" xmlns:xs="http://www.w3.org/2001/XMLSchema">
                      <doc xml:lang="en" title="recurseDepth Parameter">Depth to recurse to. 0 specifies infinite recursion (e.g., until all leaf nodes are found).</doc>
                    </param>
                    <param name="search" type="xs:string" required="false" default="" style="query" xmlns:xs="http://www.w3.org/2001/XMLSchema">
                      <doc xml:lang="en" title="search Parameter">Regular expression of the search to be executed at the specified scope. Currently search is against sysml:id, sysml:name, sysml:documentation, sysml:body.</doc>
                    </param>
                    <param name="timestamp" type="xs:date" required="false" default="" style="query" xmlns:xs="http://www.w3.org/2001/XMLSchema">
                      <doc xml:lang="en" title="timestamp Parameter">Timestamp to find most recent version of versions, specified in ISO8601 time format.</doc>
                    </param>
                  </request>
                  <response status="200">
                    <representation mediaType="application/json"/>
                  </response>
                  <response status="400">
                    <representation mediaType=""/>
                  </response>
                  <response status="401">
                    <representation mediaType=""/>
                  </response>
                  <response status="404">
                    <representation mediaType=""/>
                  </response>
                  <response status="500">
                    <representation mediaType=""/>
                  </response>
                </method>
              </resource>
              <method name="POST" id="post">
                <doc xml:lang="en" title="post">Append operation for versions</doc>
                <request>
                  <param name="recurse" type="xs:boolean" required="false" default="" style="query" xmlns:xs="http://www.w3.org/2001/XMLSchema">
                    <doc xml:lang="en" title="recurse Parameter">If true, finds all elements recursively based on containment hierarchy</doc>
                  </param>
                  <param name="recurseDepth" type="xs:integer" required="false" default="" style="query" xmlns:xs="http://www.w3.org/2001/XMLSchema">
                    <doc xml:lang="en" title="recurseDepth Parameter">Depth to recurse to. 0 specifies infinite recursion (e.g., until all leaf nodes are found).</doc>
                  </param>
                  <param name="search" type="xs:string" required="false" default="" style="query" xmlns:xs="http://www.w3.org/2001/XMLSchema">
                    <doc xml:lang="en" title="search Parameter">Regular expression of the search to be executed at the specified scope. Currently search is against sysml:id, sysml:name, sysml:documentation, sysml:body.</doc>
                  </param>
                  <param name="timestamp" type="xs:date" required="false" default="" style="query" xmlns:xs="http://www.w3.org/2001/XMLSchema">
                    <doc xml:lang="en" title="timestamp Parameter">Timestamp to find most recent version of versions, specified in ISO8601 time format.</doc>
                  </param>
                  <representation mediaType="application/json"/>
                </request>
                <response status="">
                  <representation mediaType="application/json"/>
                </response>
                <response status="200">
                  <representation mediaType="application/json"/>
                </response>
                <response status="202">
                  <representation mediaType=""/>
                </response>
                <response status="401">
                  <representation mediaType=""/>
                </response>
                <response status="404">
                  <representation mediaType=""/>
                </response>
                <response status="409">
                  <representation mediaType=""/>
                </response>
                <response status="500">
                  <representation mediaType=""/>
                </response>
              </method>
              <method name="PUT" id="put">
                <doc xml:lang="en" title="put">Create/update operation for versions</doc>
                <request>
                  <param name="recurse" type="xs:boolean" required="false" default="" style="query" xmlns:xs="http://www.w3.org/2001/XMLSchema">
                    <doc xml:lang="en" title="recurse Parameter">If true, finds all elements recursively based on containment hierarchy</doc>
                  </param>
                  <param name="recurseDepth" type="xs:integer" required="false" default="" style="query" xmlns:xs="http://www.w3.org/2001/XMLSchema">
                    <doc xml:lang="en" title="recurseDepth Parameter">Depth to recurse to. 0 specifies infinite recursion (e.g., until all leaf nodes are found).</doc>
                  </param>
                  <param name="search" type="xs:string" required="false" default="" style="query" xmlns:xs="http://www.w3.org/2001/XMLSchema">
                    <doc xml:lang="en" title="search Parameter">Regular expression of the search to be executed at the specified scope. Currently search is against sysml:id, sysml:name, sysml:documentation, sysml:body.</doc>
                  </param>
                  <param name="timestamp" type="xs:date" required="false" default="" style="query" xmlns:xs="http://www.w3.org/2001/XMLSchema">
                    <doc xml:lang="en" title="timestamp Parameter">Timestamp to find most recent version of versions, specified in ISO8601 time format.</doc>
                  </param>
                  <representation mediaType="application/json"/>
                </request>
                <response status="">
                  <representation mediaType="application/json"/>
                </response>
                <response status="200">
                  <representation mediaType="application/json"/>
                </response>
                <response status="201">
                  <representation mediaType=""/>
                </response>
                <response status="202">
                  <representation mediaType=""/>
                </response>
                <response status="401">
                  <representation mediaType=""/>
                </response>
                <response status="404">
                  <representation mediaType=""/>
                </response>
                <response status="409">
                  <representation mediaType=""/>
                </response>
                <response status="500">
                  <representation mediaType=""/>
                </response>
              </method>
              <method name="DELETE" id="delete">
                <doc xml:lang="en" title="delete">Delete operation for versions</doc>
                <request>
                  <param name="recurse" type="xs:boolean" required="false" default="" style="query" xmlns:xs="http://www.w3.org/2001/XMLSchema">
                    <doc xml:lang="en" title="recurse Parameter">If true, finds all elements recursively based on containment hierarchy</doc>
                  </param>
                  <param name="recurseDepth" type="xs:integer" required="false" default="" style="query" xmlns:xs="http://www.w3.org/2001/XMLSchema">
                    <doc xml:lang="en" title="recurseDepth Parameter">Depth to recurse to. 0 specifies infinite recursion (e.g., until all leaf nodes are found).</doc>
                  </param>
                  <param name="search" type="xs:string" required="false" default="" style="query" xmlns:xs="http://www.w3.org/2001/XMLSchema">
                    <doc xml:lang="en" title="search Parameter">Regular expression of the search to be executed at the specified scope. Currently search is against sysml:id, sysml:name, sysml:documentation, sysml:body.</doc>
                  </param>
                  <param name="timestamp" type="xs:date" required="false" default="" style="query" xmlns:xs="http://www.w3.org/2001/XMLSchema">
                    <doc xml:lang="en" title="timestamp Parameter">Timestamp to find most recent version of versions, specified in ISO8601 time format.</doc>
                  </param>
                </request>
                <response status="200">
                  <representation mediaType="application/json"/>
                </response>
                <response status="202">
                  <representation mediaType=""/>
                </response>
                <response status="401">
                  <representation mediaType=""/>
                </response>
                <response status="404">
                  <representation mediaType=""/>
                </response>
                <response status="500">
                  <representation mediaType=""/>
                </response>
              </method>
              <method name="GET" id="get">
                <doc xml:lang="en" title="get">Read operation for versions</doc>
                <request>
                  <param name="recurse" type="xs:boolean" required="false" default="" style="query" xmlns:xs="http://www.w3.org/2001/XMLSchema">
                    <doc xml:lang="en" title="recurse Parameter">If true, finds all elements recursively based on containment hierarchy</doc>
                  </param>
                  <param name="recurseDepth" type="xs:integer" required="false" default="" style="query" xmlns:xs="http://www.w3.org/2001/XMLSchema">
                    <doc xml:lang="en" title="recurseDepth Parameter">Depth to recurse to. 0 specifies infinite recursion (e.g., until all leaf nodes are found).</doc>
                  </param>
                  <param name="search" type="xs:string" required="false" default="" style="query" xmlns:xs="http://www.w3.org/2001/XMLSchema">
                    <doc xml:lang="en" title="search Parameter">Regular expression of the search to be executed at the specified scope. Currently search is against sysml:id, sysml:name, sysml:documentation, sysml:body.</doc>
                  </param>
                  <param name="timestamp" type="xs:date" required="false" default="" style="query" xmlns:xs="http://www.w3.org/2001/XMLSchema">
                    <doc xml:lang="en" title="timestamp Parameter">Timestamp to find most recent version of versions, specified in ISO8601 time format.</doc>
                  </param>
                </request>
                <response status="200">
                  <representation mediaType="application/json"/>
                </response>
                <response status="400">
                  <representation mediaType=""/>
                </response>
                <response status="401">
                  <representation mediaType=""/>
                </response>
                <response status="404">
                  <representation mediaType=""/>
                </response>
                <response status="500">
                  <representation mediaType=""/>
                </response>
              </method>
            </resource>
            <resource path="comments" id="/comments">
              <doc xml:lang="en" title="/comments">Create, Update, and Delete operations for comments</doc>
              <param name="workspaceId" type="xs:string" required="true" default="" style="template" xmlns:xs="http://www.w3.org/2001/XMLSchema"/>
              <param name="elementId" type="xs:string" required="true" default="" style="template" xmlns:xs="http://www.w3.org/2001/XMLSchema"/>
              <resource path="{commentId}" id="/{commentId}">
                <doc xml:lang="en" title="/{commentId}">Create, Update, and Delete operations for comments</doc>
                <param name="workspaceId" type="xs:string" required="true" default="" style="template" xmlns:xs="http://www.w3.org/2001/XMLSchema"/>
                <param name="elementId" type="xs:string" required="true" default="" style="template" xmlns:xs="http://www.w3.org/2001/XMLSchema"/>
                <param name="commentId" type="xs:string" required="true" default="" style="template" xmlns:xs="http://www.w3.org/2001/XMLSchema">
                  <doc xml:lang="en" title="commentId Parameter">Sysml ID for comment under consideration</doc>
                </param>
                <method name="POST" id="post">
                  <doc xml:lang="en" title="post">Append operation for comments</doc>
                  <request>
                    <param name="recurse" type="xs:boolean" required="false" default="" style="query" xmlns:xs="http://www.w3.org/2001/XMLSchema">
                      <doc xml:lang="en" title="recurse Parameter">If true, finds all elements recursively based on containment hierarchy</doc>
                    </param>
                    <param name="recurseDepth" type="xs:integer" required="false" default="" style="query" xmlns:xs="http://www.w3.org/2001/XMLSchema">
                      <doc xml:lang="en" title="recurseDepth Parameter">Depth to recurse to. 0 specifies infinite recursion (e.g., until all leaf nodes are found).</doc>
                    </param>
                    <param name="search" type="xs:string" required="false" default="" style="query" xmlns:xs="http://www.w3.org/2001/XMLSchema">
                      <doc xml:lang="en" title="search Parameter">Regular expression of the search to be executed at the specified scope. Currently search is against sysml:id, sysml:name, sysml:documentation, sysml:body.</doc>
                    </param>
                    <param name="timestamp" type="xs:date" required="false" default="" style="query" xmlns:xs="http://www.w3.org/2001/XMLSchema">
                      <doc xml:lang="en" title="timestamp Parameter">Timestamp to find most recent version of comments, specified in ISO8601 time format.</doc>
                    </param>
                    <representation mediaType="application/json"/>
                  </request>
                  <response status="">
                    <representation mediaType="application/json"/>
                  </response>
                  <response status="200">
                    <representation mediaType="application/json"/>
                  </response>
                  <response status="202">
                    <representation mediaType=""/>
                  </response>
                  <response status="401">
                    <representation mediaType=""/>
                  </response>
                  <response status="404">
                    <representation mediaType=""/>
                  </response>
                  <response status="409">
                    <representation mediaType=""/>
                  </response>
                  <response status="500">
                    <representation mediaType=""/>
                  </response>
                </method>
                <method name="PUT" id="put">
                  <doc xml:lang="en" title="put">Create/update operation for comments</doc>
                  <request>
                    <param name="recurse" type="xs:boolean" required="false" default="" style="query" xmlns:xs="http://www.w3.org/2001/XMLSchema">
                      <doc xml:lang="en" title="recurse Parameter">If true, finds all elements recursively based on containment hierarchy</doc>
                    </param>
                    <param name="recurseDepth" type="xs:integer" required="false" default="" style="query" xmlns:xs="http://www.w3.org/2001/XMLSchema">
                      <doc xml:lang="en" title="recurseDepth Parameter">Depth to recurse to. 0 specifies infinite recursion (e.g., until all leaf nodes are found).</doc>
                    </param>
                    <param name="search" type="xs:string" required="false" default="" style="query" xmlns:xs="http://www.w3.org/2001/XMLSchema">
                      <doc xml:lang="en" title="search Parameter">Regular expression of the search to be executed at the specified scope. Currently search is against sysml:id, sysml:name, sysml:documentation, sysml:body.</doc>
                    </param>
                    <param name="timestamp" type="xs:date" required="false" default="" style="query" xmlns:xs="http://www.w3.org/2001/XMLSchema">
                      <doc xml:lang="en" title="timestamp Parameter">Timestamp to find most recent version of comments, specified in ISO8601 time format.</doc>
                    </param>
                    <representation mediaType="application/json"/>
                  </request>
                  <response status="">
                    <representation mediaType="application/json"/>
                  </response>
                  <response status="200">
                    <representation mediaType="application/json"/>
                  </response>
                  <response status="201">
                    <representation mediaType=""/>
                  </response>
                  <response status="202">
                    <representation mediaType=""/>
                  </response>
                  <response status="401">
                    <representation mediaType=""/>
                  </response>
                  <response status="404">
                    <representation mediaType=""/>
                  </response>
                  <response status="409">
                    <representation mediaType=""/>
                  </response>
                  <response status="500">
                    <representation mediaType=""/>
                  </response>
                </method>
                <method name="DELETE" id="delete">
                  <doc xml:lang="en" title="delete">Delete operation for comments</doc>
                  <request>
                    <param name="recurse" type="xs:boolean" required="false" default="" style="query" xmlns:xs="http://www.w3.org/2001/XMLSchema">
                      <doc xml:lang="en" title="recurse Parameter">If true, finds all elements recursively based on containment hierarchy</doc>
                    </param>
                    <param name="recurseDepth" type="xs:integer" required="false" default="" style="query" xmlns:xs="http://www.w3.org/2001/XMLSchema">
                      <doc xml:lang="en" title="recurseDepth Parameter">Depth to recurse to. 0 specifies infinite recursion (e.g., until all leaf nodes are found).</doc>
                    </param>
                    <param name="search" type="xs:string" required="false" default="" style="query" xmlns:xs="http://www.w3.org/2001/XMLSchema">
                      <doc xml:lang="en" title="search Parameter">Regular expression of the search to be executed at the specified scope. Currently search is against sysml:id, sysml:name, sysml:documentation, sysml:body.</doc>
                    </param>
                    <param name="timestamp" type="xs:date" required="false" default="" style="query" xmlns:xs="http://www.w3.org/2001/XMLSchema">
                      <doc xml:lang="en" title="timestamp Parameter">Timestamp to find most recent version of comments, specified in ISO8601 time format.</doc>
                    </param>
                  </request>
                  <response status="200">
                    <representation mediaType="application/json"/>
                  </response>
                  <response status="202">
                    <representation mediaType=""/>
                  </response>
                  <response status="401">
                    <representation mediaType=""/>
                  </response>
                  <response status="404">
                    <representation mediaType=""/>
                  </response>
                  <response status="500">
                    <representation mediaType=""/>
                  </response>
                </method>
                <method name="GET" id="get">
                  <doc xml:lang="en" title="get">Read operation for comments</doc>
                  <request>
                    <param name="recurse" type="xs:boolean" required="false" default="" style="query" xmlns:xs="http://www.w3.org/2001/XMLSchema">
                      <doc xml:lang="en" title="recurse Parameter">If true, finds all elements recursively based on containment hierarchy</doc>
                    </param>
                    <param name="recurseDepth" type="xs:integer" required="false" default="" style="query" xmlns:xs="http://www.w3.org/2001/XMLSchema">
                      <doc xml:lang="en" title="recurseDepth Parameter">Depth to recurse to. 0 specifies infinite recursion (e.g., until all leaf nodes are found).</doc>
                    </param>
                    <param name="search" type="xs:string" required="false" default="" style="query" xmlns:xs="http://www.w3.org/2001/XMLSchema">
                      <doc xml:lang="en" title="search Parameter">Regular expression of the search to be executed at the specified scope. Currently search is against sysml:id, sysml:name, sysml:documentation, sysml:body.</doc>
                    </param>
                    <param name="timestamp" type="xs:date" required="false" default="" style="query" xmlns:xs="http://www.w3.org/2001/XMLSchema">
                      <doc xml:lang="en" title="timestamp Parameter">Timestamp to find most recent version of comments, specified in ISO8601 time format.</doc>
                    </param>
                  </request>
                  <response status="200">
                    <representation mediaType="application/json"/>
                  </response>
                  <response status="400">
                    <representation mediaType=""/>
                  </response>
                  <response status="401">
                    <representation mediaType=""/>
                  </response>
                  <response status="404">
                    <representation mediaType=""/>
                  </response>
                  <response status="500">
                    <representation mediaType=""/>
                  </response>
                </method>
              </resource>
              <method name="POST" id="post">
                <doc xml:lang="en" title="post">Append operation for comments</doc>
                <request>
                  <param name="recurse" type="xs:boolean" required="false" default="" style="query" xmlns:xs="http://www.w3.org/2001/XMLSchema">
                    <doc xml:lang="en" title="recurse Parameter">If true, finds all elements recursively based on containment hierarchy</doc>
                  </param>
                  <param name="recurseDepth" type="xs:integer" required="false" default="" style="query" xmlns:xs="http://www.w3.org/2001/XMLSchema">
                    <doc xml:lang="en" title="recurseDepth Parameter">Depth to recurse to. 0 specifies infinite recursion (e.g., until all leaf nodes are found).</doc>
                  </param>
                  <param name="search" type="xs:string" required="false" default="" style="query" xmlns:xs="http://www.w3.org/2001/XMLSchema">
                    <doc xml:lang="en" title="search Parameter">Regular expression of the search to be executed at the specified scope. Currently search is against sysml:id, sysml:name, sysml:documentation, sysml:body.</doc>
                  </param>
                  <param name="timestamp" type="xs:date" required="false" default="" style="query" xmlns:xs="http://www.w3.org/2001/XMLSchema">
                    <doc xml:lang="en" title="timestamp Parameter">Timestamp to find most recent version of comments, specified in ISO8601 time format.</doc>
                  </param>
                  <representation mediaType="application/json"/>
                </request>
                <response status="">
                  <representation mediaType="application/json"/>
                </response>
                <response status="200">
                  <representation mediaType="application/json"/>
                </response>
                <response status="202">
                  <representation mediaType=""/>
                </response>
                <response status="401">
                  <representation mediaType=""/>
                </response>
                <response status="404">
                  <representation mediaType=""/>
                </response>
                <response status="409">
                  <representation mediaType=""/>
                </response>
                <response status="500">
                  <representation mediaType=""/>
                </response>
              </method>
              <method name="PUT" id="put">
                <doc xml:lang="en" title="put">Create/update operation for comments</doc>
                <request>
                  <param name="recurse" type="xs:boolean" required="false" default="" style="query" xmlns:xs="http://www.w3.org/2001/XMLSchema">
                    <doc xml:lang="en" title="recurse Parameter">If true, finds all elements recursively based on containment hierarchy</doc>
                  </param>
                  <param name="recurseDepth" type="xs:integer" required="false" default="" style="query" xmlns:xs="http://www.w3.org/2001/XMLSchema">
                    <doc xml:lang="en" title="recurseDepth Parameter">Depth to recurse to. 0 specifies infinite recursion (e.g., until all leaf nodes are found).</doc>
                  </param>
                  <param name="search" type="xs:string" required="false" default="" style="query" xmlns:xs="http://www.w3.org/2001/XMLSchema">
                    <doc xml:lang="en" title="search Parameter">Regular expression of the search to be executed at the specified scope. Currently search is against sysml:id, sysml:name, sysml:documentation, sysml:body.</doc>
                  </param>
                  <param name="timestamp" type="xs:date" required="false" default="" style="query" xmlns:xs="http://www.w3.org/2001/XMLSchema">
                    <doc xml:lang="en" title="timestamp Parameter">Timestamp to find most recent version of comments, specified in ISO8601 time format.</doc>
                  </param>
                  <representation mediaType="application/json"/>
                </request>
                <response status="">
                  <representation mediaType="application/json"/>
                </response>
                <response status="200">
                  <representation mediaType="application/json"/>
                </response>
                <response status="201">
                  <representation mediaType=""/>
                </response>
                <response status="202">
                  <representation mediaType=""/>
                </response>
                <response status="401">
                  <representation mediaType=""/>
                </response>
                <response status="404">
                  <representation mediaType=""/>
                </response>
                <response status="409">
                  <representation mediaType=""/>
                </response>
                <response status="500">
                  <representation mediaType=""/>
                </response>
              </method>
              <method name="DELETE" id="delete">
                <doc xml:lang="en" title="delete">Delete operation for comments</doc>
                <request>
                  <param name="recurse" type="xs:boolean" required="false" default="" style="query" xmlns:xs="http://www.w3.org/2001/XMLSchema">
                    <doc xml:lang="en" title="recurse Parameter">If true, finds all elements recursively based on containment hierarchy</doc>
                  </param>
                  <param name="recurseDepth" type="xs:integer" required="false" default="" style="query" xmlns:xs="http://www.w3.org/2001/XMLSchema">
                    <doc xml:lang="en" title="recurseDepth Parameter">Depth to recurse to. 0 specifies infinite recursion (e.g., until all leaf nodes are found).</doc>
                  </param>
                  <param name="search" type="xs:string" required="false" default="" style="query" xmlns:xs="http://www.w3.org/2001/XMLSchema">
                    <doc xml:lang="en" title="search Parameter">Regular expression of the search to be executed at the specified scope. Currently search is against sysml:id, sysml:name, sysml:documentation, sysml:body.</doc>
                  </param>
                  <param name="timestamp" type="xs:date" required="false" default="" style="query" xmlns:xs="http://www.w3.org/2001/XMLSchema">
                    <doc xml:lang="en" title="timestamp Parameter">Timestamp to find most recent version of comments, specified in ISO8601 time format.</doc>
                  </param>
                </request>
                <response status="200">
                  <representation mediaType="application/json"/>
                </response>
                <response status="202">
                  <representation mediaType=""/>
                </response>
                <response status="401">
                  <representation mediaType=""/>
                </response>
                <response status="404">
                  <representation mediaType=""/>
                </response>
                <response status="500">
                  <representation mediaType=""/>
                </response>
              </method>
              <method name="GET" id="get">
                <doc xml:lang="en" title="get">Read operation for comments</doc>
                <request>
                  <param name="recurse" type="xs:boolean" required="false" default="" style="query" xmlns:xs="http://www.w3.org/2001/XMLSchema">
                    <doc xml:lang="en" title="recurse Parameter">If true, finds all elements recursively based on containment hierarchy</doc>
                  </param>
                  <param name="recurseDepth" type="xs:integer" required="false" default="" style="query" xmlns:xs="http://www.w3.org/2001/XMLSchema">
                    <doc xml:lang="en" title="recurseDepth Parameter">Depth to recurse to. 0 specifies infinite recursion (e.g., until all leaf nodes are found).</doc>
                  </param>
                  <param name="search" type="xs:string" required="false" default="" style="query" xmlns:xs="http://www.w3.org/2001/XMLSchema">
                    <doc xml:lang="en" title="search Parameter">Regular expression of the search to be executed at the specified scope. Currently search is against sysml:id, sysml:name, sysml:documentation, sysml:body.</doc>
                  </param>
                  <param name="timestamp" type="xs:date" required="false" default="" style="query" xmlns:xs="http://www.w3.org/2001/XMLSchema">
                    <doc xml:lang="en" title="timestamp Parameter">Timestamp to find most recent version of comments, specified in ISO8601 time format.</doc>
                  </param>
                </request>
                <response status="200">
                  <representation mediaType="application/json"/>
                </response>
                <response status="400">
                  <representation mediaType=""/>
                </response>
                <response status="401">
                  <representation mediaType=""/>
                </response>
                <response status="404">
                  <representation mediaType=""/>
                </response>
                <response status="500">
                  <representation mediaType=""/>
                </response>
              </method>
            </resource>
            <method name="POST" id="post">
              <doc xml:lang="en" title="post">Append operation for elements</doc>
              <request>
                <param name="recurse" type="xs:boolean" required="false" default="" style="query" xmlns:xs="http://www.w3.org/2001/XMLSchema">
                  <doc xml:lang="en" title="recurse Parameter">If true, finds all elements recursively based on containment hierarchy</doc>
                </param>
                <param name="recurseDepth" type="xs:integer" required="false" default="" style="query" xmlns:xs="http://www.w3.org/2001/XMLSchema">
                  <doc xml:lang="en" title="recurseDepth Parameter">Depth to recurse to. 0 specifies infinite recursion (e.g., until all leaf nodes are found).</doc>
                </param>
                <param name="search" type="xs:string" required="false" default="" style="query" xmlns:xs="http://www.w3.org/2001/XMLSchema">
                  <doc xml:lang="en" title="search Parameter">Regular expression of the search to be executed at the specified scope. Currently search is against sysml:id, sysml:name, sysml:documentation, sysml:body.</doc>
                </param>
                <param name="timestamp" type="xs:date" required="false" default="" style="query" xmlns:xs="http://www.w3.org/2001/XMLSchema">
                  <doc xml:lang="en" title="timestamp Parameter">Timestamp to find most recent version of elements, specified in ISO8601 time format.</doc>
                </param>
                <representation mediaType="application/json"/>
              </request>
              <response status="">
                <representation mediaType="application/json"/>
              </response>
              <response status="200">
                <representation mediaType="application/json"/>
              </response>
              <response status="202">
                <representation mediaType=""/>
              </response>
              <response status="401">
                <representation mediaType=""/>
              </response>
              <response status="404">
                <representation mediaType=""/>
              </response>
              <response status="409">
                <representation mediaType=""/>
              </response>
              <response status="500">
                <representation mediaType=""/>
              </response>
            </method>
            <method name="PUT" id="put">
              <doc xml:lang="en" title="put">Create/update operation for elements</doc>
              <request>
                <param name="recurse" type="xs:boolean" required="false" default="" style="query" xmlns:xs="http://www.w3.org/2001/XMLSchema">
                  <doc xml:lang="en" title="recurse Parameter">If true, finds all elements recursively based on containment hierarchy</doc>
                </param>
                <param name="recurseDepth" type="xs:integer" required="false" default="" style="query" xmlns:xs="http://www.w3.org/2001/XMLSchema">
                  <doc xml:lang="en" title="recurseDepth Parameter">Depth to recurse to. 0 specifies infinite recursion (e.g., until all leaf nodes are found).</doc>
                </param>
                <param name="search" type="xs:string" required="false" default="" style="query" xmlns:xs="http://www.w3.org/2001/XMLSchema">
                  <doc xml:lang="en" title="search Parameter">Regular expression of the search to be executed at the specified scope. Currently search is against sysml:id, sysml:name, sysml:documentation, sysml:body.</doc>
                </param>
                <param name="timestamp" type="xs:date" required="false" default="" style="query" xmlns:xs="http://www.w3.org/2001/XMLSchema">
                  <doc xml:lang="en" title="timestamp Parameter">Timestamp to find most recent version of elements, specified in ISO8601 time format.</doc>
                </param>
                <representation mediaType="application/json"/>
              </request>
              <response status="">
                <representation mediaType="application/json"/>
              </response>
              <response status="200">
                <representation mediaType="application/json"/>
              </response>
              <response status="201">
                <representation mediaType=""/>
              </response>
              <response status="202">
                <representation mediaType=""/>
              </response>
              <response status="401">
                <representation mediaType=""/>
              </response>
              <response status="404">
                <representation mediaType=""/>
              </response>
              <response status="409">
                <representation mediaType=""/>
              </response>
              <response status="500">
                <representation mediaType=""/>
              </response>
            </method>
            <method name="DELETE" id="delete">
              <doc xml:lang="en" title="delete">Delete operation for elements</doc>
              <request>
                <param name="recurse" type="xs:boolean" required="false" default="" style="query" xmlns:xs="http://www.w3.org/2001/XMLSchema">
                  <doc xml:lang="en" title="recurse Parameter">If true, finds all elements recursively based on containment hierarchy</doc>
                </param>
                <param name="recurseDepth" type="xs:integer" required="false" default="" style="query" xmlns:xs="http://www.w3.org/2001/XMLSchema">
                  <doc xml:lang="en" title="recurseDepth Parameter">Depth to recurse to. 0 specifies infinite recursion (e.g., until all leaf nodes are found).</doc>
                </param>
                <param name="search" type="xs:string" required="false" default="" style="query" xmlns:xs="http://www.w3.org/2001/XMLSchema">
                  <doc xml:lang="en" title="search Parameter">Regular expression of the search to be executed at the specified scope. Currently search is against sysml:id, sysml:name, sysml:documentation, sysml:body.</doc>
                </param>
                <param name="timestamp" type="xs:date" required="false" default="" style="query" xmlns:xs="http://www.w3.org/2001/XMLSchema">
                  <doc xml:lang="en" title="timestamp Parameter">Timestamp to find most recent version of elements, specified in ISO8601 time format.</doc>
                </param>
              </request>
              <response status="200">
                <representation mediaType="application/json"/>
              </response>
              <response status="202">
                <representation mediaType=""/>
              </response>
              <response status="401">
                <representation mediaType=""/>
              </response>
              <response status="404">
                <representation mediaType=""/>
              </response>
              <response status="500">
                <representation mediaType=""/>
              </response>
            </method>
            <method name="GET" id="get">
              <doc xml:lang="en" title="get">Read operation for elements</doc>
              <request>
                <param name="recurse" type="xs:boolean" required="false" default="" style="query" xmlns:xs="http://www.w3.org/2001/XMLSchema">
                  <doc xml:lang="en" title="recurse Parameter">If true, finds all elements recursively based on containment hierarchy</doc>
                </param>
                <param name="recurseDepth" type="xs:integer" required="false" default="" style="query" xmlns:xs="http://www.w3.org/2001/XMLSchema">
                  <doc xml:lang="en" title="recurseDepth Parameter">Depth to recurse to. 0 specifies infinite recursion (e.g., until all leaf nodes are found).</doc>
                </param>
                <param name="search" type="xs:string" required="false" default="" style="query" xmlns:xs="http://www.w3.org/2001/XMLSchema">
                  <doc xml:lang="en" title="search Parameter">Regular expression of the search to be executed at the specified scope. Currently search is against sysml:id, sysml:name, sysml:documentation, sysml:body.</doc>
                </param>
                <param name="timestamp" type="xs:date" required="false" default="" style="query" xmlns:xs="http://www.w3.org/2001/XMLSchema">
                  <doc xml:lang="en" title="timestamp Parameter">Timestamp to find most recent version of elements, specified in ISO8601 time format.</doc>
                </param>
              </request>
              <response status="200">
                <representation mediaType="application/json"/>
              </response>
              <response status="400">
                <representation mediaType=""/>
              </response>
              <response status="401">
                <representation mediaType=""/>
              </response>
              <response status="404">
                <representation mediaType=""/>
              </response>
              <response status="500">
                <representation mediaType=""/>
              </response>
            </method>
          </resource>
          <method name="POST" id="post">
            <doc xml:lang="en" title="post">Append operation for elements</doc>
            <request>
              <param name="recurse" type="xs:boolean" required="false" default="" style="query" xmlns:xs="http://www.w3.org/2001/XMLSchema">
                <doc xml:lang="en" title="recurse Parameter">If true, finds all elements recursively based on containment hierarchy</doc>
              </param>
              <param name="recurseDepth" type="xs:integer" required="false" default="" style="query" xmlns:xs="http://www.w3.org/2001/XMLSchema">
                <doc xml:lang="en" title="recurseDepth Parameter">Depth to recurse to. 0 specifies infinite recursion (e.g., until all leaf nodes are found).</doc>
              </param>
              <param name="search" type="xs:string" required="false" default="" style="query" xmlns:xs="http://www.w3.org/2001/XMLSchema">
                <doc xml:lang="en" title="search Parameter">Regular expression of the search to be executed at the specified scope. Currently search is against sysml:id, sysml:name, sysml:documentation, sysml:body.</doc>
              </param>
              <param name="timestamp" type="xs:date" required="false" default="" style="query" xmlns:xs="http://www.w3.org/2001/XMLSchema">
                <doc xml:lang="en" title="timestamp Parameter">Timestamp to find most recent version of elements, specified in ISO8601 time format.</doc>
              </param>
              <param name="background" type="xs:boolean" required="false" default="" style="query" xmlns:xs="http://www.w3.org/2001/XMLSchema">
                <doc xml:lang="en" title="background Parameter">Runs create/update in the asynchronously in the background if true, or synchronously if false or not specified</doc>
              </param>
              <representation mediaType="application/json"/>
            </request>
            <response status="">
              <representation mediaType="application/json"/>
            </response>
            <response status="200">
              <representation mediaType="application/json"/>
            </response>
            <response status="202">
              <representation mediaType=""/>
            </response>
            <response status="401">
              <representation mediaType=""/>
            </response>
            <response status="404">
              <representation mediaType=""/>
            </response>
            <response status="409">
              <representation mediaType=""/>
            </response>
            <response status="500">
              <representation mediaType=""/>
            </response>
          </method>
          <method name="PUT" id="put">
            <doc xml:lang="en" title="put">Create/update operation for elements</doc>
            <request>
              <param name="recurse" type="xs:boolean" required="false" default="" style="query" xmlns:xs="http://www.w3.org/2001/XMLSchema">
                <doc xml:lang="en" title="recurse Parameter">If true, finds all elements recursively based on containment hierarchy</doc>
              </param>
              <param name="recurseDepth" type="xs:integer" required="false" default="" style="query" xmlns:xs="http://www.w3.org/2001/XMLSchema">
                <doc xml:lang="en" title="recurseDepth Parameter">Depth to recurse to. 0 specifies infinite recursion (e.g., until all leaf nodes are found).</doc>
              </param>
              <param name="search" type="xs:string" required="false" default="" style="query" xmlns:xs="http://www.w3.org/2001/XMLSchema">
                <doc xml:lang="en" title="search Parameter">Regular expression of the search to be executed at the specified scope. Currently search is against sysml:id, sysml:name, sysml:documentation, sysml:body.</doc>
              </param>
              <param name="timestamp" type="xs:date" required="false" default="" style="query" xmlns:xs="http://www.w3.org/2001/XMLSchema">
                <doc xml:lang="en" title="timestamp Parameter">Timestamp to find most recent version of elements, specified in ISO8601 time format.</doc>
              </param>
              <param name="background" type="xs:boolean" required="false" default="" style="query" xmlns:xs="http://www.w3.org/2001/XMLSchema">
                <doc xml:lang="en" title="background Parameter">Runs create/update in the asynchronously in the background if true, or synchronously if false or not specified</doc>
              </param>
              <representation mediaType="application/json"/>
            </request>
            <response status="">
              <representation mediaType="application/json"/>
            </response>
            <response status="200">
              <representation mediaType="application/json"/>
            </response>
            <response status="201">
              <representation mediaType=""/>
            </response>
            <response status="202">
              <representation mediaType=""/>
            </response>
            <response status="401">
              <representation mediaType=""/>
            </response>
            <response status="404">
              <representation mediaType=""/>
            </response>
            <response status="409">
              <representation mediaType=""/>
            </response>
            <response status="500">
              <representation mediaType=""/>
            </response>
          </method>
          <method name="DELETE" id="delete">
            <doc xml:lang="en" title="delete">Delete operation for elements</doc>
            <request>
              <param name="recurse" type="xs:boolean" required="false" default="" style="query" xmlns:xs="http://www.w3.org/2001/XMLSchema">
                <doc xml:lang="en" title="recurse Parameter">If true, finds all elements recursively based on containment hierarchy</doc>
              </param>
              <param name="recurseDepth" type="xs:integer" required="false" default="" style="query" xmlns:xs="http://www.w3.org/2001/XMLSchema">
                <doc xml:lang="en" title="recurseDepth Parameter">Depth to recurse to. 0 specifies infinite recursion (e.g., until all leaf nodes are found).</doc>
              </param>
              <param name="search" type="xs:string" required="false" default="" style="query" xmlns:xs="http://www.w3.org/2001/XMLSchema">
                <doc xml:lang="en" title="search Parameter">Regular expression of the search to be executed at the specified scope. Currently search is against sysml:id, sysml:name, sysml:documentation, sysml:body.</doc>
              </param>
              <param name="timestamp" type="xs:date" required="false" default="" style="query" xmlns:xs="http://www.w3.org/2001/XMLSchema">
                <doc xml:lang="en" title="timestamp Parameter">Timestamp to find most recent version of elements, specified in ISO8601 time format.</doc>
              </param>
              <param name="background" type="xs:boolean" required="false" default="" style="query" xmlns:xs="http://www.w3.org/2001/XMLSchema">
                <doc xml:lang="en" title="background Parameter">Runs create/update in the asynchronously in the background if true, or synchronously if false or not specified</doc>
              </param>
            </request>
            <response status="200">
              <representation mediaType="application/json"/>
            </response>
            <response status="202">
              <representation mediaType=""/>
            </response>
            <response status="401">
              <representation mediaType=""/>
            </response>
            <response status="404">
              <representation mediaType=""/>
            </response>
            <response status="500">
              <representation mediaType=""/>
            </response>
          </method>
          <method name="GET" id="get">
            <doc xml:lang="en" title="get">Read operation for elements</doc>
            <request>
              <param name="recurse" type="xs:boolean" required="false" default="" style="query" xmlns:xs="http://www.w3.org/2001/XMLSchema">
                <doc xml:lang="en" title="recurse Parameter">If true, finds all elements recursively based on containment hierarchy</doc>
              </param>
              <param name="recurseDepth" type="xs:integer" required="false" default="" style="query" xmlns:xs="http://www.w3.org/2001/XMLSchema">
                <doc xml:lang="en" title="recurseDepth Parameter">Depth to recurse to. 0 specifies infinite recursion (e.g., until all leaf nodes are found).</doc>
              </param>
              <param name="search" type="xs:string" required="false" default="" style="query" xmlns:xs="http://www.w3.org/2001/XMLSchema">
                <doc xml:lang="en" title="search Parameter">Regular expression of the search to be executed at the specified scope. Currently search is against sysml:id, sysml:name, sysml:documentation, sysml:body.</doc>
              </param>
              <param name="timestamp" type="xs:date" required="false" default="" style="query" xmlns:xs="http://www.w3.org/2001/XMLSchema">
                <doc xml:lang="en" title="timestamp Parameter">Timestamp to find most recent version of elements, specified in ISO8601 time format.</doc>
              </param>
            </request>
            <response status="200">
              <representation mediaType="application/json"/>
            </response>
            <response status="400">
              <representation mediaType=""/>
            </response>
            <response status="401">
              <representation mediaType=""/>
            </response>
            <response status="404">
              <representation mediaType=""/>
            </response>
            <response status="500">
              <representation mediaType=""/>
            </response>
          </method>
        </resource>
      </resource>
    </resource>
  </resources>
</application>]]></con:content><con:type>http://wadl.dev.java.net/2009/02</con:type></con:part></con:definitionCache><con:endpoints><con:endpoint>http://127.0.0.1:8080/</con:endpoint><con:endpoint>http://128.149.16.140:8080</con:endpoint><con:endpoint>http://ems.jpls.nasa.gov</con:endpoint></con:endpoints><con:resource name="/workspaces" path="javawebscripts/"><con:settings/><con:parameters/><con:resource name="/{workspaceId}" path="sites"><con:settings/><con:parameters><con:parameter required="true"><con:name>workspaceId</con:name><con:value/><con:style>TEMPLATE</con:style><con:default/></con:parameter></con:parameters><con:resource name="/artifacts" path="artifacts"><con:settings/><con:parameters><con:parameter required="true"><con:name>workspaceId</con:name><con:value/><con:style>TEMPLATE</con:style><con:default/></con:parameter></con:parameters></con:resource><con:resource name="/sites" path="{siteId}"><con:settings/><con:parameters><con:parameter required="true"><con:name>workspaceId</con:name><con:value/><con:style>TEMPLATE</con:style><con:default/></con:parameter></con:parameters><con:resource name="/{siteId}" path="projects"><con:settings/><con:parameters><con:parameter required="true"><con:name>workspaceId</con:name><con:value/><con:style>TEMPLATE</con:style><con:default/></con:parameter><con:parameter required="true"><con:name>siteId</con:name><con:value/><con:style>TEMPLATE</con:style><con:default/></con:parameter></con:parameters><con:resource name="/projects" path="{projectId}"><con:settings/><con:parameters><con:parameter required="true"><con:name>workspaceId</con:name><con:value/><con:style>TEMPLATE</con:style><con:default/></con:parameter><con:parameter required="true"><con:name>siteId</con:name><con:value/><con:style>TEMPLATE</con:style><con:default/></con:parameter></con:parameters><con:resource name="/{projectId}" path=""><con:settings/><con:parameters><con:parameter required="true"><con:name>workspaceId</con:name><con:value/><con:style>TEMPLATE</con:style><con:default/></con:parameter><con:parameter required="true"><con:name>siteId</con:name><con:value/><con:style>TEMPLATE</con:style><con:default/></con:parameter><con:parameter required="true"><con:name>projectId</con:name><con:value/><con:style>TEMPLATE</con:style><con:default/></con:parameter></con:parameters><con:method name="get" method="GET"><con:settings/><con:parameters><con:parameter><con:name>recurse</con:name><con:value/><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:boolean</con:type><con:default/></con:parameter><con:parameter><con:name>recurseDepth</con:name><con:value/><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:integer</con:type><con:default/></con:parameter><con:parameter><con:name>search</con:name><con:value/><con:style>QUERY</con:style><con:default/></con:parameter><con:parameter><con:name>timestamp</con:name><con:value/><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:date</con:type><con:default/></con:parameter></con:parameters><con:representation type="RESPONSE" id=""><con:mediaType>application/json</con:mediaType><con:status>200</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType/><con:status>400</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType/><con:status>401</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType/><con:status>404</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType/><con:status>500</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:request name="Request 1" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://128.149.16.140:8080</con:endpoint><con:request/><con:originalUri>http://128.149.16.140/alfresco/service/javawebscripts/sites/europa/projects/123456</con:originalUri><con:credentials><con:username>admin</con:username><con:password>admin</con:password><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="siteId" value="europa"/>
  <con:entry key="projectId" value="123456"/>
</con:parameters></con:request></con:method></con:resource><con:method name="get" method="GET"><con:settings/><con:parameters><con:parameter><con:name>recurse</con:name><con:value/><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:boolean</con:type><con:default/></con:parameter><con:parameter><con:name>recurseDepth</con:name><con:value/><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:integer</con:type><con:default/></con:parameter><con:parameter><con:name>search</con:name><con:value/><con:style>QUERY</con:style><con:default/></con:parameter><con:parameter><con:name>timestamp</con:name><con:value/><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:date</con:type><con:default/></con:parameter></con:parameters><con:representation type="RESPONSE" id=""><con:mediaType>application/json</con:mediaType><con:status>200</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType/><con:status>400</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType/><con:status>401</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType/><con:status>404</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType/><con:status>500</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:request name="Request 1" mediaType="application/json"><con:settings/><con:endpoint>https://europaems</con:endpoint><con:request/><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource><con:resource name="/products" path="products"><con:settings/><con:parameters><con:parameter required="true"><con:name>workspaceId</con:name><con:value/><con:style>TEMPLATE</con:style><con:default/></con:parameter><con:parameter required="true"><con:name>siteId</con:name><con:value/><con:style>TEMPLATE</con:style><con:default/></con:parameter></con:parameters><con:resource name="/{productId}" path="{productId}"><con:settings/><con:parameters><con:parameter required="true"><con:name>workspaceId</con:name><con:value/><con:style>TEMPLATE</con:style><con:default/></con:parameter><con:parameter required="true"><con:name>siteId</con:name><con:value/><con:style>TEMPLATE</con:style><con:default/></con:parameter><con:parameter required="true"><con:name>productId</con:name><con:value/><con:style>TEMPLATE</con:style><con:default/></con:parameter></con:parameters><con:resource name="/snapshots" path="snapshots"><con:settings/><con:parameters><con:parameter required="true"><con:name>workspaceId</con:name><con:value/><con:style>TEMPLATE</con:style><con:default/></con:parameter><con:parameter required="true"><con:name>siteId</con:name><con:value/><con:style>TEMPLATE</con:style><con:default/></con:parameter><con:parameter required="true"><con:name>productId</con:name><con:value/><con:style>TEMPLATE</con:style><con:default/></con:parameter></con:parameters><con:resource name="/{snapshotId}" path="{snapshotId}"><con:settings/><con:parameters><con:parameter required="true"><con:name>workspaceId</con:name><con:value/><con:style>TEMPLATE</con:style><con:default/></con:parameter><con:parameter required="true"><con:name>siteId</con:name><con:value/><con:style>TEMPLATE</con:style><con:default/></con:parameter><con:parameter required="true"><con:name>productId</con:name><con:value/><con:style>TEMPLATE</con:style><con:default/></con:parameter><con:parameter required="true"><con:name>snapshotId</con:name><con:value/><con:style>TEMPLATE</con:style><con:default/></con:parameter></con:parameters><con:method name="post" method="POST"><con:settings/><con:parameters><con:parameter><con:name>recurse</con:name><con:value/><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:boolean</con:type><con:default/></con:parameter><con:parameter><con:name>recurseDepth</con:name><con:value/><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:integer</con:type><con:default/></con:parameter><con:parameter><con:name>search</con:name><con:value/><con:style>QUERY</con:style><con:default/></con:parameter><con:parameter><con:name>timestamp</con:name><con:value/><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:date</con:type><con:default/></con:parameter></con:parameters><con:representation type="REQUEST" id=""><con:mediaType>application/json</con:mediaType><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/json</con:mediaType><con:status/><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/json</con:mediaType><con:status>200</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>202</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType/><con:status>401</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType/><con:status>404</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType/><con:status>409</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType/><con:status>500</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:request name="Request 1" mediaType="application/json"><con:settings/><con:endpoint>https://europaems</con:endpoint><con:parameters/></con:request></con:method><con:method name="put" method="PUT"><con:settings/><con:parameters><con:parameter><con:name>recurse</con:name><con:value/><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:boolean</con:type><con:default/></con:parameter><con:parameter><con:name>recurseDepth</con:name><con:value/><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:integer</con:type><con:default/></con:parameter><con:parameter><con:name>search</con:name><con:value/><con:style>QUERY</con:style><con:default/></con:parameter><con:parameter><con:name>timestamp</con:name><con:value/><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:date</con:type><con:default/></con:parameter></con:parameters><con:representation type="REQUEST" id=""><con:mediaType>application/json</con:mediaType><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/json</con:mediaType><con:status/><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/json</con:mediaType><con:status>200</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>201</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>202</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType/><con:status>401</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType/><con:status>404</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType/><con:status>409</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType/><con:status>500</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:request name="Request 1" mediaType="application/json"><con:settings/><con:endpoint>https://europaems</con:endpoint><con:parameters/></con:request></con:method><con:method name="delete" method="DELETE"><con:settings/><con:parameters><con:parameter><con:name>recurse</con:name><con:value/><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:boolean</con:type><con:default/></con:parameter><con:parameter><con:name>recurseDepth</con:name><con:value/><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:integer</con:type><con:default/></con:parameter><con:parameter><con:name>search</con:name><con:value/><con:style>QUERY</con:style><con:default/></con:parameter><con:parameter><con:name>timestamp</con:name><con:value/><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:date</con:type><con:default/></con:parameter></con:parameters><con:representation type="RESPONSE" id=""><con:mediaType>application/json</con:mediaType><con:status>200</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>202</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType/><con:status>401</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType/><con:status>404</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType/><con:status>500</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:request name="Request 1" mediaType="application/json"><con:settings/><con:endpoint>https://europaems</con:endpoint><con:parameters/></con:request></con:method><con:method name="get" method="GET"><con:settings/><con:parameters><con:parameter><con:name>recurse</con:name><con:value/><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:boolean</con:type><con:default/></con:parameter><con:parameter><con:name>recurseDepth</con:name><con:value/><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:integer</con:type><con:default/></con:parameter><con:parameter><con:name>search</con:name><con:value/><con:style>QUERY</con:style><con:default/></con:parameter><con:parameter><con:name>timestamp</con:name><con:value/><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:date</con:type><con:default/></con:parameter></con:parameters><con:representation type="RESPONSE" id=""><con:mediaType>application/json</con:mediaType><con:status>200</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType/><con:status>400</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType/><con:status>401</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType/><con:status>404</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType/><con:status>500</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:request name="Request 1" mediaType="application/json"><con:settings/><con:endpoint>https://europaems</con:endpoint><con:parameters/></con:request></con:method></con:resource><con:method name="post" method="POST"><con:settings/><con:parameters><con:parameter><con:name>recurse</con:name><con:value/><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:boolean</con:type><con:default/></con:parameter><con:parameter><con:name>recurseDepth</con:name><con:value/><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:integer</con:type><con:default/></con:parameter><con:parameter><con:name>search</con:name><con:value/><con:style>QUERY</con:style><con:default/></con:parameter><con:parameter><con:name>timestamp</con:name><con:value/><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:date</con:type><con:default/></con:parameter></con:parameters><con:representation type="REQUEST" id=""><con:mediaType>application/json</con:mediaType><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/json</con:mediaType><con:status/><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/json</con:mediaType><con:status>200</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>202</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType/><con:status>401</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType/><con:status>404</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType/><con:status>409</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType/><con:status>500</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:request name="Request 1" mediaType="application/json"><con:settings/><con:endpoint>https://europaems</con:endpoint><con:parameters/></con:request></con:method><con:method name="put" method="PUT"><con:settings/><con:parameters><con:parameter><con:name>recurse</con:name><con:value/><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:boolean</con:type><con:default/></con:parameter><con:parameter><con:name>recurseDepth</con:name><con:value/><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:integer</con:type><con:default/></con:parameter><con:parameter><con:name>search</con:name><con:value/><con:style>QUERY</con:style><con:default/></con:parameter><con:parameter><con:name>timestamp</con:name><con:value/><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:date</con:type><con:default/></con:parameter></con:parameters><con:representation type="REQUEST" id=""><con:mediaType>application/json</con:mediaType><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/json</con:mediaType><con:status/><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/json</con:mediaType><con:status>200</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>201</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>202</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType/><con:status>401</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType/><con:status>404</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType/><con:status>409</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType/><con:status>500</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:request name="Request 1" mediaType="application/json"><con:settings/><con:endpoint>https://europaems</con:endpoint><con:parameters/></con:request></con:method><con:method name="delete" method="DELETE"><con:settings/><con:parameters><con:parameter><con:name>recurse</con:name><con:value/><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:boolean</con:type><con:default/></con:parameter><con:parameter><con:name>recurseDepth</con:name><con:value/><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:integer</con:type><con:default/></con:parameter><con:parameter><con:name>search</con:name><con:value/><con:style>QUERY</con:style><con:default/></con:parameter><con:parameter><con:name>timestamp</con:name><con:value/><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:date</con:type><con:default/></con:parameter></con:parameters><con:representation type="RESPONSE" id=""><con:mediaType>application/json</con:mediaType><con:status>200</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>202</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType/><con:status>401</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType/><con:status>404</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType/><con:status>500</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:request name="Request 1" mediaType="application/json"><con:settings/><con:endpoint>https://europaems</con:endpoint><con:parameters/></con:request></con:method><con:method name="get" method="GET"><con:settings/><con:parameters><con:parameter><con:name>recurse</con:name><con:value/><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:boolean</con:type><con:default/></con:parameter><con:parameter><con:name>recurseDepth</con:name><con:value/><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:integer</con:type><con:default/></con:parameter><con:parameter><con:name>search</con:name><con:value/><con:style>QUERY</con:style><con:default/></con:parameter><con:parameter><con:name>timestamp</con:name><con:value/><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:date</con:type><con:default/></con:parameter></con:parameters><con:representation type="RESPONSE" id=""><con:mediaType>application/json</con:mediaType><con:status>200</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType/><con:status>400</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType/><con:status>401</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType/><con:status>404</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType/><con:status>500</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:request name="Request 1" mediaType="application/json"><con:settings/><con:endpoint>https://europaems</con:endpoint><con:parameters/></con:request></con:method></con:resource><con:method name="post" method="POST"><con:settings/><con:parameters><con:parameter><con:name>recurse</con:name><con:value/><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:boolean</con:type><con:default/></con:parameter><con:parameter><con:name>recurseDepth</con:name><con:value/><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:integer</con:type><con:default/></con:parameter><con:parameter><con:name>search</con:name><con:value/><con:style>QUERY</con:style><con:default/></con:parameter><con:parameter><con:name>timestamp</con:name><con:value/><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:date</con:type><con:default/></con:parameter></con:parameters><con:representation type="REQUEST" id=""><con:mediaType>application/json</con:mediaType><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/json</con:mediaType><con:status/><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/json</con:mediaType><con:status>200</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>202</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType/><con:status>401</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType/><con:status>404</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType/><con:status>409</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType/><con:status>500</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:request name="Request 1" mediaType="application/json"><con:settings/><con:endpoint>https://europaems</con:endpoint><con:parameters/></con:request></con:method><con:method name="put" method="PUT"><con:settings/><con:parameters><con:parameter><con:name>recurse</con:name><con:value/><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:boolean</con:type><con:default/></con:parameter><con:parameter><con:name>recurseDepth</con:name><con:value/><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:integer</con:type><con:default/></con:parameter><con:parameter><con:name>search</con:name><con:value/><con:style>QUERY</con:style><con:default/></con:parameter><con:parameter><con:name>timestamp</con:name><con:value/><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:date</con:type><con:default/></con:parameter></con:parameters><con:representation type="REQUEST" id=""><con:mediaType>application/json</con:mediaType><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/json</con:mediaType><con:status/><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/json</con:mediaType><con:status>200</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>201</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>202</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType/><con:status>401</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType/><con:status>404</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType/><con:status>409</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType/><con:status>500</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:request name="Request 1" mediaType="application/json"><con:settings/><con:endpoint>https://europaems</con:endpoint><con:parameters/></con:request></con:method><con:method name="delete" method="DELETE"><con:settings/><con:parameters><con:parameter><con:name>recurse</con:name><con:value/><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:boolean</con:type><con:default/></con:parameter><con:parameter><con:name>recurseDepth</con:name><con:value/><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:integer</con:type><con:default/></con:parameter><con:parameter><con:name>search</con:name><con:value/><con:style>QUERY</con:style><con:default/></con:parameter><con:parameter><con:name>timestamp</con:name><con:value/><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:date</con:type><con:default/></con:parameter></con:parameters><con:representation type="RESPONSE" id=""><con:mediaType>application/json</con:mediaType><con:status>200</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>202</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType/><con:status>401</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType/><con:status>404</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType/><con:status>500</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:request name="Request 1" mediaType="application/json"><con:settings/><con:endpoint>https://europaems</con:endpoint><con:parameters/></con:request></con:method><con:method name="get" method="GET"><con:settings/><con:parameters><con:parameter><con:name>recurse</con:name><con:value/><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:boolean</con:type><con:default/></con:parameter><con:parameter><con:name>recurseDepth</con:name><con:value/><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:integer</con:type><con:default/></con:parameter><con:parameter><con:name>search</con:name><con:value/><con:style>QUERY</con:style><con:default/></con:parameter><con:parameter><con:name>timestamp</con:name><con:value/><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:date</con:type><con:default/></con:parameter></con:parameters><con:representation type="RESPONSE" id=""><con:mediaType>application/json</con:mediaType><con:status>200</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType/><con:status>400</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType/><con:status>401</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType/><con:status>404</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType/><con:status>500</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:request name="Request 1" mediaType="application/json"><con:settings/><con:endpoint>https://europaems</con:endpoint><con:parameters/></con:request></con:method></con:resource><con:method name="post" method="POST"><con:settings/><con:parameters><con:parameter><con:name>recurse</con:name><con:value/><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:boolean</con:type><con:default/></con:parameter><con:parameter><con:name>recurseDepth</con:name><con:value/><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:integer</con:type><con:default/></con:parameter><con:parameter><con:name>search</con:name><con:value/><con:style>QUERY</con:style><con:default/></con:parameter><con:parameter><con:name>timestamp</con:name><con:value/><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:date</con:type><con:default/></con:parameter></con:parameters><con:representation type="REQUEST" id=""><con:mediaType>application/json</con:mediaType><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/json</con:mediaType><con:status/><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/json</con:mediaType><con:status>200</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>202</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType/><con:status>401</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType/><con:status>404</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType/><con:status>409</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType/><con:status>500</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:request name="Request 1" mediaType="application/json"><con:settings/><con:endpoint>https://europaems</con:endpoint><con:parameters/></con:request></con:method><con:method name="put" method="PUT"><con:settings/><con:parameters><con:parameter><con:name>recurse</con:name><con:value/><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:boolean</con:type><con:default/></con:parameter><con:parameter><con:name>recurseDepth</con:name><con:value/><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:integer</con:type><con:default/></con:parameter><con:parameter><con:name>search</con:name><con:value/><con:style>QUERY</con:style><con:default/></con:parameter><con:parameter><con:name>timestamp</con:name><con:value/><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:date</con:type><con:default/></con:parameter></con:parameters><con:representation type="REQUEST" id=""><con:mediaType>application/json</con:mediaType><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/json</con:mediaType><con:status/><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/json</con:mediaType><con:status>200</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>201</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>202</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType/><con:status>401</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType/><con:status>404</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType/><con:status>409</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType/><con:status>500</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:request name="Request 1" mediaType="application/json"><con:settings/><con:endpoint>https://europaems</con:endpoint><con:parameters/></con:request></con:method><con:method name="delete" method="DELETE"><con:settings/><con:parameters><con:parameter><con:name>recurse</con:name><con:value/><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:boolean</con:type><con:default/></con:parameter><con:parameter><con:name>recurseDepth</con:name><con:value/><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:integer</con:type><con:default/></con:parameter><con:parameter><con:name>search</con:name><con:value/><con:style>QUERY</con:style><con:default/></con:parameter><con:parameter><con:name>timestamp</con:name><con:value/><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:date</con:type><con:default/></con:parameter></con:parameters><con:representation type="RESPONSE" id=""><con:mediaType>application/json</con:mediaType><con:status>200</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>202</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType/><con:status>401</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType/><con:status>404</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType/><con:status>500</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:request name="Request 1" mediaType="application/json"><con:settings/><con:endpoint>https://europaems</con:endpoint><con:parameters/></con:request></con:method><con:method name="get" method="GET"><con:settings/><con:parameters><con:parameter><con:name>recurse</con:name><con:value/><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:boolean</con:type><con:default/></con:parameter><con:parameter><con:name>recurseDepth</con:name><con:value/><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:integer</con:type><con:default/></con:parameter><con:parameter><con:name>search</con:name><con:value/><con:style>QUERY</con:style><con:default/></con:parameter><con:parameter><con:name>timestamp</con:name><con:value/><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:date</con:type><con:default/></con:parameter></con:parameters><con:representation type="RESPONSE" id=""><con:mediaType>application/json</con:mediaType><con:status>200</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType/><con:status>400</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType/><con:status>401</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType/><con:status>404</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType/><con:status>500</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:request name="Request 1" mediaType="application/json"><con:settings/><con:endpoint>https://europaems</con:endpoint><con:parameters/></con:request></con:method></con:resource></con:resource><con:method name="get" method="GET"><con:settings/><con:parameters><con:parameter><con:name>recurse</con:name><con:value/><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:boolean</con:type><con:default/></con:parameter><con:parameter><con:name>recurseDepth</con:name><con:value/><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:integer</con:type><con:default/></con:parameter><con:parameter><con:name>search</con:name><con:value/><con:style>QUERY</con:style><con:default/></con:parameter><con:parameter><con:name>timestamp</con:name><con:value/><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:date</con:type><con:default/></con:parameter></con:parameters><con:representation type="RESPONSE" id=""><con:mediaType>application/json</con:mediaType><con:status>200</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType/><con:status>400</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType/><con:status>401</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType/><con:status>404</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType/><con:status>500</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:request name="Request 1" mediaType="application/json"><con:settings/><con:endpoint>https://europaems</con:endpoint><con:parameters/></con:request></con:method></con:resource><con:resource name="/views" path="views"><con:settings/><con:parameters><con:parameter required="true"><con:name>workspaceId</con:name><con:value/><con:style>TEMPLATE</con:style><con:default/></con:parameter></con:parameters><con:resource name="/{viewId}" path="{viewId}"><con:settings/><con:parameters><con:parameter required="true"><con:name>workspaceId</con:name><con:value/><con:style>TEMPLATE</con:style><con:default/></con:parameter><con:parameter required="true"><con:name>viewId</con:name><con:value/><con:style>TEMPLATE</con:style><con:default/></con:parameter></con:parameters><con:resource name="/elements" path="elements"><con:settings/><con:parameters><con:parameter required="true"><con:name>workspaceId</con:name><con:value/><con:style>TEMPLATE</con:style><con:default/></con:parameter><con:parameter required="true"><con:name>viewId</con:name><con:value/><con:style>TEMPLATE</con:style><con:default/></con:parameter></con:parameters><con:resource name="/{elementId}" path="{elementId}"><con:settings/><con:parameters><con:parameter required="true"><con:name>workspaceId</con:name><con:value/><con:style>TEMPLATE</con:style><con:default/></con:parameter><con:parameter required="true"><con:name>viewId</con:name><con:value/><con:style>TEMPLATE</con:style><con:default/></con:parameter><con:parameter required="true"><con:name>elementId</con:name><con:value/><con:style>TEMPLATE</con:style><con:default/></con:parameter></con:parameters><con:resource name="/versions" path="versions"><con:settings/><con:parameters><con:parameter required="true"><con:name>workspaceId</con:name><con:value/><con:style>TEMPLATE</con:style><con:default/></con:parameter><con:parameter required="true"><con:name>viewId</con:name><con:value/><con:style>TEMPLATE</con:style><con:default/></con:parameter><con:parameter required="true"><con:name>elementId</con:name><con:value/><con:style>TEMPLATE</con:style><con:default/></con:parameter></con:parameters><con:resource name="/{versionId}" path="{versionId}"><con:settings/><con:parameters><con:parameter required="true"><con:name>workspaceId</con:name><con:value/><con:style>TEMPLATE</con:style><con:default/></con:parameter><con:parameter required="true"><con:name>viewId</con:name><con:value/><con:style>TEMPLATE</con:style><con:default/></con:parameter><con:parameter required="true"><con:name>elementId</con:name><con:value/><con:style>TEMPLATE</con:style><con:default/></con:parameter><con:parameter required="true"><con:name>versionId</con:name><con:value/><con:style>TEMPLATE</con:style><con:default/></con:parameter></con:parameters><con:method name="post" method="POST"><con:settings/><con:parameters><con:parameter><con:name>recurse</con:name><con:value/><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:boolean</con:type><con:default/></con:parameter><con:parameter><con:name>recurseDepth</con:name><con:value/><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:integer</con:type><con:default/></con:parameter><con:parameter><con:name>search</con:name><con:value/><con:style>QUERY</con:style><con:default/></con:parameter><con:parameter><con:name>timestamp</con:name><con:value/><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:date</con:type><con:default/></con:parameter></con:parameters><con:representation type="REQUEST" id=""><con:mediaType>application/json</con:mediaType><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/json</con:mediaType><con:status/><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/json</con:mediaType><con:status>200</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>202</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType/><con:status>401</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType/><con:status>404</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType/><con:status>409</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType/><con:status>500</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:request name="Request 1" mediaType="application/json"><con:settings/><con:endpoint>https://europaems</con:endpoint><con:parameters/></con:request></con:method><con:method name="put" method="PUT"><con:settings/><con:parameters><con:parameter><con:name>recurse</con:name><con:value/><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:boolean</con:type><con:default/></con:parameter><con:parameter><con:name>recurseDepth</con:name><con:value/><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:integer</con:type><con:default/></con:parameter><con:parameter><con:name>search</con:name><con:value/><con:style>QUERY</con:style><con:default/></con:parameter><con:parameter><con:name>timestamp</con:name><con:value/><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:date</con:type><con:default/></con:parameter></con:parameters><con:representation type="REQUEST" id=""><con:mediaType>application/json</con:mediaType><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/json</con:mediaType><con:status/><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/json</con:mediaType><con:status>200</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>201</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>202</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType/><con:status>401</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType/><con:status>404</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType/><con:status>409</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType/><con:status>500</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:request name="Request 1" mediaType="application/json"><con:settings/><con:endpoint>https://europaems</con:endpoint><con:parameters/></con:request></con:method><con:method name="delete" method="DELETE"><con:settings/><con:parameters><con:parameter><con:name>recurse</con:name><con:value/><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:boolean</con:type><con:default/></con:parameter><con:parameter><con:name>recurseDepth</con:name><con:value/><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:integer</con:type><con:default/></con:parameter><con:parameter><con:name>search</con:name><con:value/><con:style>QUERY</con:style><con:default/></con:parameter><con:parameter><con:name>timestamp</con:name><con:value/><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:date</con:type><con:default/></con:parameter></con:parameters><con:representation type="RESPONSE" id=""><con:mediaType>application/json</con:mediaType><con:status>200</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>202</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType/><con:status>401</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType/><con:status>404</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType/><con:status>500</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:request name="Request 1" mediaType="application/json"><con:settings/><con:endpoint>https://europaems</con:endpoint><con:parameters/></con:request></con:method><con:method name="get" method="GET"><con:settings/><con:parameters><con:parameter><con:name>recurse</con:name><con:value/><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:boolean</con:type><con:default/></con:parameter><con:parameter><con:name>recurseDepth</con:name><con:value/><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:integer</con:type><con:default/></con:parameter><con:parameter><con:name>search</con:name><con:value/><con:style>QUERY</con:style><con:default/></con:parameter><con:parameter><con:name>timestamp</con:name><con:value/><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:date</con:type><con:default/></con:parameter></con:parameters><con:representation type="RESPONSE" id=""><con:mediaType>application/json</con:mediaType><con:status>200</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType/><con:status>400</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType/><con:status>401</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType/><con:status>404</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType/><con:status>500</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:request name="Request 1" mediaType="application/json"><con:settings/><con:endpoint>https://europaems</con:endpoint><con:parameters/></con:request></con:method></con:resource><con:method name="post" method="POST"><con:settings/><con:parameters><con:parameter><con:name>recurse</con:name><con:value/><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:boolean</con:type><con:default/></con:parameter><con:parameter><con:name>recurseDepth</con:name><con:value/><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:integer</con:type><con:default/></con:parameter><con:parameter><con:name>search</con:name><con:value/><con:style>QUERY</con:style><con:default/></con:parameter><con:parameter><con:name>timestamp</con:name><con:value/><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:date</con:type><con:default/></con:parameter></con:parameters><con:representation type="REQUEST" id=""><con:mediaType>application/json</con:mediaType><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/json</con:mediaType><con:status/><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/json</con:mediaType><con:status>200</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>202</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType/><con:status>401</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType/><con:status>404</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType/><con:status>409</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType/><con:status>500</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:request name="Request 1" mediaType="application/json"><con:settings/><con:endpoint>https://europaems</con:endpoint><con:parameters/></con:request></con:method><con:method name="put" method="PUT"><con:settings/><con:parameters><con:parameter><con:name>recurse</con:name><con:value/><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:boolean</con:type><con:default/></con:parameter><con:parameter><con:name>recurseDepth</con:name><con:value/><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:integer</con:type><con:default/></con:parameter><con:parameter><con:name>search</con:name><con:value/><con:style>QUERY</con:style><con:default/></con:parameter><con:parameter><con:name>timestamp</con:name><con:value/><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:date</con:type><con:default/></con:parameter></con:parameters><con:representation type="REQUEST" id=""><con:mediaType>application/json</con:mediaType><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/json</con:mediaType><con:status/><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/json</con:mediaType><con:status>200</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>201</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>202</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType/><con:status>401</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType/><con:status>404</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType/><con:status>409</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType/><con:status>500</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:request name="Request 1" mediaType="application/json"><con:settings/><con:endpoint>https://europaems</con:endpoint><con:parameters/></con:request></con:method><con:method name="delete" method="DELETE"><con:settings/><con:parameters><con:parameter><con:name>recurse</con:name><con:value/><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:boolean</con:type><con:default/></con:parameter><con:parameter><con:name>recurseDepth</con:name><con:value/><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:integer</con:type><con:default/></con:parameter><con:parameter><con:name>search</con:name><con:value/><con:style>QUERY</con:style><con:default/></con:parameter><con:parameter><con:name>timestamp</con:name><con:value/><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:date</con:type><con:default/></con:parameter></con:parameters><con:representation type="RESPONSE" id=""><con:mediaType>application/json</con:mediaType><con:status>200</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>202</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType/><con:status>401</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType/><con:status>404</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType/><con:status>500</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:request name="Request 1" mediaType="application/json"><con:settings/><con:endpoint>https://europaems</con:endpoint><con:parameters/></con:request></con:method><con:method name="get" method="GET"><con:settings/><con:parameters><con:parameter><con:name>recurse</con:name><con:value/><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:boolean</con:type><con:default/></con:parameter><con:parameter><con:name>recurseDepth</con:name><con:value/><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:integer</con:type><con:default/></con:parameter><con:parameter><con:name>search</con:name><con:value/><con:style>QUERY</con:style><con:default/></con:parameter><con:parameter><con:name>timestamp</con:name><con:value/><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:date</con:type><con:default/></con:parameter></con:parameters><con:representation type="RESPONSE" id=""><con:mediaType>application/json</con:mediaType><con:status>200</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType/><con:status>400</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType/><con:status>401</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType/><con:status>404</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType/><con:status>500</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:request name="Request 1" mediaType="application/json"><con:settings/><con:endpoint>https://europaems</con:endpoint><con:parameters/></con:request></con:method></con:resource><con:resource name="/comments" path="comments"><con:settings/><con:parameters><con:parameter required="true"><con:name>workspaceId</con:name><con:value/><con:style>TEMPLATE</con:style><con:default/></con:parameter><con:parameter required="true"><con:name>viewId</con:name><con:value/><con:style>TEMPLATE</con:style><con:default/></con:parameter><con:parameter required="true"><con:name>elementId</con:name><con:value/><con:style>TEMPLATE</con:style><con:default/></con:parameter></con:parameters><con:resource name="/{commentId}" path="{commentId}"><con:settings/><con:parameters><con:parameter required="true"><con:name>workspaceId</con:name><con:value/><con:style>TEMPLATE</con:style><con:default/></con:parameter><con:parameter required="true"><con:name>viewId</con:name><con:value/><con:style>TEMPLATE</con:style><con:default/></con:parameter><con:parameter required="true"><con:name>elementId</con:name><con:value/><con:style>TEMPLATE</con:style><con:default/></con:parameter><con:parameter required="true"><con:name>commentId</con:name><con:value/><con:style>TEMPLATE</con:style><con:default/></con:parameter></con:parameters><con:method name="post" method="POST"><con:settings/><con:parameters><con:parameter><con:name>recurse</con:name><con:value/><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:boolean</con:type><con:default/></con:parameter><con:parameter><con:name>recurseDepth</con:name><con:value/><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:integer</con:type><con:default/></con:parameter><con:parameter><con:name>search</con:name><con:value/><con:style>QUERY</con:style><con:default/></con:parameter><con:parameter><con:name>timestamp</con:name><con:value/><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:date</con:type><con:default/></con:parameter></con:parameters><con:representation type="REQUEST" id=""><con:mediaType>application/json</con:mediaType><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/json</con:mediaType><con:status/><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/json</con:mediaType><con:status>200</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>202</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType/><con:status>401</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType/><con:status>404</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType/><con:status>409</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType/><con:status>500</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:request name="Request 1" mediaType="application/json"><con:settings/><con:endpoint>https://europaems</con:endpoint><con:parameters/></con:request></con:method><con:method name="put" method="PUT"><con:settings/><con:parameters><con:parameter><con:name>recurse</con:name><con:value/><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:boolean</con:type><con:default/></con:parameter><con:parameter><con:name>recurseDepth</con:name><con:value/><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:integer</con:type><con:default/></con:parameter><con:parameter><con:name>search</con:name><con:value/><con:style>QUERY</con:style><con:default/></con:parameter><con:parameter><con:name>timestamp</con:name><con:value/><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:date</con:type><con:default/></con:parameter></con:parameters><con:representation type="REQUEST" id=""><con:mediaType>application/json</con:mediaType><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/json</con:mediaType><con:status/><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/json</con:mediaType><con:status>200</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>201</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>202</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType/><con:status>401</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType/><con:status>404</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType/><con:status>409</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType/><con:status>500</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:request name="Request 1" mediaType="application/json"><con:settings/><con:endpoint>https://europaems</con:endpoint><con:parameters/></con:request></con:method><con:method name="delete" method="DELETE"><con:settings/><con:parameters><con:parameter><con:name>recurse</con:name><con:value/><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:boolean</con:type><con:default/></con:parameter><con:parameter><con:name>recurseDepth</con:name><con:value/><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:integer</con:type><con:default/></con:parameter><con:parameter><con:name>search</con:name><con:value/><con:style>QUERY</con:style><con:default/></con:parameter><con:parameter><con:name>timestamp</con:name><con:value/><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:date</con:type><con:default/></con:parameter></con:parameters><con:representation type="RESPONSE" id=""><con:mediaType>application/json</con:mediaType><con:status>200</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>202</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType/><con:status>401</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType/><con:status>404</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType/><con:status>500</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:request name="Request 1" mediaType="application/json"><con:settings/><con:endpoint>https://europaems</con:endpoint><con:parameters/></con:request></con:method><con:method name="get" method="GET"><con:settings/><con:parameters><con:parameter><con:name>recurse</con:name><con:value/><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:boolean</con:type><con:default/></con:parameter><con:parameter><con:name>recurseDepth</con:name><con:value/><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:integer</con:type><con:default/></con:parameter><con:parameter><con:name>search</con:name><con:value/><con:style>QUERY</con:style><con:default/></con:parameter><con:parameter><con:name>timestamp</con:name><con:value/><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:date</con:type><con:default/></con:parameter></con:parameters><con:representation type="RESPONSE" id=""><con:mediaType>application/json</con:mediaType><con:status>200</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType/><con:status>400</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType/><con:status>401</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType/><con:status>404</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType/><con:status>500</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:request name="Request 1" mediaType="application/json"><con:settings/><con:endpoint>https://europaems</con:endpoint><con:parameters/></con:request></con:method></con:resource><con:method name="post" method="POST"><con:settings/><con:parameters><con:parameter><con:name>recurse</con:name><con:value/><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:boolean</con:type><con:default/></con:parameter><con:parameter><con:name>recurseDepth</con:name><con:value/><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:integer</con:type><con:default/></con:parameter><con:parameter><con:name>search</con:name><con:value/><con:style>QUERY</con:style><con:default/></con:parameter><con:parameter><con:name>timestamp</con:name><con:value/><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:date</con:type><con:default/></con:parameter></con:parameters><con:representation type="REQUEST" id=""><con:mediaType>application/json</con:mediaType><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/json</con:mediaType><con:status/><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/json</con:mediaType><con:status>200</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>202</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType/><con:status>401</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType/><con:status>404</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType/><con:status>409</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType/><con:status>500</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:request name="Request 1" mediaType="application/json"><con:settings/><con:endpoint>https://europaems</con:endpoint><con:parameters/></con:request></con:method><con:method name="put" method="PUT"><con:settings/><con:parameters><con:parameter><con:name>recurse</con:name><con:value/><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:boolean</con:type><con:default/></con:parameter><con:parameter><con:name>recurseDepth</con:name><con:value/><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:integer</con:type><con:default/></con:parameter><con:parameter><con:name>search</con:name><con:value/><con:style>QUERY</con:style><con:default/></con:parameter><con:parameter><con:name>timestamp</con:name><con:value/><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:date</con:type><con:default/></con:parameter></con:parameters><con:representation type="REQUEST" id=""><con:mediaType>application/json</con:mediaType><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/json</con:mediaType><con:status/><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/json</con:mediaType><con:status>200</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>201</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>202</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType/><con:status>401</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType/><con:status>404</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType/><con:status>409</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType/><con:status>500</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:request name="Request 1" mediaType="application/json"><con:settings/><con:endpoint>https://europaems</con:endpoint><con:parameters/></con:request></con:method><con:method name="delete" method="DELETE"><con:settings/><con:parameters><con:parameter><con:name>recurse</con:name><con:value/><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:boolean</con:type><con:default/></con:parameter><con:parameter><con:name>recurseDepth</con:name><con:value/><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:integer</con:type><con:default/></con:parameter><con:parameter><con:name>search</con:name><con:value/><con:style>QUERY</con:style><con:default/></con:parameter><con:parameter><con:name>timestamp</con:name><con:value/><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:date</con:type><con:default/></con:parameter></con:parameters><con:representation type="RESPONSE" id=""><con:mediaType>application/json</con:mediaType><con:status>200</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>202</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType/><con:status>401</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType/><con:status>404</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType/><con:status>500</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:request name="Request 1" mediaType="application/json"><con:settings/><con:endpoint>https://europaems</con:endpoint><con:parameters/></con:request></con:method><con:method name="get" method="GET"><con:settings/><con:parameters><con:parameter><con:name>recurse</con:name><con:value/><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:boolean</con:type><con:default/></con:parameter><con:parameter><con:name>recurseDepth</con:name><con:value/><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:integer</con:type><con:default/></con:parameter><con:parameter><con:name>search</con:name><con:value/><con:style>QUERY</con:style><con:default/></con:parameter><con:parameter><con:name>timestamp</con:name><con:value/><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:date</con:type><con:default/></con:parameter></con:parameters><con:representation type="RESPONSE" id=""><con:mediaType>application/json</con:mediaType><con:status>200</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType/><con:status>400</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType/><con:status>401</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType/><con:status>404</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType/><con:status>500</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:request name="Request 1" mediaType="application/json"><con:settings/><con:endpoint>https://europaems</con:endpoint><con:parameters/></con:request></con:method></con:resource><con:method name="post" method="POST"><con:settings/><con:parameters><con:parameter><con:name>recurse</con:name><con:value/><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:boolean</con:type><con:default/></con:parameter><con:parameter><con:name>recurseDepth</con:name><con:value/><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:integer</con:type><con:default/></con:parameter><con:parameter><con:name>search</con:name><con:value/><con:style>QUERY</con:style><con:default/></con:parameter><con:parameter><con:name>timestamp</con:name><con:value/><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:date</con:type><con:default/></con:parameter></con:parameters><con:representation type="REQUEST" id=""><con:mediaType>application/json</con:mediaType><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/json</con:mediaType><con:status/><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/json</con:mediaType><con:status>200</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>202</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType/><con:status>401</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType/><con:status>404</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType/><con:status>409</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType/><con:status>500</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:request name="Request 1" mediaType="application/json"><con:settings/><con:endpoint>https://europaems</con:endpoint><con:parameters/></con:request></con:method><con:method name="put" method="PUT"><con:settings/><con:parameters><con:parameter><con:name>recurse</con:name><con:value/><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:boolean</con:type><con:default/></con:parameter><con:parameter><con:name>recurseDepth</con:name><con:value/><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:integer</con:type><con:default/></con:parameter><con:parameter><con:name>search</con:name><con:value/><con:style>QUERY</con:style><con:default/></con:parameter><con:parameter><con:name>timestamp</con:name><con:value/><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:date</con:type><con:default/></con:parameter></con:parameters><con:representation type="REQUEST" id=""><con:mediaType>application/json</con:mediaType><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/json</con:mediaType><con:status/><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/json</con:mediaType><con:status>200</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>201</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>202</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType/><con:status>401</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType/><con:status>404</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType/><con:status>409</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType/><con:status>500</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:request name="Request 1" mediaType="application/json"><con:settings/><con:endpoint>https://europaems</con:endpoint><con:parameters/></con:request></con:method><con:method name="delete" method="DELETE"><con:settings/><con:parameters><con:parameter><con:name>recurse</con:name><con:value/><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:boolean</con:type><con:default/></con:parameter><con:parameter><con:name>recurseDepth</con:name><con:value/><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:integer</con:type><con:default/></con:parameter><con:parameter><con:name>search</con:name><con:value/><con:style>QUERY</con:style><con:default/></con:parameter><con:parameter><con:name>timestamp</con:name><con:value/><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:date</con:type><con:default/></con:parameter></con:parameters><con:representation type="RESPONSE" id=""><con:mediaType>application/json</con:mediaType><con:status>200</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>202</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType/><con:status>401</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType/><con:status>404</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType/><con:status>500</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:request name="Request 1" mediaType="application/json"><con:settings/><con:endpoint>https://europaems</con:endpoint><con:parameters/></con:request></con:method><con:method name="get" method="GET"><con:settings/><con:parameters><con:parameter><con:name>recurse</con:name><con:value/><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:boolean</con:type><con:default/></con:parameter><con:parameter><con:name>recurseDepth</con:name><con:value/><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:integer</con:type><con:default/></con:parameter><con:parameter><con:name>search</con:name><con:value/><con:style>QUERY</con:style><con:default/></con:parameter><con:parameter><con:name>timestamp</con:name><con:value/><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:date</con:type><con:default/></con:parameter></con:parameters><con:representation type="RESPONSE" id=""><con:mediaType>application/json</con:mediaType><con:status>200</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType/><con:status>400</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType/><con:status>401</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType/><con:status>404</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType/><con:status>500</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:request name="Request 1" mediaType="application/json"><con:settings/><con:endpoint>https://europaems</con:endpoint><con:parameters/></con:request></con:method></con:resource><con:method name="post" method="POST"><con:settings/><con:parameters><con:parameter><con:name>recurse</con:name><con:value/><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:boolean</con:type><con:default/></con:parameter><con:parameter><con:name>recurseDepth</con:name><con:value/><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:integer</con:type><con:default/></con:parameter><con:parameter><con:name>search</con:name><con:value/><con:style>QUERY</con:style><con:default/></con:parameter><con:parameter><con:name>timestamp</con:name><con:value/><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:date</con:type><con:default/></con:parameter></con:parameters><con:representation type="REQUEST" id=""><con:mediaType>application/json</con:mediaType><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/json</con:mediaType><con:status/><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/json</con:mediaType><con:status>200</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>202</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType/><con:status>401</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType/><con:status>404</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType/><con:status>409</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType/><con:status>500</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:request name="Request 1" mediaType="application/json"><con:settings/><con:endpoint>https://europaems</con:endpoint><con:parameters/></con:request></con:method><con:method name="put" method="PUT"><con:settings/><con:parameters><con:parameter><con:name>recurse</con:name><con:value/><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:boolean</con:type><con:default/></con:parameter><con:parameter><con:name>recurseDepth</con:name><con:value/><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:integer</con:type><con:default/></con:parameter><con:parameter><con:name>search</con:name><con:value/><con:style>QUERY</con:style><con:default/></con:parameter><con:parameter><con:name>timestamp</con:name><con:value/><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:date</con:type><con:default/></con:parameter></con:parameters><con:representation type="REQUEST" id=""><con:mediaType>application/json</con:mediaType><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/json</con:mediaType><con:status/><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/json</con:mediaType><con:status>200</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>201</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>202</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType/><con:status>401</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType/><con:status>404</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType/><con:status>409</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType/><con:status>500</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:request name="Request 1" mediaType="application/json"><con:settings/><con:endpoint>https://europaems</con:endpoint><con:parameters/></con:request></con:method><con:method name="delete" method="DELETE"><con:settings/><con:parameters><con:parameter><con:name>recurse</con:name><con:value/><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:boolean</con:type><con:default/></con:parameter><con:parameter><con:name>recurseDepth</con:name><con:value/><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:integer</con:type><con:default/></con:parameter><con:parameter><con:name>search</con:name><con:value/><con:style>QUERY</con:style><con:default/></con:parameter><con:parameter><con:name>timestamp</con:name><con:value/><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:date</con:type><con:default/></con:parameter></con:parameters><con:representation type="RESPONSE" id=""><con:mediaType>application/json</con:mediaType><con:status>200</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>202</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType/><con:status>401</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType/><con:status>404</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType/><con:status>500</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:request name="Request 1" mediaType="application/json"><con:settings/><con:endpoint>https://europaems</con:endpoint><con:parameters/></con:request></con:method><con:method name="get" method="GET"><con:settings/><con:parameters><con:parameter><con:name>recurse</con:name><con:value/><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:boolean</con:type><con:default/></con:parameter><con:parameter><con:name>recurseDepth</con:name><con:value/><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:integer</con:type><con:default/></con:parameter><con:parameter><con:name>search</con:name><con:value/><con:style>QUERY</con:style><con:default/></con:parameter><con:parameter><con:name>timestamp</con:name><con:value/><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:date</con:type><con:default/></con:parameter></con:parameters><con:representation type="RESPONSE" id=""><con:mediaType>application/json</con:mediaType><con:status>200</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType/><con:status>400</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType/><con:status>401</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType/><con:status>404</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType/><con:status>500</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:request name="Request 1" mediaType="application/json"><con:settings/><con:endpoint>https://europaems</con:endpoint><con:parameters/></con:request></con:method></con:resource><con:method name="post" method="POST"><con:settings/><con:parameters><con:parameter><con:name>recurse</con:name><con:value/><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:boolean</con:type><con:default/></con:parameter><con:parameter><con:name>recurseDepth</con:name><con:value/><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:integer</con:type><con:default/></con:parameter><con:parameter><con:name>search</con:name><con:value/><con:style>QUERY</con:style><con:default/></con:parameter><con:parameter><con:name>timestamp</con:name><con:value/><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:date</con:type><con:default/></con:parameter></con:parameters><con:representation type="REQUEST" id=""><con:mediaType>application/json</con:mediaType><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/json</con:mediaType><con:status/><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/json</con:mediaType><con:status>200</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>202</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType/><con:status>401</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType/><con:status>404</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType/><con:status>409</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType/><con:status>500</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:request name="Request 1" mediaType="application/json"><con:settings/><con:endpoint>https://europaems</con:endpoint><con:parameters/></con:request></con:method><con:method name="put" method="PUT"><con:settings/><con:parameters><con:parameter><con:name>recurse</con:name><con:value/><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:boolean</con:type><con:default/></con:parameter><con:parameter><con:name>recurseDepth</con:name><con:value/><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:integer</con:type><con:default/></con:parameter><con:parameter><con:name>search</con:name><con:value/><con:style>QUERY</con:style><con:default/></con:parameter><con:parameter><con:name>timestamp</con:name><con:value/><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:date</con:type><con:default/></con:parameter></con:parameters><con:representation type="REQUEST" id=""><con:mediaType>application/json</con:mediaType><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/json</con:mediaType><con:status/><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/json</con:mediaType><con:status>200</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>201</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>202</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType/><con:status>401</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType/><con:status>404</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType/><con:status>409</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType/><con:status>500</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:request name="Request 1" mediaType="application/json"><con:settings/><con:endpoint>https://europaems</con:endpoint><con:parameters/></con:request></con:method><con:method name="delete" method="DELETE"><con:settings/><con:parameters><con:parameter><con:name>recurse</con:name><con:value/><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:boolean</con:type><con:default/></con:parameter><con:parameter><con:name>recurseDepth</con:name><con:value/><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:integer</con:type><con:default/></con:parameter><con:parameter><con:name>search</con:name><con:value/><con:style>QUERY</con:style><con:default/></con:parameter><con:parameter><con:name>timestamp</con:name><con:value/><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:date</con:type><con:default/></con:parameter></con:parameters><con:representation type="RESPONSE" id=""><con:mediaType>application/json</con:mediaType><con:status>200</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>202</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType/><con:status>401</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType/><con:status>404</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType/><con:status>500</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:request name="Request 1" mediaType="application/json"><con:settings/><con:endpoint>https://europaems</con:endpoint><con:parameters/></con:request></con:method><con:method name="get" method="GET"><con:settings/><con:parameters><con:parameter><con:name>recurse</con:name><con:value/><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:boolean</con:type><con:default/></con:parameter><con:parameter><con:name>recurseDepth</con:name><con:value/><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:integer</con:type><con:default/></con:parameter><con:parameter><con:name>search</con:name><con:value/><con:style>QUERY</con:style><con:default/></con:parameter><con:parameter><con:name>timestamp</con:name><con:value/><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:date</con:type><con:default/></con:parameter></con:parameters><con:representation type="RESPONSE" id=""><con:mediaType>application/json</con:mediaType><con:status>200</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType/><con:status>400</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType/><con:status>401</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType/><con:status>404</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType/><con:status>500</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:request name="Request 1" mediaType="application/json"><con:settings/><con:endpoint>https://europaems</con:endpoint><con:parameters/></con:request></con:method></con:resource><con:method name="post" method="POST"><con:settings/><con:parameters><con:parameter><con:name>recurse</con:name><con:value/><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:boolean</con:type><con:default/></con:parameter><con:parameter><con:name>recurseDepth</con:name><con:value/><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:integer</con:type><con:default/></con:parameter><con:parameter><con:name>search</con:name><con:value/><con:style>QUERY</con:style><con:default/></con:parameter><con:parameter><con:name>timestamp</con:name><con:value/><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:date</con:type><con:default/></con:parameter></con:parameters><con:representation type="REQUEST" id=""><con:mediaType>application/json</con:mediaType><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/json</con:mediaType><con:status/><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/json</con:mediaType><con:status>200</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>202</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType/><con:status>401</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType/><con:status>404</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType/><con:status>409</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType/><con:status>500</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:request name="Request 1" mediaType="application/json"><con:settings/><con:endpoint>https://europaems</con:endpoint><con:parameters/></con:request></con:method><con:method name="put" method="PUT"><con:settings/><con:parameters><con:parameter><con:name>recurse</con:name><con:value/><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:boolean</con:type><con:default/></con:parameter><con:parameter><con:name>recurseDepth</con:name><con:value/><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:integer</con:type><con:default/></con:parameter><con:parameter><con:name>search</con:name><con:value/><con:style>QUERY</con:style><con:default/></con:parameter><con:parameter><con:name>timestamp</con:name><con:value/><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:date</con:type><con:default/></con:parameter></con:parameters><con:representation type="REQUEST" id=""><con:mediaType>application/json</con:mediaType><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/json</con:mediaType><con:status/><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/json</con:mediaType><con:status>200</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>201</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>202</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType/><con:status>401</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType/><con:status>404</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType/><con:status>409</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType/><con:status>500</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:request name="Request 1" mediaType="application/json"><con:settings/><con:endpoint>https://europaems</con:endpoint><con:parameters/></con:request></con:method><con:method name="delete" method="DELETE"><con:settings/><con:parameters><con:parameter><con:name>recurse</con:name><con:value/><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:boolean</con:type><con:default/></con:parameter><con:parameter><con:name>recurseDepth</con:name><con:value/><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:integer</con:type><con:default/></con:parameter><con:parameter><con:name>search</con:name><con:value/><con:style>QUERY</con:style><con:default/></con:parameter><con:parameter><con:name>timestamp</con:name><con:value/><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:date</con:type><con:default/></con:parameter></con:parameters><con:representation type="RESPONSE" id=""><con:mediaType>application/json</con:mediaType><con:status>200</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>202</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType/><con:status>401</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType/><con:status>404</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType/><con:status>500</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:request name="Request 1" mediaType="application/json"><con:settings/><con:endpoint>https://europaems</con:endpoint><con:parameters/></con:request></con:method><con:method name="get" method="GET"><con:settings/><con:parameters><con:parameter><con:name>recurse</con:name><con:value/><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:boolean</con:type><con:default/></con:parameter><con:parameter><con:name>recurseDepth</con:name><con:value/><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:integer</con:type><con:default/></con:parameter><con:parameter><con:name>search</con:name><con:value/><con:style>QUERY</con:style><con:default/></con:parameter><con:parameter><con:name>timestamp</con:name><con:value/><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:date</con:type><con:default/></con:parameter></con:parameters><con:representation type="RESPONSE" id=""><con:mediaType>application/json</con:mediaType><con:status>200</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType/><con:status>400</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType/><con:status>401</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType/><con:status>404</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType/><con:status>500</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:request name="Request 1" mediaType="application/json"><con:settings/><con:endpoint>https://europaems</con:endpoint><con:parameters/></con:request></con:method></con:resource><con:resource name="/configurations" path="configurations"><con:settings/><con:parameters><con:parameter required="true"><con:name>workspaceId</con:name><con:value/><con:style>TEMPLATE</con:style><con:default/></con:parameter></con:parameters><con:resource name="/{configurationId}" path="{configurationId}"><con:settings/><con:parameters><con:parameter required="true"><con:name>workspaceId</con:name><con:value/><con:style>TEMPLATE</con:style><con:default/></con:parameter><con:parameter required="true"><con:name>configurationId</con:name><con:value/><con:style>TEMPLATE</con:style><con:default/></con:parameter></con:parameters><con:resource name="/snapshots" path="snapshots"><con:settings/><con:parameters><con:parameter required="true"><con:name>workspaceId</con:name><con:value/><con:style>TEMPLATE</con:style><con:default/></con:parameter><con:parameter required="true"><con:name>configurationId</con:name><con:value/><con:style>TEMPLATE</con:style><con:default/></con:parameter></con:parameters><con:resource name="/{snapshotId}" path="{snapshotId}"><con:settings/><con:parameters><con:parameter required="true"><con:name>workspaceId</con:name><con:value/><con:style>TEMPLATE</con:style><con:default/></con:parameter><con:parameter required="true"><con:name>configurationId</con:name><con:value/><con:style>TEMPLATE</con:style><con:default/></con:parameter><con:parameter required="true"><con:name>snapshotId</con:name><con:value/><con:style>TEMPLATE</con:style><con:default/></con:parameter></con:parameters><con:method name="post" method="POST"><con:settings/><con:parameters><con:parameter><con:name>recurse</con:name><con:value/><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:boolean</con:type><con:default/></con:parameter><con:parameter><con:name>recurseDepth</con:name><con:value/><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:integer</con:type><con:default/></con:parameter><con:parameter><con:name>search</con:name><con:value/><con:style>QUERY</con:style><con:default/></con:parameter><con:parameter><con:name>timestamp</con:name><con:value/><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:date</con:type><con:default/></con:parameter></con:parameters><con:representation type="REQUEST" id=""><con:mediaType>application/json</con:mediaType><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/json</con:mediaType><con:status/><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/json</con:mediaType><con:status>200</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>202</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType/><con:status>401</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType/><con:status>404</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType/><con:status>409</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType/><con:status>500</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:request name="Request 1" mediaType="application/json"><con:settings/><con:endpoint>https://europaems</con:endpoint><con:parameters/></con:request></con:method><con:method name="put" method="PUT"><con:settings/><con:parameters><con:parameter><con:name>recurse</con:name><con:value/><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:boolean</con:type><con:default/></con:parameter><con:parameter><con:name>recurseDepth</con:name><con:value/><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:integer</con:type><con:default/></con:parameter><con:parameter><con:name>search</con:name><con:value/><con:style>QUERY</con:style><con:default/></con:parameter><con:parameter><con:name>timestamp</con:name><con:value/><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:date</con:type><con:default/></con:parameter></con:parameters><con:representation type="REQUEST" id=""><con:mediaType>application/json</con:mediaType><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/json</con:mediaType><con:status/><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/json</con:mediaType><con:status>200</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>201</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>202</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType/><con:status>401</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType/><con:status>404</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType/><con:status>409</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType/><con:status>500</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:request name="Request 1" mediaType="application/json"><con:settings/><con:endpoint>https://europaems</con:endpoint><con:parameters/></con:request></con:method><con:method name="delete" method="DELETE"><con:settings/><con:parameters><con:parameter><con:name>recurse</con:name><con:value/><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:boolean</con:type><con:default/></con:parameter><con:parameter><con:name>recurseDepth</con:name><con:value/><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:integer</con:type><con:default/></con:parameter><con:parameter><con:name>search</con:name><con:value/><con:style>QUERY</con:style><con:default/></con:parameter><con:parameter><con:name>timestamp</con:name><con:value/><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:date</con:type><con:default/></con:parameter></con:parameters><con:representation type="RESPONSE" id=""><con:mediaType>application/json</con:mediaType><con:status>200</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>202</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType/><con:status>401</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType/><con:status>404</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType/><con:status>500</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:request name="Request 1" mediaType="application/json"><con:settings/><con:endpoint>https://europaems</con:endpoint><con:parameters/></con:request></con:method><con:method name="get" method="GET"><con:settings/><con:parameters><con:parameter><con:name>recurse</con:name><con:value/><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:boolean</con:type><con:default/></con:parameter><con:parameter><con:name>recurseDepth</con:name><con:value/><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:integer</con:type><con:default/></con:parameter><con:parameter><con:name>search</con:name><con:value/><con:style>QUERY</con:style><con:default/></con:parameter><con:parameter><con:name>timestamp</con:name><con:value/><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:date</con:type><con:default/></con:parameter></con:parameters><con:representation type="RESPONSE" id=""><con:mediaType>application/json</con:mediaType><con:status>200</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType/><con:status>400</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType/><con:status>401</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType/><con:status>404</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType/><con:status>500</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:request name="Request 1" mediaType="application/json"><con:settings/><con:endpoint>https://europaems</con:endpoint><con:parameters/></con:request></con:method></con:resource><con:method name="post" method="POST"><con:settings/><con:parameters><con:parameter><con:name>recurse</con:name><con:value/><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:boolean</con:type><con:default/></con:parameter><con:parameter><con:name>recurseDepth</con:name><con:value/><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:integer</con:type><con:default/></con:parameter><con:parameter><con:name>search</con:name><con:value/><con:style>QUERY</con:style><con:default/></con:parameter><con:parameter><con:name>timestamp</con:name><con:value/><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:date</con:type><con:default/></con:parameter></con:parameters><con:representation type="REQUEST" id=""><con:mediaType>application/json</con:mediaType><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/json</con:mediaType><con:status/><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/json</con:mediaType><con:status>200</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>202</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType/><con:status>401</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType/><con:status>404</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType/><con:status>409</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType/><con:status>500</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:request name="Request 1" mediaType="application/json"><con:settings/><con:endpoint>https://europaems</con:endpoint><con:parameters/></con:request></con:method><con:method name="put" method="PUT"><con:settings/><con:parameters><con:parameter><con:name>recurse</con:name><con:value/><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:boolean</con:type><con:default/></con:parameter><con:parameter><con:name>recurseDepth</con:name><con:value/><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:integer</con:type><con:default/></con:parameter><con:parameter><con:name>search</con:name><con:value/><con:style>QUERY</con:style><con:default/></con:parameter><con:parameter><con:name>timestamp</con:name><con:value/><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:date</con:type><con:default/></con:parameter></con:parameters><con:representation type="REQUEST" id=""><con:mediaType>application/json</con:mediaType><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/json</con:mediaType><con:status/><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/json</con:mediaType><con:status>200</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>201</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>202</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType/><con:status>401</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType/><con:status>404</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType/><con:status>409</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType/><con:status>500</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:request name="Request 1" mediaType="application/json"><con:settings/><con:endpoint>https://europaems</con:endpoint><con:parameters/></con:request></con:method><con:method name="delete" method="DELETE"><con:settings/><con:parameters><con:parameter><con:name>recurse</con:name><con:value/><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:boolean</con:type><con:default/></con:parameter><con:parameter><con:name>recurseDepth</con:name><con:value/><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:integer</con:type><con:default/></con:parameter><con:parameter><con:name>search</con:name><con:value/><con:style>QUERY</con:style><con:default/></con:parameter><con:parameter><con:name>timestamp</con:name><con:value/><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:date</con:type><con:default/></con:parameter></con:parameters><con:representation type="RESPONSE" id=""><con:mediaType>application/json</con:mediaType><con:status>200</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>202</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType/><con:status>401</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType/><con:status>404</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType/><con:status>500</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:request name="Request 1" mediaType="application/json"><con:settings/><con:endpoint>https://europaems</con:endpoint><con:parameters/></con:request></con:method><con:method name="get" method="GET"><con:settings/><con:parameters><con:parameter><con:name>recurse</con:name><con:value/><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:boolean</con:type><con:default/></con:parameter><con:parameter><con:name>recurseDepth</con:name><con:value/><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:integer</con:type><con:default/></con:parameter><con:parameter><con:name>search</con:name><con:value/><con:style>QUERY</con:style><con:default/></con:parameter><con:parameter><con:name>timestamp</con:name><con:value/><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:date</con:type><con:default/></con:parameter></con:parameters><con:representation type="RESPONSE" id=""><con:mediaType>application/json</con:mediaType><con:status>200</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType/><con:status>400</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType/><con:status>401</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType/><con:status>404</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType/><con:status>500</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:request name="Request 1" mediaType="application/json"><con:settings/><con:endpoint>https://europaems</con:endpoint><con:parameters/></con:request></con:method></con:resource><con:method name="post" method="POST"><con:settings/><con:parameters><con:parameter><con:name>recurse</con:name><con:value/><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:boolean</con:type><con:default/></con:parameter><con:parameter><con:name>recurseDepth</con:name><con:value/><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:integer</con:type><con:default/></con:parameter><con:parameter><con:name>search</con:name><con:value/><con:style>QUERY</con:style><con:default/></con:parameter><con:parameter><con:name>timestamp</con:name><con:value/><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:date</con:type><con:default/></con:parameter></con:parameters><con:representation type="REQUEST" id=""><con:mediaType>application/json</con:mediaType><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/json</con:mediaType><con:status/><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/json</con:mediaType><con:status>200</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>202</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType/><con:status>401</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType/><con:status>404</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType/><con:status>409</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType/><con:status>500</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:request name="Request 1" mediaType="application/json"><con:settings/><con:endpoint>https://europaems</con:endpoint><con:parameters/></con:request></con:method><con:method name="put" method="PUT"><con:settings/><con:parameters><con:parameter><con:name>recurse</con:name><con:value/><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:boolean</con:type><con:default/></con:parameter><con:parameter><con:name>recurseDepth</con:name><con:value/><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:integer</con:type><con:default/></con:parameter><con:parameter><con:name>search</con:name><con:value/><con:style>QUERY</con:style><con:default/></con:parameter><con:parameter><con:name>timestamp</con:name><con:value/><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:date</con:type><con:default/></con:parameter></con:parameters><con:representation type="REQUEST" id=""><con:mediaType>application/json</con:mediaType><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/json</con:mediaType><con:status/><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/json</con:mediaType><con:status>200</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>201</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>202</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType/><con:status>401</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType/><con:status>404</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType/><con:status>409</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType/><con:status>500</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:request name="Request 1" mediaType="application/json"><con:settings/><con:endpoint>https://europaems</con:endpoint><con:parameters/></con:request></con:method><con:method name="delete" method="DELETE"><con:settings/><con:parameters><con:parameter><con:name>recurse</con:name><con:value/><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:boolean</con:type><con:default/></con:parameter><con:parameter><con:name>recurseDepth</con:name><con:value/><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:integer</con:type><con:default/></con:parameter><con:parameter><con:name>search</con:name><con:value/><con:style>QUERY</con:style><con:default/></con:parameter><con:parameter><con:name>timestamp</con:name><con:value/><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:date</con:type><con:default/></con:parameter></con:parameters><con:representation type="RESPONSE" id=""><con:mediaType>application/json</con:mediaType><con:status>200</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>202</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType/><con:status>401</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType/><con:status>404</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType/><con:status>500</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:request name="Request 1" mediaType="application/json"><con:settings/><con:endpoint>https://europaems</con:endpoint><con:parameters/></con:request></con:method><con:method name="get" method="GET"><con:settings/><con:parameters><con:parameter><con:name>recurse</con:name><con:value/><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:boolean</con:type><con:default/></con:parameter><con:parameter><con:name>recurseDepth</con:name><con:value/><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:integer</con:type><con:default/></con:parameter><con:parameter><con:name>search</con:name><con:value/><con:style>QUERY</con:style><con:default/></con:parameter><con:parameter><con:name>timestamp</con:name><con:value/><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:date</con:type><con:default/></con:parameter></con:parameters><con:representation type="RESPONSE" id=""><con:mediaType>application/json</con:mediaType><con:status>200</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType/><con:status>400</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType/><con:status>401</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType/><con:status>404</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType/><con:status>500</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:request name="Request 1" mediaType="application/json"><con:settings/><con:endpoint>https://europaems</con:endpoint><con:parameters/></con:request></con:method></con:resource><con:method name="post" method="POST"><con:settings/><con:parameters><con:parameter><con:name>recurse</con:name><con:value/><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:boolean</con:type><con:default/></con:parameter><con:parameter><con:name>recurseDepth</con:name><con:value/><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:integer</con:type><con:default/></con:parameter><con:parameter><con:name>search</con:name><con:value/><con:style>QUERY</con:style><con:default/></con:parameter><con:parameter><con:name>timestamp</con:name><con:value/><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:date</con:type><con:default/></con:parameter></con:parameters><con:representation type="REQUEST" id=""><con:mediaType>application/json</con:mediaType><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/json</con:mediaType><con:status/><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/json</con:mediaType><con:status>200</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>202</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType/><con:status>401</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType/><con:status>404</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType/><con:status>409</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType/><con:status>500</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:request name="Request 1" mediaType="application/json"><con:settings/><con:endpoint>https://europaems</con:endpoint><con:parameters/></con:request></con:method><con:method name="put" method="PUT"><con:settings/><con:parameters><con:parameter><con:name>recurse</con:name><con:value/><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:boolean</con:type><con:default/></con:parameter><con:parameter><con:name>recurseDepth</con:name><con:value/><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:integer</con:type><con:default/></con:parameter><con:parameter><con:name>search</con:name><con:value/><con:style>QUERY</con:style><con:default/></con:parameter><con:parameter><con:name>timestamp</con:name><con:value/><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:date</con:type><con:default/></con:parameter></con:parameters><con:representation type="REQUEST" id=""><con:mediaType>application/json</con:mediaType><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/json</con:mediaType><con:status/><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/json</con:mediaType><con:status>200</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>201</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>202</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType/><con:status>401</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType/><con:status>404</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType/><con:status>409</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType/><con:status>500</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:request name="Request 1" mediaType="application/json"><con:settings/><con:endpoint>https://europaems</con:endpoint><con:parameters/></con:request></con:method><con:method name="delete" method="DELETE"><con:settings/><con:parameters><con:parameter><con:name>recurse</con:name><con:value/><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:boolean</con:type><con:default/></con:parameter><con:parameter><con:name>recurseDepth</con:name><con:value/><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:integer</con:type><con:default/></con:parameter><con:parameter><con:name>search</con:name><con:value/><con:style>QUERY</con:style><con:default/></con:parameter><con:parameter><con:name>timestamp</con:name><con:value/><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:date</con:type><con:default/></con:parameter></con:parameters><con:representation type="RESPONSE" id=""><con:mediaType>application/json</con:mediaType><con:status>200</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>202</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType/><con:status>401</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType/><con:status>404</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType/><con:status>500</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:request name="Request 1" mediaType="application/json"><con:settings/><con:endpoint>https://europaems</con:endpoint><con:parameters/></con:request></con:method><con:method name="get" method="GET"><con:settings/><con:parameters><con:parameter><con:name>recurse</con:name><con:value/><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:boolean</con:type><con:default/></con:parameter><con:parameter><con:name>recurseDepth</con:name><con:value/><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:integer</con:type><con:default/></con:parameter><con:parameter><con:name>search</con:name><con:value/><con:style>QUERY</con:style><con:default/></con:parameter><con:parameter><con:name>timestamp</con:name><con:value/><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:date</con:type><con:default/></con:parameter></con:parameters><con:representation type="RESPONSE" id=""><con:mediaType>application/json</con:mediaType><con:status>200</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType/><con:status>400</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType/><con:status>401</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType/><con:status>404</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType/><con:status>500</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:request name="Request 1" mediaType="application/json"><con:settings/><con:endpoint>https://europaems</con:endpoint><con:parameters/></con:request></con:method></con:resource><con:resource name="/changesets" path="changesets"><con:settings/><con:parameters><con:parameter required="true"><con:name>workspaceId</con:name><con:value/><con:style>TEMPLATE</con:style><con:default/></con:parameter></con:parameters><con:method name="post" method="POST"><con:settings/><con:parameters><con:parameter><con:name>recurse</con:name><con:value/><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:boolean</con:type><con:default/></con:parameter><con:parameter><con:name>recurseDepth</con:name><con:value/><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:integer</con:type><con:default/></con:parameter><con:parameter><con:name>search</con:name><con:value/><con:style>QUERY</con:style><con:default/></con:parameter><con:parameter><con:name>timestamp</con:name><con:value/><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:date</con:type><con:default/></con:parameter></con:parameters><con:representation type="REQUEST" id=""><con:mediaType>application/json</con:mediaType><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/json</con:mediaType><con:status/><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/json</con:mediaType><con:status>200</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>202</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType/><con:status>401</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType/><con:status>404</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType/><con:status>409</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType/><con:status>500</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:request name="Request 1" mediaType="application/json"><con:settings/><con:endpoint>https://europaems</con:endpoint><con:parameters/></con:request></con:method><con:method name="put" method="PUT"><con:settings/><con:parameters><con:parameter><con:name>recurse</con:name><con:value/><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:boolean</con:type><con:default/></con:parameter><con:parameter><con:name>recurseDepth</con:name><con:value/><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:integer</con:type><con:default/></con:parameter><con:parameter><con:name>search</con:name><con:value/><con:style>QUERY</con:style><con:default/></con:parameter><con:parameter><con:name>timestamp</con:name><con:value/><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:date</con:type><con:default/></con:parameter></con:parameters><con:representation type="REQUEST" id=""><con:mediaType>application/json</con:mediaType><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/json</con:mediaType><con:status/><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/json</con:mediaType><con:status>200</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>201</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>202</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType/><con:status>401</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType/><con:status>404</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType/><con:status>409</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType/><con:status>500</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:request name="Request 1" mediaType="application/json"><con:settings/><con:endpoint>https://europaems</con:endpoint><con:parameters/></con:request></con:method><con:method name="delete" method="DELETE"><con:settings/><con:parameters><con:parameter><con:name>recurse</con:name><con:value/><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:boolean</con:type><con:default/></con:parameter><con:parameter><con:name>recurseDepth</con:name><con:value/><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:integer</con:type><con:default/></con:parameter><con:parameter><con:name>search</con:name><con:value/><con:style>QUERY</con:style><con:default/></con:parameter><con:parameter><con:name>timestamp</con:name><con:value/><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:date</con:type><con:default/></con:parameter></con:parameters><con:representation type="RESPONSE" id=""><con:mediaType>application/json</con:mediaType><con:status>200</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>202</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType/><con:status>401</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType/><con:status>404</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType/><con:status>500</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:request name="Request 1" mediaType="application/json"><con:settings/><con:endpoint>https://europaems</con:endpoint><con:parameters/></con:request></con:method><con:method name="get" method="GET"><con:settings/><con:parameters><con:parameter><con:name>recurse</con:name><con:value/><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:boolean</con:type><con:default/></con:parameter><con:parameter><con:name>recurseDepth</con:name><con:value/><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:integer</con:type><con:default/></con:parameter><con:parameter><con:name>search</con:name><con:value/><con:style>QUERY</con:style><con:default/></con:parameter><con:parameter><con:name>timestamp</con:name><con:value/><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:date</con:type><con:default/></con:parameter></con:parameters><con:representation type="RESPONSE" id=""><con:mediaType>application/json</con:mediaType><con:status>200</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType/><con:status>400</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType/><con:status>401</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType/><con:status>404</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType/><con:status>500</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:request name="Request 1" mediaType="application/json"><con:settings/><con:endpoint>https://europaems</con:endpoint><con:parameters/></con:request></con:method></con:resource><con:resource name="/constraints" path="constraints"><con:settings/><con:parameters><con:parameter required="true"><con:name>workspaceId</con:name><con:value/><con:style>TEMPLATE</con:style><con:default/></con:parameter></con:parameters></con:resource><con:resource name="/elements" path="elements"><con:settings/><con:parameters><con:parameter required="true"><con:name>workspaceId</con:name><con:value/><con:style>TEMPLATE</con:style><con:default/></con:parameter></con:parameters><con:resource name="/{elementId}" path="{elementId}"><con:settings/><con:parameters><con:parameter required="true" disableUrlEncoding="false"><con:name>workspaceId</con:name><con:value/><con:style>TEMPLATE</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default/><con:description xsi:nil="true"/></con:parameter><con:parameter required="true"><con:name>elementId</con:name><con:value/><con:style>TEMPLATE</con:style><con:default/></con:parameter></con:parameters><con:resource name="/versions" path="versions"><con:settings/><con:parameters><con:parameter required="true"><con:name>workspaceId</con:name><con:value/><con:style>TEMPLATE</con:style><con:default/></con:parameter><con:parameter required="true"><con:name>elementId</con:name><con:value/><con:style>TEMPLATE</con:style><con:default/></con:parameter></con:parameters><con:resource name="/{versionId}" path="{versionId}"><con:settings/><con:parameters><con:parameter required="true"><con:name>workspaceId</con:name><con:value/><con:style>TEMPLATE</con:style><con:default/></con:parameter><con:parameter required="true"><con:name>elementId</con:name><con:value/><con:style>TEMPLATE</con:style><con:default/></con:parameter><con:parameter required="true"><con:name>versionId</con:name><con:value/><con:style>TEMPLATE</con:style><con:default/></con:parameter></con:parameters><con:method name="post" method="POST"><con:settings/><con:parameters><con:parameter><con:name>recurse</con:name><con:value/><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:boolean</con:type><con:default/></con:parameter><con:parameter><con:name>recurseDepth</con:name><con:value/><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:integer</con:type><con:default/></con:parameter><con:parameter><con:name>search</con:name><con:value/><con:style>QUERY</con:style><con:default/></con:parameter><con:parameter><con:name>timestamp</con:name><con:value/><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:date</con:type><con:default/></con:parameter></con:parameters><con:representation type="REQUEST" id=""><con:mediaType>application/json</con:mediaType><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/json</con:mediaType><con:status/><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/json</con:mediaType><con:status>200</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>202</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType/><con:status>401</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType/><con:status>404</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType/><con:status>409</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType/><con:status>500</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:request name="Request 1" mediaType="application/json"><con:settings/><con:endpoint>https://europaems</con:endpoint><con:parameters/></con:request></con:method><con:method name="put" method="PUT"><con:settings/><con:parameters><con:parameter><con:name>recurse</con:name><con:value/><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:boolean</con:type><con:default/></con:parameter><con:parameter><con:name>recurseDepth</con:name><con:value/><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:integer</con:type><con:default/></con:parameter><con:parameter><con:name>search</con:name><con:value/><con:style>QUERY</con:style><con:default/></con:parameter><con:parameter><con:name>timestamp</con:name><con:value/><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:date</con:type><con:default/></con:parameter></con:parameters><con:representation type="REQUEST" id=""><con:mediaType>application/json</con:mediaType><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/json</con:mediaType><con:status/><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/json</con:mediaType><con:status>200</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>201</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>202</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType/><con:status>401</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType/><con:status>404</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType/><con:status>409</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType/><con:status>500</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:request name="Request 1" mediaType="application/json"><con:settings/><con:endpoint>https://europaems</con:endpoint><con:parameters/></con:request></con:method><con:method name="delete" method="DELETE"><con:settings/><con:parameters><con:parameter><con:name>recurse</con:name><con:value/><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:boolean</con:type><con:default/></con:parameter><con:parameter><con:name>recurseDepth</con:name><con:value/><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:integer</con:type><con:default/></con:parameter><con:parameter><con:name>search</con:name><con:value/><con:style>QUERY</con:style><con:default/></con:parameter><con:parameter><con:name>timestamp</con:name><con:value/><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:date</con:type><con:default/></con:parameter></con:parameters><con:representation type="RESPONSE" id=""><con:mediaType>application/json</con:mediaType><con:status>200</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>202</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType/><con:status>401</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType/><con:status>404</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType/><con:status>500</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:request name="Request 1" mediaType="application/json"><con:settings/><con:endpoint>https://europaems</con:endpoint><con:parameters/></con:request></con:method><con:method name="get" method="GET"><con:settings/><con:parameters><con:parameter><con:name>recurse</con:name><con:value/><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:boolean</con:type><con:default/></con:parameter><con:parameter><con:name>recurseDepth</con:name><con:value/><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:integer</con:type><con:default/></con:parameter><con:parameter><con:name>search</con:name><con:value/><con:style>QUERY</con:style><con:default/></con:parameter><con:parameter><con:name>timestamp</con:name><con:value/><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:date</con:type><con:default/></con:parameter></con:parameters><con:representation type="RESPONSE" id=""><con:mediaType>application/json</con:mediaType><con:status>200</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType/><con:status>400</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType/><con:status>401</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType/><con:status>404</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType/><con:status>500</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:request name="Request 1" mediaType="application/json"><con:settings/><con:endpoint>https://europaems</con:endpoint><con:parameters/></con:request></con:method></con:resource><con:method name="post" method="POST"><con:settings/><con:parameters><con:parameter><con:name>recurse</con:name><con:value/><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:boolean</con:type><con:default/></con:parameter><con:parameter><con:name>recurseDepth</con:name><con:value/><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:integer</con:type><con:default/></con:parameter><con:parameter><con:name>search</con:name><con:value/><con:style>QUERY</con:style><con:default/></con:parameter><con:parameter><con:name>timestamp</con:name><con:value/><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:date</con:type><con:default/></con:parameter></con:parameters><con:representation type="REQUEST" id=""><con:mediaType>application/json</con:mediaType><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/json</con:mediaType><con:status/><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/json</con:mediaType><con:status>200</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>202</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType/><con:status>401</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType/><con:status>404</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType/><con:status>409</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType/><con:status>500</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:request name="Request 1" mediaType="application/json"><con:settings/><con:endpoint>https://europaems</con:endpoint><con:parameters/></con:request></con:method><con:method name="put" method="PUT"><con:settings/><con:parameters><con:parameter><con:name>recurse</con:name><con:value/><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:boolean</con:type><con:default/></con:parameter><con:parameter><con:name>recurseDepth</con:name><con:value/><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:integer</con:type><con:default/></con:parameter><con:parameter><con:name>search</con:name><con:value/><con:style>QUERY</con:style><con:default/></con:parameter><con:parameter><con:name>timestamp</con:name><con:value/><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:date</con:type><con:default/></con:parameter></con:parameters><con:representation type="REQUEST" id=""><con:mediaType>application/json</con:mediaType><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/json</con:mediaType><con:status/><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/json</con:mediaType><con:status>200</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>201</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>202</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType/><con:status>401</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType/><con:status>404</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType/><con:status>409</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType/><con:status>500</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:request name="Request 1" mediaType="application/json"><con:settings/><con:endpoint>https://europaems</con:endpoint><con:parameters/></con:request></con:method><con:method name="delete" method="DELETE"><con:settings/><con:parameters><con:parameter><con:name>recurse</con:name><con:value/><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:boolean</con:type><con:default/></con:parameter><con:parameter><con:name>recurseDepth</con:name><con:value/><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:integer</con:type><con:default/></con:parameter><con:parameter><con:name>search</con:name><con:value/><con:style>QUERY</con:style><con:default/></con:parameter><con:parameter><con:name>timestamp</con:name><con:value/><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:date</con:type><con:default/></con:parameter></con:parameters><con:representation type="RESPONSE" id=""><con:mediaType>application/json</con:mediaType><con:status>200</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>202</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType/><con:status>401</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType/><con:status>404</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType/><con:status>500</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:request name="Request 1" mediaType="application/json"><con:settings/><con:endpoint>https://europaems</con:endpoint><con:parameters/></con:request></con:method><con:method name="get" method="GET"><con:settings/><con:parameters><con:parameter><con:name>recurse</con:name><con:value/><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:boolean</con:type><con:default/></con:parameter><con:parameter><con:name>recurseDepth</con:name><con:value/><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:integer</con:type><con:default/></con:parameter><con:parameter><con:name>search</con:name><con:value/><con:style>QUERY</con:style><con:default/></con:parameter><con:parameter><con:name>timestamp</con:name><con:value/><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:date</con:type><con:default/></con:parameter></con:parameters><con:representation type="RESPONSE" id=""><con:mediaType>application/json</con:mediaType><con:status>200</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType/><con:status>400</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType/><con:status>401</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType/><con:status>404</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType/><con:status>500</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:request name="Request 1" mediaType="application/json"><con:settings/><con:endpoint>https://europaems</con:endpoint><con:parameters/></con:request></con:method></con:resource><con:resource name="/comments" path="comments"><con:settings/><con:parameters><con:parameter required="true"><con:name>workspaceId</con:name><con:value/><con:style>TEMPLATE</con:style><con:default/></con:parameter><con:parameter required="true"><con:name>elementId</con:name><con:value/><con:style>TEMPLATE</con:style><con:default/></con:parameter></con:parameters><con:resource name="/{commentId}" path="{commentId}"><con:settings/><con:parameters><con:parameter required="true"><con:name>workspaceId</con:name><con:value/><con:style>TEMPLATE</con:style><con:default/></con:parameter><con:parameter required="true"><con:name>elementId</con:name><con:value/><con:style>TEMPLATE</con:style><con:default/></con:parameter><con:parameter required="true"><con:name>commentId</con:name><con:value/><con:style>TEMPLATE</con:style><con:default/></con:parameter></con:parameters><con:method name="post" method="POST"><con:settings/><con:parameters><con:parameter><con:name>recurse</con:name><con:value/><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:boolean</con:type><con:default/></con:parameter><con:parameter><con:name>recurseDepth</con:name><con:value/><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:integer</con:type><con:default/></con:parameter><con:parameter><con:name>search</con:name><con:value/><con:style>QUERY</con:style><con:default/></con:parameter><con:parameter><con:name>timestamp</con:name><con:value/><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:date</con:type><con:default/></con:parameter></con:parameters><con:representation type="REQUEST" id=""><con:mediaType>application/json</con:mediaType><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/json</con:mediaType><con:status/><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/json</con:mediaType><con:status>200</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>202</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType/><con:status>401</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType/><con:status>404</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType/><con:status>409</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType/><con:status>500</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:request name="Request 1" mediaType="application/json"><con:settings/><con:endpoint>https://europaems</con:endpoint><con:parameters/></con:request></con:method><con:method name="put" method="PUT"><con:settings/><con:parameters><con:parameter><con:name>recurse</con:name><con:value/><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:boolean</con:type><con:default/></con:parameter><con:parameter><con:name>recurseDepth</con:name><con:value/><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:integer</con:type><con:default/></con:parameter><con:parameter><con:name>search</con:name><con:value/><con:style>QUERY</con:style><con:default/></con:parameter><con:parameter><con:name>timestamp</con:name><con:value/><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:date</con:type><con:default/></con:parameter></con:parameters><con:representation type="REQUEST" id=""><con:mediaType>application/json</con:mediaType><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/json</con:mediaType><con:status/><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/json</con:mediaType><con:status>200</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>201</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>202</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType/><con:status>401</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType/><con:status>404</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType/><con:status>409</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType/><con:status>500</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:request name="Request 1" mediaType="application/json"><con:settings/><con:endpoint>https://europaems</con:endpoint><con:parameters/></con:request></con:method><con:method name="delete" method="DELETE"><con:settings/><con:parameters><con:parameter><con:name>recurse</con:name><con:value/><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:boolean</con:type><con:default/></con:parameter><con:parameter><con:name>recurseDepth</con:name><con:value/><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:integer</con:type><con:default/></con:parameter><con:parameter><con:name>search</con:name><con:value/><con:style>QUERY</con:style><con:default/></con:parameter><con:parameter><con:name>timestamp</con:name><con:value/><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:date</con:type><con:default/></con:parameter></con:parameters><con:representation type="RESPONSE" id=""><con:mediaType>application/json</con:mediaType><con:status>200</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>202</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType/><con:status>401</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType/><con:status>404</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType/><con:status>500</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:request name="Request 1" mediaType="application/json"><con:settings/><con:endpoint>https://europaems</con:endpoint><con:parameters/></con:request></con:method><con:method name="get" method="GET"><con:settings/><con:parameters><con:parameter><con:name>recurse</con:name><con:value/><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:boolean</con:type><con:default/></con:parameter><con:parameter><con:name>recurseDepth</con:name><con:value/><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:integer</con:type><con:default/></con:parameter><con:parameter><con:name>search</con:name><con:value/><con:style>QUERY</con:style><con:default/></con:parameter><con:parameter><con:name>timestamp</con:name><con:value/><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:date</con:type><con:default/></con:parameter></con:parameters><con:representation type="RESPONSE" id=""><con:mediaType>application/json</con:mediaType><con:status>200</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType/><con:status>400</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType/><con:status>401</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType/><con:status>404</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType/><con:status>500</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:request name="Request 1" mediaType="application/json"><con:settings/><con:endpoint>https://europaems</con:endpoint><con:parameters/></con:request></con:method></con:resource><con:method name="post" method="POST"><con:settings/><con:parameters><con:parameter><con:name>recurse</con:name><con:value/><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:boolean</con:type><con:default/></con:parameter><con:parameter><con:name>recurseDepth</con:name><con:value/><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:integer</con:type><con:default/></con:parameter><con:parameter><con:name>search</con:name><con:value/><con:style>QUERY</con:style><con:default/></con:parameter><con:parameter><con:name>timestamp</con:name><con:value/><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:date</con:type><con:default/></con:parameter></con:parameters><con:representation type="REQUEST" id=""><con:mediaType>application/json</con:mediaType><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/json</con:mediaType><con:status/><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/json</con:mediaType><con:status>200</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>202</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType/><con:status>401</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType/><con:status>404</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType/><con:status>409</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType/><con:status>500</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:request name="Request 1" mediaType="application/json"><con:settings/><con:endpoint>https://europaems</con:endpoint><con:parameters/></con:request></con:method><con:method name="put" method="PUT"><con:settings/><con:parameters><con:parameter><con:name>recurse</con:name><con:value/><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:boolean</con:type><con:default/></con:parameter><con:parameter><con:name>recurseDepth</con:name><con:value/><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:integer</con:type><con:default/></con:parameter><con:parameter><con:name>search</con:name><con:value/><con:style>QUERY</con:style><con:default/></con:parameter><con:parameter><con:name>timestamp</con:name><con:value/><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:date</con:type><con:default/></con:parameter></con:parameters><con:representation type="REQUEST" id=""><con:mediaType>application/json</con:mediaType><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/json</con:mediaType><con:status/><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/json</con:mediaType><con:status>200</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>201</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>202</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType/><con:status>401</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType/><con:status>404</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType/><con:status>409</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType/><con:status>500</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:request name="Request 1" mediaType="application/json"><con:settings/><con:endpoint>https://europaems</con:endpoint><con:parameters/></con:request></con:method><con:method name="delete" method="DELETE"><con:settings/><con:parameters><con:parameter><con:name>recurse</con:name><con:value/><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:boolean</con:type><con:default/></con:parameter><con:parameter><con:name>recurseDepth</con:name><con:value/><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:integer</con:type><con:default/></con:parameter><con:parameter><con:name>search</con:name><con:value/><con:style>QUERY</con:style><con:default/></con:parameter><con:parameter><con:name>timestamp</con:name><con:value/><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:date</con:type><con:default/></con:parameter></con:parameters><con:representation type="RESPONSE" id=""><con:mediaType>application/json</con:mediaType><con:status>200</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>202</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType/><con:status>401</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType/><con:status>404</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType/><con:status>500</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:request name="Request 1" mediaType="application/json"><con:settings/><con:endpoint>https://europaems</con:endpoint><con:parameters/></con:request></con:method><con:method name="get" method="GET"><con:settings/><con:parameters><con:parameter><con:name>recurse</con:name><con:value/><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:boolean</con:type><con:default/></con:parameter><con:parameter><con:name>recurseDepth</con:name><con:value/><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:integer</con:type><con:default/></con:parameter><con:parameter><con:name>search</con:name><con:value/><con:style>QUERY</con:style><con:default/></con:parameter><con:parameter><con:name>timestamp</con:name><con:value/><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:date</con:type><con:default/></con:parameter></con:parameters><con:representation type="RESPONSE" id=""><con:mediaType>application/json</con:mediaType><con:status>200</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType/><con:status>400</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType/><con:status>401</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType/><con:status>404</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType/><con:status>500</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:request name="Request 1" mediaType="application/json"><con:settings/><con:endpoint>https://europaems</con:endpoint><con:parameters/></con:request></con:method></con:resource><con:method name="post" method="POST"><con:settings/><con:parameters><con:parameter><con:name>recurse</con:name><con:value/><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:boolean</con:type><con:default/></con:parameter><con:parameter><con:name>recurseDepth</con:name><con:value/><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:integer</con:type><con:default/></con:parameter><con:parameter><con:name>search</con:name><con:value/><con:style>QUERY</con:style><con:default/></con:parameter><con:parameter><con:name>timestamp</con:name><con:value/><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:date</con:type><con:default/></con:parameter></con:parameters><con:representation type="REQUEST" id=""><con:mediaType>application/json</con:mediaType><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/json</con:mediaType><con:status/><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/json</con:mediaType><con:status>200</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>202</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType/><con:status>401</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType/><con:status>404</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType/><con:status>409</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType/><con:status>500</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:request name="Request 1" mediaType="application/json"><con:settings/><con:endpoint>https://europaems</con:endpoint><con:parameters/></con:request></con:method><con:method name="put" method="PUT"><con:settings/><con:parameters><con:parameter><con:name>recurse</con:name><con:value/><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:boolean</con:type><con:default/></con:parameter><con:parameter><con:name>recurseDepth</con:name><con:value/><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:integer</con:type><con:default/></con:parameter><con:parameter><con:name>search</con:name><con:value/><con:style>QUERY</con:style><con:default/></con:parameter><con:parameter><con:name>timestamp</con:name><con:value/><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:date</con:type><con:default/></con:parameter></con:parameters><con:representation type="REQUEST" id=""><con:mediaType>application/json</con:mediaType><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/json</con:mediaType><con:status/><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/json</con:mediaType><con:status>200</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>201</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>202</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType/><con:status>401</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType/><con:status>404</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType/><con:status>409</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType/><con:status>500</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:request name="Request 1" mediaType="application/json"><con:settings/><con:endpoint>https://europaems</con:endpoint><con:parameters/></con:request></con:method><con:method name="delete" method="DELETE"><con:settings/><con:parameters><con:parameter><con:name>recurse</con:name><con:value/><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:boolean</con:type><con:default/></con:parameter><con:parameter><con:name>recurseDepth</con:name><con:value/><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:integer</con:type><con:default/></con:parameter><con:parameter><con:name>search</con:name><con:value/><con:style>QUERY</con:style><con:default/></con:parameter><con:parameter><con:name>timestamp</con:name><con:value/><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:date</con:type><con:default/></con:parameter></con:parameters><con:representation type="RESPONSE" id=""><con:mediaType>application/json</con:mediaType><con:status>200</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>202</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType/><con:status>401</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType/><con:status>404</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType/><con:status>500</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:request name="Request 1" mediaType="application/json"><con:settings/><con:endpoint>https://europaems</con:endpoint><con:parameters/></con:request></con:method><con:method name="get" method="GET"><con:settings/><con:parameters><con:parameter><con:name>recurse</con:name><con:value/><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:boolean</con:type><con:default/></con:parameter><con:parameter><con:name>recurseDepth</con:name><con:value/><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:integer</con:type><con:default/></con:parameter><con:parameter><con:name>search</con:name><con:value/><con:style>QUERY</con:style><con:default/></con:parameter><con:parameter><con:name>timestamp</con:name><con:value/><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:date</con:type><con:default/></con:parameter></con:parameters><con:representation type="RESPONSE" id=""><con:mediaType>application/json</con:mediaType><con:status>200</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType/><con:status>400</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType/><con:status>401</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType/><con:status>404</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType/><con:status>500</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:request name="Request 1" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://128.149.16.140:8080</con:endpoint><con:request/><con:originalUri>http://127.0.0.1/alfresco/service/workspaces/master/elements/19</con:originalUri><con:credentials><con:username>muschek</con:username><con:password>B1rthwr1te</con:password><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="workspaceId" value="master"/>
  <con:entry key="elementId" value="_17_0_5_1_407019f_1405014267459_929343_17783"/>
</con:parameters></con:request></con:method></con:resource><con:method name="post" method="POST"><con:settings/><con:parameters><con:parameter><con:name>recurse</con:name><con:value/><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:boolean</con:type><con:default/></con:parameter><con:parameter><con:name>recurseDepth</con:name><con:value/><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:integer</con:type><con:default/></con:parameter><con:parameter><con:name>search</con:name><con:value/><con:style>QUERY</con:style><con:default/></con:parameter><con:parameter><con:name>timestamp</con:name><con:value/><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:date</con:type><con:default/></con:parameter><con:parameter><con:name>background</con:name><con:value/><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:boolean</con:type><con:default/></con:parameter></con:parameters><con:representation type="REQUEST" id=""><con:mediaType>application/json</con:mediaType><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/json</con:mediaType><con:status/><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/json</con:mediaType><con:status>200</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>202</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType/><con:status>401</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType/><con:status>404</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType/><con:status>409</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType/><con:status>500</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:request name="Request 1" mediaType="application/json"><con:settings/><con:endpoint>https://europaems</con:endpoint><con:parameters/></con:request></con:method><con:method name="put" method="PUT"><con:settings/><con:parameters><con:parameter><con:name>recurse</con:name><con:value/><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:boolean</con:type><con:default/></con:parameter><con:parameter><con:name>recurseDepth</con:name><con:value/><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:integer</con:type><con:default/></con:parameter><con:parameter><con:name>search</con:name><con:value/><con:style>QUERY</con:style><con:default/></con:parameter><con:parameter><con:name>timestamp</con:name><con:value/><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:date</con:type><con:default/></con:parameter><con:parameter><con:name>background</con:name><con:value/><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:boolean</con:type><con:default/></con:parameter></con:parameters><con:representation type="REQUEST" id=""><con:mediaType>application/json</con:mediaType><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/json</con:mediaType><con:status/><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/json</con:mediaType><con:status>200</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>201</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>202</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType/><con:status>401</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType/><con:status>404</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType/><con:status>409</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType/><con:status>500</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:request name="Request 1" mediaType="application/json"><con:settings/><con:endpoint>https://europaems</con:endpoint><con:parameters/></con:request></con:method><con:method name="delete" method="DELETE"><con:settings/><con:parameters><con:parameter><con:name>recurse</con:name><con:value/><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:boolean</con:type><con:default/></con:parameter><con:parameter><con:name>recurseDepth</con:name><con:value/><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:integer</con:type><con:default/></con:parameter><con:parameter><con:name>search</con:name><con:value/><con:style>QUERY</con:style><con:default/></con:parameter><con:parameter><con:name>timestamp</con:name><con:value/><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:date</con:type><con:default/></con:parameter><con:parameter><con:name>background</con:name><con:value/><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:boolean</con:type><con:default/></con:parameter></con:parameters><con:representation type="RESPONSE" id=""><con:mediaType>application/json</con:mediaType><con:status>200</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>202</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType/><con:status>401</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType/><con:status>404</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType/><con:status>500</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:request name="Request 1" mediaType="application/json"><con:settings/><con:endpoint>https://europaems</con:endpoint><con:parameters/></con:request></con:method><con:method name="get" method="GET"><con:settings/><con:parameters><con:parameter><con:name>recurse</con:name><con:value/><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:boolean</con:type><con:default/></con:parameter><con:parameter><con:name>recurseDepth</con:name><con:value/><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:integer</con:type><con:default/></con:parameter><con:parameter><con:name>search</con:name><con:value/><con:style>QUERY</con:style><con:default/></con:parameter><con:parameter><con:name>timestamp</con:name><con:value/><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:date</con:type><con:default/></con:parameter></con:parameters><con:representation type="RESPONSE" id=""><con:mediaType>application/json</con:mediaType><con:status>200</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType/><con:status>400</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType/><con:status>401</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType/><con:status>404</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType/><con:status>500</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:request name="Request 1" mediaType="application/json"><con:settings/><con:endpoint>https://europaems</con:endpoint><con:parameters/></con:request></con:method></con:resource></con:resource></con:resource></con:interface><con:testSuite name="elements/{elementId}"><con:description>TestSuite generated for REST Service [mms]</con:description><con:settings/><con:runType>SEQUENTIAL</con:runType><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="/{elementId} TestCase" searchProperties="true"><con:description>TestCase generated for REST Resource [/{elementId}] located at [/workspaces/{workspaceId}/elements/{elementId}]</con:description><con:settings/><con:testStep type="restrequest" name="Post"><con:settings/><con:config service="mms" resourcePath="/alfresco/service/javawebscripts/sites/elements/{elementId}" methodName="post" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Post" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://127.0.0.1:8080/</con:endpoint><con:request/><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="Request 1 1"><con:settings/><con:config service="mms" resourcePath="/alfresco/service/javawebscripts/sites/elements/{elementId}" methodName="put" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Request 1 1" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://127.0.0.1:8080/</con:endpoint><con:request/><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="Request 1 2"><con:settings/><con:config service="mms" resourcePath="/alfresco/service/javawebscripts/sites/elements/{elementId}" methodName="delete" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Request 1 2" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://127.0.0.1:8080/</con:endpoint><con:request/><con:originalUri>http://127.0.0.1/alfresco/service/workspaces//elements/</con:originalUri><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="Get"><con:settings/><con:config service="mms" resourcePath="/alfresco/service/javawebscripts/sites/elements/{elementId}" methodName="get" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Get" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://ems.jpl.nasa.gov</con:endpoint><con:request/><con:originalUri>http://127.0.0.1/alfresco/service/workspaces/master/elements/19</con:originalUri><con:assertion type="Simple Contains" name="Contains"><con:configuration><token>"elements"</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple NotContains" name="Not Contains"><con:configuration><token>"foo"</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple Contains" name="specification" disabled="true"><con:configuration><token>"specification"</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:username>muschek</con:username><con:password>B1rthwr1te</con:password><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="workspaceId" value="master"/>
  <con:entry key="elementId" value="_17_0_5_1_407019f_1405014267459_929343_17783"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:properties/><con:reportParameters/></con:testSuite><con:testSuite name="maxRegression"><con:settings/><con:runType>SEQUENTIAL</con:runType><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TestCase 1" searchProperties="true" id="56916656-e4cf-4a66-ab04-94acac123010"><con:settings/><con:testStep type="restrequest" name="get - Request 1"><con:settings/><con:config service="mms" resourcePath="/alfresco/service/javawebscripts/sites/{siteId}/projects/{projectId}" methodName="get" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="get - Request 1" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://128.149.16.140:8080</con:endpoint><con:request/><con:originalUri>http://128.149.16.140/alfresco/service/javawebscripts/sites/europa/projects/123456</con:originalUri><con:assertion type="Simple Contains" name="name"><con:configuration><token>"name"</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple Contains" name="sysmlid"><con:configuration><token>"sysmlid"</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:username>admin</con:username><con:password>admin</con:password><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="siteId" value="europa"/>
  <con:entry key="projectId" value="123456"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:properties/><con:reportParameters/></con:testSuite><con:restMockService port="8080" path="/" name="MockService"><con:settings/><con:properties/><con:restMockAction name="/alfresco/service/workspaces" method="GET" resourcePath="/alfresco/service/workspaces"><con:settings/><con:defaultResponse>Response 1</con:defaultResponse><con:dispatchStyle>SEQUENCE</con:dispatchStyle><con:dispatchPath>/*
// Examples showing how to match based on path, query param and header
// Match based on path
def requestPath = mockRequest.getPath()
log.info "Path: "+ requestPath

if( requestPath.contains("json") )
{
    // return the name of the response you want to dispatch
    return "JSON Response"
}


// Match based on query parameter
def queryString = mockRequest.getRequest().getQueryString()
log.info "QueryString: " + queryString

if( queryString.contains("stockholm") )
{
    // return the name of the response you want to dispatch
    return "Response Stockholm"
}
else if( queryString.contains("london") )
{
    // return the name of the response you want to dispatch
    return "Response London"
}


// Match based on header
def acceptEncodingHeadeList = mockRequest.getRequestHeaders().get("Accept-Encoding")
log.info "AcceptEncodig Header List: " + acceptEncodingHeadeList

if( acceptEncodingHeadeList.contains("gzip,deflate") )
{
    // return the name of the response you want to dispatch
    return "GZiped Response"
}

*/
</con:dispatchPath><con:response name="Response 1" httpResponseStatus="200"><con:settings/></con:response></con:restMockAction><con:restMockAction name="/alfresco/service/workspaces/" method="GET" resourcePath="/alfresco/service/workspaces/"><con:settings/><con:defaultResponse>Response 1</con:defaultResponse><con:dispatchStyle>SEQUENCE</con:dispatchStyle><con:dispatchPath>/*
// Examples showing how to match based on path, query param and header
// Match based on path
def requestPath = mockRequest.getPath()
log.info "Path: "+ requestPath

if( requestPath.contains("json") )
{
    // return the name of the response you want to dispatch
    return "JSON Response"
}


// Match based on query parameter
def queryString = mockRequest.getRequest().getQueryString()
log.info "QueryString: " + queryString

if( queryString.contains("stockholm") )
{
    // return the name of the response you want to dispatch
    return "Response Stockholm"
}
else if( queryString.contains("london") )
{
    // return the name of the response you want to dispatch
    return "Response London"
}


// Match based on header
def acceptEncodingHeadeList = mockRequest.getRequestHeaders().get("Accept-Encoding")
log.info "AcceptEncodig Header List: " + acceptEncodingHeadeList

if( acceptEncodingHeadeList.contains("gzip,deflate") )
{
    // return the name of the response you want to dispatch
    return "GZiped Response"
}

*/
</con:dispatchPath><con:response name="Response 1" httpResponseStatus="200"><con:settings/><con:responseContent/></con:response></con:restMockAction><con:restMockAction name="/alfresco/service/workspaces//artifacts" method="GET" resourcePath="/alfresco/service/workspaces//artifacts"><con:settings/><con:defaultResponse xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/><con:dispatchStyle>SEQUENCE</con:dispatchStyle><con:dispatchPath>/*
// Examples showing how to match based on path, query param and header
// Match based on path
def requestPath = mockRequest.getPath()
log.info "Path: "+ requestPath

if( requestPath.contains("json") )
{
    // return the name of the response you want to dispatch
    return "JSON Response"
}


// Match based on query parameter
def queryString = mockRequest.getRequest().getQueryString()
log.info "QueryString: " + queryString

if( queryString.contains("stockholm") )
{
    // return the name of the response you want to dispatch
    return "Response Stockholm"
}
else if( queryString.contains("london") )
{
    // return the name of the response you want to dispatch
    return "Response London"
}


// Match based on header
def acceptEncodingHeadeList = mockRequest.getRequestHeaders().get("Accept-Encoding")
log.info "AcceptEncodig Header List: " + acceptEncodingHeadeList

if( acceptEncodingHeadeList.contains("gzip,deflate") )
{
    // return the name of the response you want to dispatch
    return "GZiped Response"
}

*/
</con:dispatchPath><con:response name="Response 1" httpResponseStatus="200"><con:settings/></con:response></con:restMockAction><con:restMockAction name="/alfresco/service/workspaces//sites" method="GET" resourcePath="/alfresco/service/workspaces//sites"><con:settings/><con:defaultResponse>Response 1</con:defaultResponse><con:dispatchStyle>SEQUENCE</con:dispatchStyle><con:dispatchPath>/*
// Examples showing how to match based on path, query param and header
// Match based on path
def requestPath = mockRequest.getPath()
log.info "Path: "+ requestPath

if( requestPath.contains("json") )
{
    // return the name of the response you want to dispatch
    return "JSON Response"
}


// Match based on query parameter
def queryString = mockRequest.getRequest().getQueryString()
log.info "QueryString: " + queryString

if( queryString.contains("stockholm") )
{
    // return the name of the response you want to dispatch
    return "Response Stockholm"
}
else if( queryString.contains("london") )
{
    // return the name of the response you want to dispatch
    return "Response London"
}


// Match based on header
def acceptEncodingHeadeList = mockRequest.getRequestHeaders().get("Accept-Encoding")
log.info "AcceptEncodig Header List: " + acceptEncodingHeadeList

if( acceptEncodingHeadeList.contains("gzip,deflate") )
{
    // return the name of the response you want to dispatch
    return "GZiped Response"
}

*/
</con:dispatchPath><con:response name="Response 1" httpResponseStatus="200"><con:settings/></con:response></con:restMockAction><con:restMockAction name="/alfresco/service/workspaces//sites/" method="GET" resourcePath="/alfresco/service/workspaces//sites/"><con:settings/><con:defaultResponse>Response 1</con:defaultResponse><con:dispatchStyle>SEQUENCE</con:dispatchStyle><con:dispatchPath>/*
// Examples showing how to match based on path, query param and header
// Match based on path
def requestPath = mockRequest.getPath()
log.info "Path: "+ requestPath

if( requestPath.contains("json") )
{
    // return the name of the response you want to dispatch
    return "JSON Response"
}


// Match based on query parameter
def queryString = mockRequest.getRequest().getQueryString()
log.info "QueryString: " + queryString

if( queryString.contains("stockholm") )
{
    // return the name of the response you want to dispatch
    return "Response Stockholm"
}
else if( queryString.contains("london") )
{
    // return the name of the response you want to dispatch
    return "Response London"
}


// Match based on header
def acceptEncodingHeadeList = mockRequest.getRequestHeaders().get("Accept-Encoding")
log.info "AcceptEncodig Header List: " + acceptEncodingHeadeList

if( acceptEncodingHeadeList.contains("gzip,deflate") )
{
    // return the name of the response you want to dispatch
    return "GZiped Response"
}

*/
</con:dispatchPath><con:response name="Response 1" httpResponseStatus="200"><con:settings/></con:response></con:restMockAction><con:restMockAction name="/alfresco/service/workspaces//sites//projects" method="GET" resourcePath="/alfresco/service/workspaces//sites//projects"><con:settings/><con:defaultResponse>Response 1</con:defaultResponse><con:dispatchStyle>SEQUENCE</con:dispatchStyle><con:dispatchPath>/*
// Examples showing how to match based on path, query param and header
// Match based on path
def requestPath = mockRequest.getPath()
log.info "Path: "+ requestPath

if( requestPath.contains("json") )
{
    // return the name of the response you want to dispatch
    return "JSON Response"
}


// Match based on query parameter
def queryString = mockRequest.getRequest().getQueryString()
log.info "QueryString: " + queryString

if( queryString.contains("stockholm") )
{
    // return the name of the response you want to dispatch
    return "Response Stockholm"
}
else if( queryString.contains("london") )
{
    // return the name of the response you want to dispatch
    return "Response London"
}


// Match based on header
def acceptEncodingHeadeList = mockRequest.getRequestHeaders().get("Accept-Encoding")
log.info "AcceptEncodig Header List: " + acceptEncodingHeadeList

if( acceptEncodingHeadeList.contains("gzip,deflate") )
{
    // return the name of the response you want to dispatch
    return "GZiped Response"
}

*/
</con:dispatchPath><con:response name="Response 1" httpResponseStatus="200"><con:settings/></con:response></con:restMockAction><con:restMockAction name="/alfresco/service/workspaces//sites//projects/" method="GET" resourcePath="/alfresco/service/workspaces//sites//projects/"><con:settings/><con:defaultResponse>Response 1</con:defaultResponse><con:dispatchStyle>SEQUENCE</con:dispatchStyle><con:dispatchPath>/*
// Examples showing how to match based on path, query param and header
// Match based on path
def requestPath = mockRequest.getPath()
log.info "Path: "+ requestPath

if( requestPath.contains("json") )
{
    // return the name of the response you want to dispatch
    return "JSON Response"
}


// Match based on query parameter
def queryString = mockRequest.getRequest().getQueryString()
log.info "QueryString: " + queryString

if( queryString.contains("stockholm") )
{
    // return the name of the response you want to dispatch
    return "Response Stockholm"
}
else if( queryString.contains("london") )
{
    // return the name of the response you want to dispatch
    return "Response London"
}


// Match based on header
def acceptEncodingHeadeList = mockRequest.getRequestHeaders().get("Accept-Encoding")
log.info "AcceptEncodig Header List: " + acceptEncodingHeadeList

if( acceptEncodingHeadeList.contains("gzip,deflate") )
{
    // return the name of the response you want to dispatch
    return "GZiped Response"
}

*/
</con:dispatchPath><con:response name="Response 1" httpResponseStatus="200"><con:settings/></con:response></con:restMockAction><con:restMockAction name="/alfresco/service/workspaces//sites//products" method="POST" resourcePath="/alfresco/service/workspaces//sites//products"><con:settings/><con:defaultResponse>Response 1</con:defaultResponse><con:dispatchStyle>SEQUENCE</con:dispatchStyle><con:dispatchPath>/*
// Examples showing how to match based on path, query param and header
// Match based on path
def requestPath = mockRequest.getPath()
log.info "Path: "+ requestPath

if( requestPath.contains("json") )
{
    // return the name of the response you want to dispatch
    return "JSON Response"
}


// Match based on query parameter
def queryString = mockRequest.getRequest().getQueryString()
log.info "QueryString: " + queryString

if( queryString.contains("stockholm") )
{
    // return the name of the response you want to dispatch
    return "Response Stockholm"
}
else if( queryString.contains("london") )
{
    // return the name of the response you want to dispatch
    return "Response London"
}


// Match based on header
def acceptEncodingHeadeList = mockRequest.getRequestHeaders().get("Accept-Encoding")
log.info "AcceptEncodig Header List: " + acceptEncodingHeadeList

if( acceptEncodingHeadeList.contains("gzip,deflate") )
{
    // return the name of the response you want to dispatch
    return "GZiped Response"
}

*/
</con:dispatchPath><con:response name="Response 1" httpResponseStatus="200"><con:settings/></con:response></con:restMockAction><con:restMockAction name="/alfresco/service/workspaces//sites//products" method="PUT" resourcePath="/alfresco/service/workspaces//sites//products"><con:settings/><con:defaultResponse>Response 1</con:defaultResponse><con:dispatchStyle>SEQUENCE</con:dispatchStyle><con:dispatchPath>/*
// Examples showing how to match based on path, query param and header
// Match based on path
def requestPath = mockRequest.getPath()
log.info "Path: "+ requestPath

if( requestPath.contains("json") )
{
    // return the name of the response you want to dispatch
    return "JSON Response"
}


// Match based on query parameter
def queryString = mockRequest.getRequest().getQueryString()
log.info "QueryString: " + queryString

if( queryString.contains("stockholm") )
{
    // return the name of the response you want to dispatch
    return "Response Stockholm"
}
else if( queryString.contains("london") )
{
    // return the name of the response you want to dispatch
    return "Response London"
}


// Match based on header
def acceptEncodingHeadeList = mockRequest.getRequestHeaders().get("Accept-Encoding")
log.info "AcceptEncodig Header List: " + acceptEncodingHeadeList

if( acceptEncodingHeadeList.contains("gzip,deflate") )
{
    // return the name of the response you want to dispatch
    return "GZiped Response"
}

*/
</con:dispatchPath><con:response name="Response 1" httpResponseStatus="200"><con:settings/></con:response></con:restMockAction><con:restMockAction name="/alfresco/service/workspaces//sites//products" method="DELETE" resourcePath="/alfresco/service/workspaces//sites//products"><con:settings/><con:defaultResponse>Response 1</con:defaultResponse><con:dispatchStyle>SEQUENCE</con:dispatchStyle><con:dispatchPath>/*
// Examples showing how to match based on path, query param and header
// Match based on path
def requestPath = mockRequest.getPath()
log.info "Path: "+ requestPath

if( requestPath.contains("json") )
{
    // return the name of the response you want to dispatch
    return "JSON Response"
}


// Match based on query parameter
def queryString = mockRequest.getRequest().getQueryString()
log.info "QueryString: " + queryString

if( queryString.contains("stockholm") )
{
    // return the name of the response you want to dispatch
    return "Response Stockholm"
}
else if( queryString.contains("london") )
{
    // return the name of the response you want to dispatch
    return "Response London"
}


// Match based on header
def acceptEncodingHeadeList = mockRequest.getRequestHeaders().get("Accept-Encoding")
log.info "AcceptEncodig Header List: " + acceptEncodingHeadeList

if( acceptEncodingHeadeList.contains("gzip,deflate") )
{
    // return the name of the response you want to dispatch
    return "GZiped Response"
}

*/
</con:dispatchPath><con:response name="Response 1" httpResponseStatus="200"><con:settings/></con:response></con:restMockAction><con:restMockAction name="/alfresco/service/workspaces//sites//products" method="GET" resourcePath="/alfresco/service/workspaces//sites//products"><con:settings/><con:defaultResponse>Response 1</con:defaultResponse><con:dispatchStyle>SEQUENCE</con:dispatchStyle><con:dispatchPath>/*
// Examples showing how to match based on path, query param and header
// Match based on path
def requestPath = mockRequest.getPath()
log.info "Path: "+ requestPath

if( requestPath.contains("json") )
{
    // return the name of the response you want to dispatch
    return "JSON Response"
}


// Match based on query parameter
def queryString = mockRequest.getRequest().getQueryString()
log.info "QueryString: " + queryString

if( queryString.contains("stockholm") )
{
    // return the name of the response you want to dispatch
    return "Response Stockholm"
}
else if( queryString.contains("london") )
{
    // return the name of the response you want to dispatch
    return "Response London"
}


// Match based on header
def acceptEncodingHeadeList = mockRequest.getRequestHeaders().get("Accept-Encoding")
log.info "AcceptEncodig Header List: " + acceptEncodingHeadeList

if( acceptEncodingHeadeList.contains("gzip,deflate") )
{
    // return the name of the response you want to dispatch
    return "GZiped Response"
}

*/
</con:dispatchPath><con:response name="Response 1" httpResponseStatus="200"><con:settings/></con:response></con:restMockAction><con:restMockAction name="/alfresco/service/workspaces//sites//products/" method="POST" resourcePath="/alfresco/service/workspaces//sites//products/"><con:settings/><con:defaultResponse>Response 1</con:defaultResponse><con:dispatchStyle>SEQUENCE</con:dispatchStyle><con:dispatchPath>/*
// Examples showing how to match based on path, query param and header
// Match based on path
def requestPath = mockRequest.getPath()
log.info "Path: "+ requestPath

if( requestPath.contains("json") )
{
    // return the name of the response you want to dispatch
    return "JSON Response"
}


// Match based on query parameter
def queryString = mockRequest.getRequest().getQueryString()
log.info "QueryString: " + queryString

if( queryString.contains("stockholm") )
{
    // return the name of the response you want to dispatch
    return "Response Stockholm"
}
else if( queryString.contains("london") )
{
    // return the name of the response you want to dispatch
    return "Response London"
}


// Match based on header
def acceptEncodingHeadeList = mockRequest.getRequestHeaders().get("Accept-Encoding")
log.info "AcceptEncodig Header List: " + acceptEncodingHeadeList

if( acceptEncodingHeadeList.contains("gzip,deflate") )
{
    // return the name of the response you want to dispatch
    return "GZiped Response"
}

*/
</con:dispatchPath><con:response name="Response 1" httpResponseStatus="200"><con:settings/></con:response></con:restMockAction><con:restMockAction name="/alfresco/service/workspaces//sites//products/" method="PUT" resourcePath="/alfresco/service/workspaces//sites//products/"><con:settings/><con:defaultResponse>Response 1</con:defaultResponse><con:dispatchStyle>SEQUENCE</con:dispatchStyle><con:dispatchPath>/*
// Examples showing how to match based on path, query param and header
// Match based on path
def requestPath = mockRequest.getPath()
log.info "Path: "+ requestPath

if( requestPath.contains("json") )
{
    // return the name of the response you want to dispatch
    return "JSON Response"
}


// Match based on query parameter
def queryString = mockRequest.getRequest().getQueryString()
log.info "QueryString: " + queryString

if( queryString.contains("stockholm") )
{
    // return the name of the response you want to dispatch
    return "Response Stockholm"
}
else if( queryString.contains("london") )
{
    // return the name of the response you want to dispatch
    return "Response London"
}


// Match based on header
def acceptEncodingHeadeList = mockRequest.getRequestHeaders().get("Accept-Encoding")
log.info "AcceptEncodig Header List: " + acceptEncodingHeadeList

if( acceptEncodingHeadeList.contains("gzip,deflate") )
{
    // return the name of the response you want to dispatch
    return "GZiped Response"
}

*/
</con:dispatchPath><con:response name="Response 1" httpResponseStatus="200"><con:settings/></con:response></con:restMockAction><con:restMockAction name="/alfresco/service/workspaces//sites//products/" method="DELETE" resourcePath="/alfresco/service/workspaces//sites//products/"><con:settings/><con:defaultResponse>Response 1</con:defaultResponse><con:dispatchStyle>SEQUENCE</con:dispatchStyle><con:dispatchPath>/*
// Examples showing how to match based on path, query param and header
// Match based on path
def requestPath = mockRequest.getPath()
log.info "Path: "+ requestPath

if( requestPath.contains("json") )
{
    // return the name of the response you want to dispatch
    return "JSON Response"
}


// Match based on query parameter
def queryString = mockRequest.getRequest().getQueryString()
log.info "QueryString: " + queryString

if( queryString.contains("stockholm") )
{
    // return the name of the response you want to dispatch
    return "Response Stockholm"
}
else if( queryString.contains("london") )
{
    // return the name of the response you want to dispatch
    return "Response London"
}


// Match based on header
def acceptEncodingHeadeList = mockRequest.getRequestHeaders().get("Accept-Encoding")
log.info "AcceptEncodig Header List: " + acceptEncodingHeadeList

if( acceptEncodingHeadeList.contains("gzip,deflate") )
{
    // return the name of the response you want to dispatch
    return "GZiped Response"
}

*/
</con:dispatchPath><con:response name="Response 1" httpResponseStatus="200"><con:settings/></con:response></con:restMockAction><con:restMockAction name="/alfresco/service/workspaces//sites//products/" method="GET" resourcePath="/alfresco/service/workspaces//sites//products/"><con:settings/><con:defaultResponse>Response 1</con:defaultResponse><con:dispatchStyle>SEQUENCE</con:dispatchStyle><con:dispatchPath>/*
// Examples showing how to match based on path, query param and header
// Match based on path
def requestPath = mockRequest.getPath()
log.info "Path: "+ requestPath

if( requestPath.contains("json") )
{
    // return the name of the response you want to dispatch
    return "JSON Response"
}


// Match based on query parameter
def queryString = mockRequest.getRequest().getQueryString()
log.info "QueryString: " + queryString

if( queryString.contains("stockholm") )
{
    // return the name of the response you want to dispatch
    return "Response Stockholm"
}
else if( queryString.contains("london") )
{
    // return the name of the response you want to dispatch
    return "Response London"
}


// Match based on header
def acceptEncodingHeadeList = mockRequest.getRequestHeaders().get("Accept-Encoding")
log.info "AcceptEncodig Header List: " + acceptEncodingHeadeList

if( acceptEncodingHeadeList.contains("gzip,deflate") )
{
    // return the name of the response you want to dispatch
    return "GZiped Response"
}

*/
</con:dispatchPath><con:response name="Response 1" httpResponseStatus="200"><con:settings/></con:response></con:restMockAction><con:restMockAction name="/alfresco/service/workspaces//sites//products//snapshots" method="POST" resourcePath="/alfresco/service/workspaces//sites//products//snapshots"><con:settings/><con:defaultResponse>Response 1</con:defaultResponse><con:dispatchStyle>SEQUENCE</con:dispatchStyle><con:dispatchPath>/*
// Examples showing how to match based on path, query param and header
// Match based on path
def requestPath = mockRequest.getPath()
log.info "Path: "+ requestPath

if( requestPath.contains("json") )
{
    // return the name of the response you want to dispatch
    return "JSON Response"
}


// Match based on query parameter
def queryString = mockRequest.getRequest().getQueryString()
log.info "QueryString: " + queryString

if( queryString.contains("stockholm") )
{
    // return the name of the response you want to dispatch
    return "Response Stockholm"
}
else if( queryString.contains("london") )
{
    // return the name of the response you want to dispatch
    return "Response London"
}


// Match based on header
def acceptEncodingHeadeList = mockRequest.getRequestHeaders().get("Accept-Encoding")
log.info "AcceptEncodig Header List: " + acceptEncodingHeadeList

if( acceptEncodingHeadeList.contains("gzip,deflate") )
{
    // return the name of the response you want to dispatch
    return "GZiped Response"
}

*/
</con:dispatchPath><con:response name="Response 1" httpResponseStatus="200"><con:settings/></con:response></con:restMockAction><con:restMockAction name="/alfresco/service/workspaces//sites//products//snapshots" method="PUT" resourcePath="/alfresco/service/workspaces//sites//products//snapshots"><con:settings/><con:defaultResponse>Response 1</con:defaultResponse><con:dispatchStyle>SEQUENCE</con:dispatchStyle><con:dispatchPath>/*
// Examples showing how to match based on path, query param and header
// Match based on path
def requestPath = mockRequest.getPath()
log.info "Path: "+ requestPath

if( requestPath.contains("json") )
{
    // return the name of the response you want to dispatch
    return "JSON Response"
}


// Match based on query parameter
def queryString = mockRequest.getRequest().getQueryString()
log.info "QueryString: " + queryString

if( queryString.contains("stockholm") )
{
    // return the name of the response you want to dispatch
    return "Response Stockholm"
}
else if( queryString.contains("london") )
{
    // return the name of the response you want to dispatch
    return "Response London"
}


// Match based on header
def acceptEncodingHeadeList = mockRequest.getRequestHeaders().get("Accept-Encoding")
log.info "AcceptEncodig Header List: " + acceptEncodingHeadeList

if( acceptEncodingHeadeList.contains("gzip,deflate") )
{
    // return the name of the response you want to dispatch
    return "GZiped Response"
}

*/
</con:dispatchPath><con:response name="Response 1" httpResponseStatus="200"><con:settings/></con:response></con:restMockAction><con:restMockAction name="/alfresco/service/workspaces//sites//products//snapshots" method="DELETE" resourcePath="/alfresco/service/workspaces//sites//products//snapshots"><con:settings/><con:defaultResponse>Response 1</con:defaultResponse><con:dispatchStyle>SEQUENCE</con:dispatchStyle><con:dispatchPath>/*
// Examples showing how to match based on path, query param and header
// Match based on path
def requestPath = mockRequest.getPath()
log.info "Path: "+ requestPath

if( requestPath.contains("json") )
{
    // return the name of the response you want to dispatch
    return "JSON Response"
}


// Match based on query parameter
def queryString = mockRequest.getRequest().getQueryString()
log.info "QueryString: " + queryString

if( queryString.contains("stockholm") )
{
    // return the name of the response you want to dispatch
    return "Response Stockholm"
}
else if( queryString.contains("london") )
{
    // return the name of the response you want to dispatch
    return "Response London"
}


// Match based on header
def acceptEncodingHeadeList = mockRequest.getRequestHeaders().get("Accept-Encoding")
log.info "AcceptEncodig Header List: " + acceptEncodingHeadeList

if( acceptEncodingHeadeList.contains("gzip,deflate") )
{
    // return the name of the response you want to dispatch
    return "GZiped Response"
}

*/
</con:dispatchPath><con:response name="Response 1" httpResponseStatus="200"><con:settings/></con:response></con:restMockAction><con:restMockAction name="/alfresco/service/workspaces//sites//products//snapshots" method="GET" resourcePath="/alfresco/service/workspaces//sites//products//snapshots"><con:settings/><con:defaultResponse>Response 1</con:defaultResponse><con:dispatchStyle>SEQUENCE</con:dispatchStyle><con:dispatchPath>/*
// Examples showing how to match based on path, query param and header
// Match based on path
def requestPath = mockRequest.getPath()
log.info "Path: "+ requestPath

if( requestPath.contains("json") )
{
    // return the name of the response you want to dispatch
    return "JSON Response"
}


// Match based on query parameter
def queryString = mockRequest.getRequest().getQueryString()
log.info "QueryString: " + queryString

if( queryString.contains("stockholm") )
{
    // return the name of the response you want to dispatch
    return "Response Stockholm"
}
else if( queryString.contains("london") )
{
    // return the name of the response you want to dispatch
    return "Response London"
}


// Match based on header
def acceptEncodingHeadeList = mockRequest.getRequestHeaders().get("Accept-Encoding")
log.info "AcceptEncodig Header List: " + acceptEncodingHeadeList

if( acceptEncodingHeadeList.contains("gzip,deflate") )
{
    // return the name of the response you want to dispatch
    return "GZiped Response"
}

*/
</con:dispatchPath><con:response name="Response 1" httpResponseStatus="200"><con:settings/></con:response></con:restMockAction><con:restMockAction name="/alfresco/service/workspaces//sites//products//snapshots/" method="POST" resourcePath="/alfresco/service/workspaces//sites//products//snapshots/"><con:settings/><con:defaultResponse>Response 1</con:defaultResponse><con:dispatchStyle>SEQUENCE</con:dispatchStyle><con:dispatchPath>/*
// Examples showing how to match based on path, query param and header
// Match based on path
def requestPath = mockRequest.getPath()
log.info "Path: "+ requestPath

if( requestPath.contains("json") )
{
    // return the name of the response you want to dispatch
    return "JSON Response"
}


// Match based on query parameter
def queryString = mockRequest.getRequest().getQueryString()
log.info "QueryString: " + queryString

if( queryString.contains("stockholm") )
{
    // return the name of the response you want to dispatch
    return "Response Stockholm"
}
else if( queryString.contains("london") )
{
    // return the name of the response you want to dispatch
    return "Response London"
}


// Match based on header
def acceptEncodingHeadeList = mockRequest.getRequestHeaders().get("Accept-Encoding")
log.info "AcceptEncodig Header List: " + acceptEncodingHeadeList

if( acceptEncodingHeadeList.contains("gzip,deflate") )
{
    // return the name of the response you want to dispatch
    return "GZiped Response"
}

*/
</con:dispatchPath><con:response name="Response 1" httpResponseStatus="200"><con:settings/></con:response></con:restMockAction><con:restMockAction name="/alfresco/service/workspaces//sites//products//snapshots/" method="PUT" resourcePath="/alfresco/service/workspaces//sites//products//snapshots/"><con:settings/><con:defaultResponse>Response 1</con:defaultResponse><con:dispatchStyle>SEQUENCE</con:dispatchStyle><con:dispatchPath>/*
// Examples showing how to match based on path, query param and header
// Match based on path
def requestPath = mockRequest.getPath()
log.info "Path: "+ requestPath

if( requestPath.contains("json") )
{
    // return the name of the response you want to dispatch
    return "JSON Response"
}


// Match based on query parameter
def queryString = mockRequest.getRequest().getQueryString()
log.info "QueryString: " + queryString

if( queryString.contains("stockholm") )
{
    // return the name of the response you want to dispatch
    return "Response Stockholm"
}
else if( queryString.contains("london") )
{
    // return the name of the response you want to dispatch
    return "Response London"
}


// Match based on header
def acceptEncodingHeadeList = mockRequest.getRequestHeaders().get("Accept-Encoding")
log.info "AcceptEncodig Header List: " + acceptEncodingHeadeList

if( acceptEncodingHeadeList.contains("gzip,deflate") )
{
    // return the name of the response you want to dispatch
    return "GZiped Response"
}

*/
</con:dispatchPath><con:response name="Response 1" httpResponseStatus="200"><con:settings/></con:response></con:restMockAction><con:restMockAction name="/alfresco/service/workspaces//sites//products//snapshots/" method="DELETE" resourcePath="/alfresco/service/workspaces//sites//products//snapshots/"><con:settings/><con:defaultResponse>Response 1</con:defaultResponse><con:dispatchStyle>SEQUENCE</con:dispatchStyle><con:dispatchPath>/*
// Examples showing how to match based on path, query param and header
// Match based on path
def requestPath = mockRequest.getPath()
log.info "Path: "+ requestPath

if( requestPath.contains("json") )
{
    // return the name of the response you want to dispatch
    return "JSON Response"
}


// Match based on query parameter
def queryString = mockRequest.getRequest().getQueryString()
log.info "QueryString: " + queryString

if( queryString.contains("stockholm") )
{
    // return the name of the response you want to dispatch
    return "Response Stockholm"
}
else if( queryString.contains("london") )
{
    // return the name of the response you want to dispatch
    return "Response London"
}


// Match based on header
def acceptEncodingHeadeList = mockRequest.getRequestHeaders().get("Accept-Encoding")
log.info "AcceptEncodig Header List: " + acceptEncodingHeadeList

if( acceptEncodingHeadeList.contains("gzip,deflate") )
{
    // return the name of the response you want to dispatch
    return "GZiped Response"
}

*/
</con:dispatchPath><con:response name="Response 1" httpResponseStatus="200"><con:settings/></con:response></con:restMockAction><con:restMockAction name="/alfresco/service/workspaces//sites//products//snapshots/" method="GET" resourcePath="/alfresco/service/workspaces//sites//products//snapshots/"><con:settings/><con:defaultResponse>Response 1</con:defaultResponse><con:dispatchStyle>SEQUENCE</con:dispatchStyle><con:dispatchPath>/*
// Examples showing how to match based on path, query param and header
// Match based on path
def requestPath = mockRequest.getPath()
log.info "Path: "+ requestPath

if( requestPath.contains("json") )
{
    // return the name of the response you want to dispatch
    return "JSON Response"
}


// Match based on query parameter
def queryString = mockRequest.getRequest().getQueryString()
log.info "QueryString: " + queryString

if( queryString.contains("stockholm") )
{
    // return the name of the response you want to dispatch
    return "Response Stockholm"
}
else if( queryString.contains("london") )
{
    // return the name of the response you want to dispatch
    return "Response London"
}


// Match based on header
def acceptEncodingHeadeList = mockRequest.getRequestHeaders().get("Accept-Encoding")
log.info "AcceptEncodig Header List: " + acceptEncodingHeadeList

if( acceptEncodingHeadeList.contains("gzip,deflate") )
{
    // return the name of the response you want to dispatch
    return "GZiped Response"
}

*/
</con:dispatchPath><con:response name="Response 1" httpResponseStatus="200"><con:settings/></con:response></con:restMockAction><con:restMockAction name="/alfresco/service/workspaces//views" method="POST" resourcePath="/alfresco/service/workspaces//views"><con:settings/><con:defaultResponse>Response 1</con:defaultResponse><con:dispatchStyle>SEQUENCE</con:dispatchStyle><con:dispatchPath>/*
// Examples showing how to match based on path, query param and header
// Match based on path
def requestPath = mockRequest.getPath()
log.info "Path: "+ requestPath

if( requestPath.contains("json") )
{
    // return the name of the response you want to dispatch
    return "JSON Response"
}


// Match based on query parameter
def queryString = mockRequest.getRequest().getQueryString()
log.info "QueryString: " + queryString

if( queryString.contains("stockholm") )
{
    // return the name of the response you want to dispatch
    return "Response Stockholm"
}
else if( queryString.contains("london") )
{
    // return the name of the response you want to dispatch
    return "Response London"
}


// Match based on header
def acceptEncodingHeadeList = mockRequest.getRequestHeaders().get("Accept-Encoding")
log.info "AcceptEncodig Header List: " + acceptEncodingHeadeList

if( acceptEncodingHeadeList.contains("gzip,deflate") )
{
    // return the name of the response you want to dispatch
    return "GZiped Response"
}

*/
</con:dispatchPath><con:response name="Response 1" httpResponseStatus="200"><con:settings/></con:response></con:restMockAction><con:restMockAction name="/alfresco/service/workspaces//views" method="PUT" resourcePath="/alfresco/service/workspaces//views"><con:settings/><con:defaultResponse>Response 1</con:defaultResponse><con:dispatchStyle>SEQUENCE</con:dispatchStyle><con:dispatchPath>/*
// Examples showing how to match based on path, query param and header
// Match based on path
def requestPath = mockRequest.getPath()
log.info "Path: "+ requestPath

if( requestPath.contains("json") )
{
    // return the name of the response you want to dispatch
    return "JSON Response"
}


// Match based on query parameter
def queryString = mockRequest.getRequest().getQueryString()
log.info "QueryString: " + queryString

if( queryString.contains("stockholm") )
{
    // return the name of the response you want to dispatch
    return "Response Stockholm"
}
else if( queryString.contains("london") )
{
    // return the name of the response you want to dispatch
    return "Response London"
}


// Match based on header
def acceptEncodingHeadeList = mockRequest.getRequestHeaders().get("Accept-Encoding")
log.info "AcceptEncodig Header List: " + acceptEncodingHeadeList

if( acceptEncodingHeadeList.contains("gzip,deflate") )
{
    // return the name of the response you want to dispatch
    return "GZiped Response"
}

*/
</con:dispatchPath><con:response name="Response 1" httpResponseStatus="200"><con:settings/></con:response></con:restMockAction><con:restMockAction name="/alfresco/service/workspaces//views" method="DELETE" resourcePath="/alfresco/service/workspaces//views"><con:settings/><con:defaultResponse>Response 1</con:defaultResponse><con:dispatchStyle>SEQUENCE</con:dispatchStyle><con:dispatchPath>/*
// Examples showing how to match based on path, query param and header
// Match based on path
def requestPath = mockRequest.getPath()
log.info "Path: "+ requestPath

if( requestPath.contains("json") )
{
    // return the name of the response you want to dispatch
    return "JSON Response"
}


// Match based on query parameter
def queryString = mockRequest.getRequest().getQueryString()
log.info "QueryString: " + queryString

if( queryString.contains("stockholm") )
{
    // return the name of the response you want to dispatch
    return "Response Stockholm"
}
else if( queryString.contains("london") )
{
    // return the name of the response you want to dispatch
    return "Response London"
}


// Match based on header
def acceptEncodingHeadeList = mockRequest.getRequestHeaders().get("Accept-Encoding")
log.info "AcceptEncodig Header List: " + acceptEncodingHeadeList

if( acceptEncodingHeadeList.contains("gzip,deflate") )
{
    // return the name of the response you want to dispatch
    return "GZiped Response"
}

*/
</con:dispatchPath><con:response name="Response 1" httpResponseStatus="200"><con:settings/></con:response></con:restMockAction><con:restMockAction name="/alfresco/service/workspaces//views" method="GET" resourcePath="/alfresco/service/workspaces//views"><con:settings/><con:defaultResponse>Response 1</con:defaultResponse><con:dispatchStyle>SEQUENCE</con:dispatchStyle><con:dispatchPath>/*
// Examples showing how to match based on path, query param and header
// Match based on path
def requestPath = mockRequest.getPath()
log.info "Path: "+ requestPath

if( requestPath.contains("json") )
{
    // return the name of the response you want to dispatch
    return "JSON Response"
}


// Match based on query parameter
def queryString = mockRequest.getRequest().getQueryString()
log.info "QueryString: " + queryString

if( queryString.contains("stockholm") )
{
    // return the name of the response you want to dispatch
    return "Response Stockholm"
}
else if( queryString.contains("london") )
{
    // return the name of the response you want to dispatch
    return "Response London"
}


// Match based on header
def acceptEncodingHeadeList = mockRequest.getRequestHeaders().get("Accept-Encoding")
log.info "AcceptEncodig Header List: " + acceptEncodingHeadeList

if( acceptEncodingHeadeList.contains("gzip,deflate") )
{
    // return the name of the response you want to dispatch
    return "GZiped Response"
}

*/
</con:dispatchPath><con:response name="Response 1" httpResponseStatus="200"><con:settings/></con:response></con:restMockAction><con:restMockAction name="/alfresco/service/workspaces//views/" method="POST" resourcePath="/alfresco/service/workspaces//views/"><con:settings/><con:defaultResponse>Response 1</con:defaultResponse><con:dispatchStyle>SEQUENCE</con:dispatchStyle><con:dispatchPath>/*
// Examples showing how to match based on path, query param and header
// Match based on path
def requestPath = mockRequest.getPath()
log.info "Path: "+ requestPath

if( requestPath.contains("json") )
{
    // return the name of the response you want to dispatch
    return "JSON Response"
}


// Match based on query parameter
def queryString = mockRequest.getRequest().getQueryString()
log.info "QueryString: " + queryString

if( queryString.contains("stockholm") )
{
    // return the name of the response you want to dispatch
    return "Response Stockholm"
}
else if( queryString.contains("london") )
{
    // return the name of the response you want to dispatch
    return "Response London"
}


// Match based on header
def acceptEncodingHeadeList = mockRequest.getRequestHeaders().get("Accept-Encoding")
log.info "AcceptEncodig Header List: " + acceptEncodingHeadeList

if( acceptEncodingHeadeList.contains("gzip,deflate") )
{
    // return the name of the response you want to dispatch
    return "GZiped Response"
}

*/
</con:dispatchPath><con:response name="Response 1" httpResponseStatus="200"><con:settings/></con:response></con:restMockAction><con:restMockAction name="/alfresco/service/workspaces//views/" method="PUT" resourcePath="/alfresco/service/workspaces//views/"><con:settings/><con:defaultResponse>Response 1</con:defaultResponse><con:dispatchStyle>SEQUENCE</con:dispatchStyle><con:dispatchPath>/*
// Examples showing how to match based on path, query param and header
// Match based on path
def requestPath = mockRequest.getPath()
log.info "Path: "+ requestPath

if( requestPath.contains("json") )
{
    // return the name of the response you want to dispatch
    return "JSON Response"
}


// Match based on query parameter
def queryString = mockRequest.getRequest().getQueryString()
log.info "QueryString: " + queryString

if( queryString.contains("stockholm") )
{
    // return the name of the response you want to dispatch
    return "Response Stockholm"
}
else if( queryString.contains("london") )
{
    // return the name of the response you want to dispatch
    return "Response London"
}


// Match based on header
def acceptEncodingHeadeList = mockRequest.getRequestHeaders().get("Accept-Encoding")
log.info "AcceptEncodig Header List: " + acceptEncodingHeadeList

if( acceptEncodingHeadeList.contains("gzip,deflate") )
{
    // return the name of the response you want to dispatch
    return "GZiped Response"
}

*/
</con:dispatchPath><con:response name="Response 1" httpResponseStatus="200"><con:settings/></con:response></con:restMockAction><con:restMockAction name="/alfresco/service/workspaces//views/" method="DELETE" resourcePath="/alfresco/service/workspaces//views/"><con:settings/><con:defaultResponse>Response 1</con:defaultResponse><con:dispatchStyle>SEQUENCE</con:dispatchStyle><con:dispatchPath>/*
// Examples showing how to match based on path, query param and header
// Match based on path
def requestPath = mockRequest.getPath()
log.info "Path: "+ requestPath

if( requestPath.contains("json") )
{
    // return the name of the response you want to dispatch
    return "JSON Response"
}


// Match based on query parameter
def queryString = mockRequest.getRequest().getQueryString()
log.info "QueryString: " + queryString

if( queryString.contains("stockholm") )
{
    // return the name of the response you want to dispatch
    return "Response Stockholm"
}
else if( queryString.contains("london") )
{
    // return the name of the response you want to dispatch
    return "Response London"
}


// Match based on header
def acceptEncodingHeadeList = mockRequest.getRequestHeaders().get("Accept-Encoding")
log.info "AcceptEncodig Header List: " + acceptEncodingHeadeList

if( acceptEncodingHeadeList.contains("gzip,deflate") )
{
    // return the name of the response you want to dispatch
    return "GZiped Response"
}

*/
</con:dispatchPath><con:response name="Response 1" httpResponseStatus="200"><con:settings/></con:response></con:restMockAction><con:restMockAction name="/alfresco/service/workspaces//views/" method="GET" resourcePath="/alfresco/service/workspaces//views/"><con:settings/><con:defaultResponse>Response 1</con:defaultResponse><con:dispatchStyle>SEQUENCE</con:dispatchStyle><con:dispatchPath>/*
// Examples showing how to match based on path, query param and header
// Match based on path
def requestPath = mockRequest.getPath()
log.info "Path: "+ requestPath

if( requestPath.contains("json") )
{
    // return the name of the response you want to dispatch
    return "JSON Response"
}


// Match based on query parameter
def queryString = mockRequest.getRequest().getQueryString()
log.info "QueryString: " + queryString

if( queryString.contains("stockholm") )
{
    // return the name of the response you want to dispatch
    return "Response Stockholm"
}
else if( queryString.contains("london") )
{
    // return the name of the response you want to dispatch
    return "Response London"
}


// Match based on header
def acceptEncodingHeadeList = mockRequest.getRequestHeaders().get("Accept-Encoding")
log.info "AcceptEncodig Header List: " + acceptEncodingHeadeList

if( acceptEncodingHeadeList.contains("gzip,deflate") )
{
    // return the name of the response you want to dispatch
    return "GZiped Response"
}

*/
</con:dispatchPath><con:response name="Response 1" httpResponseStatus="200"><con:settings/></con:response></con:restMockAction><con:restMockAction name="/alfresco/service/workspaces//views//elements" method="POST" resourcePath="/alfresco/service/workspaces//views//elements"><con:settings/><con:defaultResponse>Response 1</con:defaultResponse><con:dispatchStyle>SEQUENCE</con:dispatchStyle><con:dispatchPath>/*
// Examples showing how to match based on path, query param and header
// Match based on path
def requestPath = mockRequest.getPath()
log.info "Path: "+ requestPath

if( requestPath.contains("json") )
{
    // return the name of the response you want to dispatch
    return "JSON Response"
}


// Match based on query parameter
def queryString = mockRequest.getRequest().getQueryString()
log.info "QueryString: " + queryString

if( queryString.contains("stockholm") )
{
    // return the name of the response you want to dispatch
    return "Response Stockholm"
}
else if( queryString.contains("london") )
{
    // return the name of the response you want to dispatch
    return "Response London"
}


// Match based on header
def acceptEncodingHeadeList = mockRequest.getRequestHeaders().get("Accept-Encoding")
log.info "AcceptEncodig Header List: " + acceptEncodingHeadeList

if( acceptEncodingHeadeList.contains("gzip,deflate") )
{
    // return the name of the response you want to dispatch
    return "GZiped Response"
}

*/
</con:dispatchPath><con:response name="Response 1" httpResponseStatus="200"><con:settings/></con:response></con:restMockAction><con:restMockAction name="/alfresco/service/workspaces//views//elements" method="PUT" resourcePath="/alfresco/service/workspaces//views//elements"><con:settings/><con:defaultResponse>Response 1</con:defaultResponse><con:dispatchStyle>SEQUENCE</con:dispatchStyle><con:dispatchPath>/*
// Examples showing how to match based on path, query param and header
// Match based on path
def requestPath = mockRequest.getPath()
log.info "Path: "+ requestPath

if( requestPath.contains("json") )
{
    // return the name of the response you want to dispatch
    return "JSON Response"
}


// Match based on query parameter
def queryString = mockRequest.getRequest().getQueryString()
log.info "QueryString: " + queryString

if( queryString.contains("stockholm") )
{
    // return the name of the response you want to dispatch
    return "Response Stockholm"
}
else if( queryString.contains("london") )
{
    // return the name of the response you want to dispatch
    return "Response London"
}


// Match based on header
def acceptEncodingHeadeList = mockRequest.getRequestHeaders().get("Accept-Encoding")
log.info "AcceptEncodig Header List: " + acceptEncodingHeadeList

if( acceptEncodingHeadeList.contains("gzip,deflate") )
{
    // return the name of the response you want to dispatch
    return "GZiped Response"
}

*/
</con:dispatchPath><con:response name="Response 1" httpResponseStatus="200"><con:settings/></con:response></con:restMockAction><con:restMockAction name="/alfresco/service/workspaces//views//elements" method="DELETE" resourcePath="/alfresco/service/workspaces//views//elements"><con:settings/><con:defaultResponse>Response 1</con:defaultResponse><con:dispatchStyle>SEQUENCE</con:dispatchStyle><con:dispatchPath>/*
// Examples showing how to match based on path, query param and header
// Match based on path
def requestPath = mockRequest.getPath()
log.info "Path: "+ requestPath

if( requestPath.contains("json") )
{
    // return the name of the response you want to dispatch
    return "JSON Response"
}


// Match based on query parameter
def queryString = mockRequest.getRequest().getQueryString()
log.info "QueryString: " + queryString

if( queryString.contains("stockholm") )
{
    // return the name of the response you want to dispatch
    return "Response Stockholm"
}
else if( queryString.contains("london") )
{
    // return the name of the response you want to dispatch
    return "Response London"
}


// Match based on header
def acceptEncodingHeadeList = mockRequest.getRequestHeaders().get("Accept-Encoding")
log.info "AcceptEncodig Header List: " + acceptEncodingHeadeList

if( acceptEncodingHeadeList.contains("gzip,deflate") )
{
    // return the name of the response you want to dispatch
    return "GZiped Response"
}

*/
</con:dispatchPath><con:response name="Response 1" httpResponseStatus="200"><con:settings/></con:response></con:restMockAction><con:restMockAction name="/alfresco/service/workspaces//views//elements" method="GET" resourcePath="/alfresco/service/workspaces//views//elements"><con:settings/><con:defaultResponse>Response 1</con:defaultResponse><con:dispatchStyle>SEQUENCE</con:dispatchStyle><con:dispatchPath>/*
// Examples showing how to match based on path, query param and header
// Match based on path
def requestPath = mockRequest.getPath()
log.info "Path: "+ requestPath

if( requestPath.contains("json") )
{
    // return the name of the response you want to dispatch
    return "JSON Response"
}


// Match based on query parameter
def queryString = mockRequest.getRequest().getQueryString()
log.info "QueryString: " + queryString

if( queryString.contains("stockholm") )
{
    // return the name of the response you want to dispatch
    return "Response Stockholm"
}
else if( queryString.contains("london") )
{
    // return the name of the response you want to dispatch
    return "Response London"
}


// Match based on header
def acceptEncodingHeadeList = mockRequest.getRequestHeaders().get("Accept-Encoding")
log.info "AcceptEncodig Header List: " + acceptEncodingHeadeList

if( acceptEncodingHeadeList.contains("gzip,deflate") )
{
    // return the name of the response you want to dispatch
    return "GZiped Response"
}

*/
</con:dispatchPath><con:response name="Response 1" httpResponseStatus="200"><con:settings/></con:response></con:restMockAction><con:restMockAction name="/alfresco/service/workspaces//views//elements/" method="POST" resourcePath="/alfresco/service/workspaces//views//elements/"><con:settings/><con:defaultResponse>Response 1</con:defaultResponse><con:dispatchStyle>SEQUENCE</con:dispatchStyle><con:dispatchPath>/*
// Examples showing how to match based on path, query param and header
// Match based on path
def requestPath = mockRequest.getPath()
log.info "Path: "+ requestPath

if( requestPath.contains("json") )
{
    // return the name of the response you want to dispatch
    return "JSON Response"
}


// Match based on query parameter
def queryString = mockRequest.getRequest().getQueryString()
log.info "QueryString: " + queryString

if( queryString.contains("stockholm") )
{
    // return the name of the response you want to dispatch
    return "Response Stockholm"
}
else if( queryString.contains("london") )
{
    // return the name of the response you want to dispatch
    return "Response London"
}


// Match based on header
def acceptEncodingHeadeList = mockRequest.getRequestHeaders().get("Accept-Encoding")
log.info "AcceptEncodig Header List: " + acceptEncodingHeadeList

if( acceptEncodingHeadeList.contains("gzip,deflate") )
{
    // return the name of the response you want to dispatch
    return "GZiped Response"
}

*/
</con:dispatchPath><con:response name="Response 1" httpResponseStatus="200"><con:settings/></con:response></con:restMockAction><con:restMockAction name="/alfresco/service/workspaces//views//elements/" method="PUT" resourcePath="/alfresco/service/workspaces//views//elements/"><con:settings/><con:defaultResponse>Response 1</con:defaultResponse><con:dispatchStyle>SEQUENCE</con:dispatchStyle><con:dispatchPath>/*
// Examples showing how to match based on path, query param and header
// Match based on path
def requestPath = mockRequest.getPath()
log.info "Path: "+ requestPath

if( requestPath.contains("json") )
{
    // return the name of the response you want to dispatch
    return "JSON Response"
}


// Match based on query parameter
def queryString = mockRequest.getRequest().getQueryString()
log.info "QueryString: " + queryString

if( queryString.contains("stockholm") )
{
    // return the name of the response you want to dispatch
    return "Response Stockholm"
}
else if( queryString.contains("london") )
{
    // return the name of the response you want to dispatch
    return "Response London"
}


// Match based on header
def acceptEncodingHeadeList = mockRequest.getRequestHeaders().get("Accept-Encoding")
log.info "AcceptEncodig Header List: " + acceptEncodingHeadeList

if( acceptEncodingHeadeList.contains("gzip,deflate") )
{
    // return the name of the response you want to dispatch
    return "GZiped Response"
}

*/
</con:dispatchPath><con:response name="Response 1" httpResponseStatus="200"><con:settings/></con:response></con:restMockAction><con:restMockAction name="/alfresco/service/workspaces//views//elements/" method="DELETE" resourcePath="/alfresco/service/workspaces//views//elements/"><con:settings/><con:defaultResponse>Response 1</con:defaultResponse><con:dispatchStyle>SEQUENCE</con:dispatchStyle><con:dispatchPath>/*
// Examples showing how to match based on path, query param and header
// Match based on path
def requestPath = mockRequest.getPath()
log.info "Path: "+ requestPath

if( requestPath.contains("json") )
{
    // return the name of the response you want to dispatch
    return "JSON Response"
}


// Match based on query parameter
def queryString = mockRequest.getRequest().getQueryString()
log.info "QueryString: " + queryString

if( queryString.contains("stockholm") )
{
    // return the name of the response you want to dispatch
    return "Response Stockholm"
}
else if( queryString.contains("london") )
{
    // return the name of the response you want to dispatch
    return "Response London"
}


// Match based on header
def acceptEncodingHeadeList = mockRequest.getRequestHeaders().get("Accept-Encoding")
log.info "AcceptEncodig Header List: " + acceptEncodingHeadeList

if( acceptEncodingHeadeList.contains("gzip,deflate") )
{
    // return the name of the response you want to dispatch
    return "GZiped Response"
}

*/
</con:dispatchPath><con:response name="Response 1" httpResponseStatus="200"><con:settings/></con:response></con:restMockAction><con:restMockAction name="/alfresco/service/workspaces//views//elements/" method="GET" resourcePath="/alfresco/service/workspaces//views//elements/"><con:settings/><con:defaultResponse>Response 1</con:defaultResponse><con:dispatchStyle>SEQUENCE</con:dispatchStyle><con:dispatchPath>/*
// Examples showing how to match based on path, query param and header
// Match based on path
def requestPath = mockRequest.getPath()
log.info "Path: "+ requestPath

if( requestPath.contains("json") )
{
    // return the name of the response you want to dispatch
    return "JSON Response"
}


// Match based on query parameter
def queryString = mockRequest.getRequest().getQueryString()
log.info "QueryString: " + queryString

if( queryString.contains("stockholm") )
{
    // return the name of the response you want to dispatch
    return "Response Stockholm"
}
else if( queryString.contains("london") )
{
    // return the name of the response you want to dispatch
    return "Response London"
}


// Match based on header
def acceptEncodingHeadeList = mockRequest.getRequestHeaders().get("Accept-Encoding")
log.info "AcceptEncodig Header List: " + acceptEncodingHeadeList

if( acceptEncodingHeadeList.contains("gzip,deflate") )
{
    // return the name of the response you want to dispatch
    return "GZiped Response"
}

*/
</con:dispatchPath><con:response name="Response 1" httpResponseStatus="200"><con:settings/></con:response></con:restMockAction><con:restMockAction name="/alfresco/service/workspaces//views//elements//versions" method="POST" resourcePath="/alfresco/service/workspaces//views//elements//versions"><con:settings/><con:defaultResponse>Response 1</con:defaultResponse><con:dispatchStyle>SEQUENCE</con:dispatchStyle><con:dispatchPath>/*
// Examples showing how to match based on path, query param and header
// Match based on path
def requestPath = mockRequest.getPath()
log.info "Path: "+ requestPath

if( requestPath.contains("json") )
{
    // return the name of the response you want to dispatch
    return "JSON Response"
}


// Match based on query parameter
def queryString = mockRequest.getRequest().getQueryString()
log.info "QueryString: " + queryString

if( queryString.contains("stockholm") )
{
    // return the name of the response you want to dispatch
    return "Response Stockholm"
}
else if( queryString.contains("london") )
{
    // return the name of the response you want to dispatch
    return "Response London"
}


// Match based on header
def acceptEncodingHeadeList = mockRequest.getRequestHeaders().get("Accept-Encoding")
log.info "AcceptEncodig Header List: " + acceptEncodingHeadeList

if( acceptEncodingHeadeList.contains("gzip,deflate") )
{
    // return the name of the response you want to dispatch
    return "GZiped Response"
}

*/
</con:dispatchPath><con:response name="Response 1" httpResponseStatus="200"><con:settings/></con:response></con:restMockAction><con:restMockAction name="/alfresco/service/workspaces//views//elements//versions" method="PUT" resourcePath="/alfresco/service/workspaces//views//elements//versions"><con:settings/><con:defaultResponse>Response 1</con:defaultResponse><con:dispatchStyle>SEQUENCE</con:dispatchStyle><con:dispatchPath>/*
// Examples showing how to match based on path, query param and header
// Match based on path
def requestPath = mockRequest.getPath()
log.info "Path: "+ requestPath

if( requestPath.contains("json") )
{
    // return the name of the response you want to dispatch
    return "JSON Response"
}


// Match based on query parameter
def queryString = mockRequest.getRequest().getQueryString()
log.info "QueryString: " + queryString

if( queryString.contains("stockholm") )
{
    // return the name of the response you want to dispatch
    return "Response Stockholm"
}
else if( queryString.contains("london") )
{
    // return the name of the response you want to dispatch
    return "Response London"
}


// Match based on header
def acceptEncodingHeadeList = mockRequest.getRequestHeaders().get("Accept-Encoding")
log.info "AcceptEncodig Header List: " + acceptEncodingHeadeList

if( acceptEncodingHeadeList.contains("gzip,deflate") )
{
    // return the name of the response you want to dispatch
    return "GZiped Response"
}

*/
</con:dispatchPath><con:response name="Response 1" httpResponseStatus="200"><con:settings/></con:response></con:restMockAction><con:restMockAction name="/alfresco/service/workspaces//views//elements//versions" method="DELETE" resourcePath="/alfresco/service/workspaces//views//elements//versions"><con:settings/><con:defaultResponse>Response 1</con:defaultResponse><con:dispatchStyle>SEQUENCE</con:dispatchStyle><con:dispatchPath>/*
// Examples showing how to match based on path, query param and header
// Match based on path
def requestPath = mockRequest.getPath()
log.info "Path: "+ requestPath

if( requestPath.contains("json") )
{
    // return the name of the response you want to dispatch
    return "JSON Response"
}


// Match based on query parameter
def queryString = mockRequest.getRequest().getQueryString()
log.info "QueryString: " + queryString

if( queryString.contains("stockholm") )
{
    // return the name of the response you want to dispatch
    return "Response Stockholm"
}
else if( queryString.contains("london") )
{
    // return the name of the response you want to dispatch
    return "Response London"
}


// Match based on header
def acceptEncodingHeadeList = mockRequest.getRequestHeaders().get("Accept-Encoding")
log.info "AcceptEncodig Header List: " + acceptEncodingHeadeList

if( acceptEncodingHeadeList.contains("gzip,deflate") )
{
    // return the name of the response you want to dispatch
    return "GZiped Response"
}

*/
</con:dispatchPath><con:response name="Response 1" httpResponseStatus="200"><con:settings/></con:response></con:restMockAction><con:restMockAction name="/alfresco/service/workspaces//views//elements//versions" method="GET" resourcePath="/alfresco/service/workspaces//views//elements//versions"><con:settings/><con:defaultResponse>Response 1</con:defaultResponse><con:dispatchStyle>SEQUENCE</con:dispatchStyle><con:dispatchPath>/*
// Examples showing how to match based on path, query param and header
// Match based on path
def requestPath = mockRequest.getPath()
log.info "Path: "+ requestPath

if( requestPath.contains("json") )
{
    // return the name of the response you want to dispatch
    return "JSON Response"
}


// Match based on query parameter
def queryString = mockRequest.getRequest().getQueryString()
log.info "QueryString: " + queryString

if( queryString.contains("stockholm") )
{
    // return the name of the response you want to dispatch
    return "Response Stockholm"
}
else if( queryString.contains("london") )
{
    // return the name of the response you want to dispatch
    return "Response London"
}


// Match based on header
def acceptEncodingHeadeList = mockRequest.getRequestHeaders().get("Accept-Encoding")
log.info "AcceptEncodig Header List: " + acceptEncodingHeadeList

if( acceptEncodingHeadeList.contains("gzip,deflate") )
{
    // return the name of the response you want to dispatch
    return "GZiped Response"
}

*/
</con:dispatchPath><con:response name="Response 1" httpResponseStatus="200"><con:settings/></con:response></con:restMockAction><con:restMockAction name="/alfresco/service/workspaces//views//elements//versions/" method="POST" resourcePath="/alfresco/service/workspaces//views//elements//versions/"><con:settings/><con:defaultResponse>Response 1</con:defaultResponse><con:dispatchStyle>SEQUENCE</con:dispatchStyle><con:dispatchPath>/*
// Examples showing how to match based on path, query param and header
// Match based on path
def requestPath = mockRequest.getPath()
log.info "Path: "+ requestPath

if( requestPath.contains("json") )
{
    // return the name of the response you want to dispatch
    return "JSON Response"
}


// Match based on query parameter
def queryString = mockRequest.getRequest().getQueryString()
log.info "QueryString: " + queryString

if( queryString.contains("stockholm") )
{
    // return the name of the response you want to dispatch
    return "Response Stockholm"
}
else if( queryString.contains("london") )
{
    // return the name of the response you want to dispatch
    return "Response London"
}


// Match based on header
def acceptEncodingHeadeList = mockRequest.getRequestHeaders().get("Accept-Encoding")
log.info "AcceptEncodig Header List: " + acceptEncodingHeadeList

if( acceptEncodingHeadeList.contains("gzip,deflate") )
{
    // return the name of the response you want to dispatch
    return "GZiped Response"
}

*/
</con:dispatchPath><con:response name="Response 1" httpResponseStatus="200"><con:settings/></con:response></con:restMockAction><con:restMockAction name="/alfresco/service/workspaces//views//elements//versions/" method="PUT" resourcePath="/alfresco/service/workspaces//views//elements//versions/"><con:settings/><con:defaultResponse>Response 1</con:defaultResponse><con:dispatchStyle>SEQUENCE</con:dispatchStyle><con:dispatchPath>/*
// Examples showing how to match based on path, query param and header
// Match based on path
def requestPath = mockRequest.getPath()
log.info "Path: "+ requestPath

if( requestPath.contains("json") )
{
    // return the name of the response you want to dispatch
    return "JSON Response"
}


// Match based on query parameter
def queryString = mockRequest.getRequest().getQueryString()
log.info "QueryString: " + queryString

if( queryString.contains("stockholm") )
{
    // return the name of the response you want to dispatch
    return "Response Stockholm"
}
else if( queryString.contains("london") )
{
    // return the name of the response you want to dispatch
    return "Response London"
}


// Match based on header
def acceptEncodingHeadeList = mockRequest.getRequestHeaders().get("Accept-Encoding")
log.info "AcceptEncodig Header List: " + acceptEncodingHeadeList

if( acceptEncodingHeadeList.contains("gzip,deflate") )
{
    // return the name of the response you want to dispatch
    return "GZiped Response"
}

*/
</con:dispatchPath><con:response name="Response 1" httpResponseStatus="200"><con:settings/></con:response></con:restMockAction><con:restMockAction name="/alfresco/service/workspaces//views//elements//versions/" method="DELETE" resourcePath="/alfresco/service/workspaces//views//elements//versions/"><con:settings/><con:defaultResponse>Response 1</con:defaultResponse><con:dispatchStyle>SEQUENCE</con:dispatchStyle><con:dispatchPath>/*
// Examples showing how to match based on path, query param and header
// Match based on path
def requestPath = mockRequest.getPath()
log.info "Path: "+ requestPath

if( requestPath.contains("json") )
{
    // return the name of the response you want to dispatch
    return "JSON Response"
}


// Match based on query parameter
def queryString = mockRequest.getRequest().getQueryString()
log.info "QueryString: " + queryString

if( queryString.contains("stockholm") )
{
    // return the name of the response you want to dispatch
    return "Response Stockholm"
}
else if( queryString.contains("london") )
{
    // return the name of the response you want to dispatch
    return "Response London"
}


// Match based on header
def acceptEncodingHeadeList = mockRequest.getRequestHeaders().get("Accept-Encoding")
log.info "AcceptEncodig Header List: " + acceptEncodingHeadeList

if( acceptEncodingHeadeList.contains("gzip,deflate") )
{
    // return the name of the response you want to dispatch
    return "GZiped Response"
}

*/
</con:dispatchPath><con:response name="Response 1" httpResponseStatus="200"><con:settings/></con:response></con:restMockAction><con:restMockAction name="/alfresco/service/workspaces//views//elements//versions/" method="GET" resourcePath="/alfresco/service/workspaces//views//elements//versions/"><con:settings/><con:defaultResponse>Response 1</con:defaultResponse><con:dispatchStyle>SEQUENCE</con:dispatchStyle><con:dispatchPath>/*
// Examples showing how to match based on path, query param and header
// Match based on path
def requestPath = mockRequest.getPath()
log.info "Path: "+ requestPath

if( requestPath.contains("json") )
{
    // return the name of the response you want to dispatch
    return "JSON Response"
}


// Match based on query parameter
def queryString = mockRequest.getRequest().getQueryString()
log.info "QueryString: " + queryString

if( queryString.contains("stockholm") )
{
    // return the name of the response you want to dispatch
    return "Response Stockholm"
}
else if( queryString.contains("london") )
{
    // return the name of the response you want to dispatch
    return "Response London"
}


// Match based on header
def acceptEncodingHeadeList = mockRequest.getRequestHeaders().get("Accept-Encoding")
log.info "AcceptEncodig Header List: " + acceptEncodingHeadeList

if( acceptEncodingHeadeList.contains("gzip,deflate") )
{
    // return the name of the response you want to dispatch
    return "GZiped Response"
}

*/
</con:dispatchPath><con:response name="Response 1" httpResponseStatus="200"><con:settings/></con:response></con:restMockAction><con:restMockAction name="/alfresco/service/workspaces//views//elements//comments" method="POST" resourcePath="/alfresco/service/workspaces//views//elements//comments"><con:settings/><con:defaultResponse>Response 1</con:defaultResponse><con:dispatchStyle>SEQUENCE</con:dispatchStyle><con:dispatchPath>/*
// Examples showing how to match based on path, query param and header
// Match based on path
def requestPath = mockRequest.getPath()
log.info "Path: "+ requestPath

if( requestPath.contains("json") )
{
    // return the name of the response you want to dispatch
    return "JSON Response"
}


// Match based on query parameter
def queryString = mockRequest.getRequest().getQueryString()
log.info "QueryString: " + queryString

if( queryString.contains("stockholm") )
{
    // return the name of the response you want to dispatch
    return "Response Stockholm"
}
else if( queryString.contains("london") )
{
    // return the name of the response you want to dispatch
    return "Response London"
}


// Match based on header
def acceptEncodingHeadeList = mockRequest.getRequestHeaders().get("Accept-Encoding")
log.info "AcceptEncodig Header List: " + acceptEncodingHeadeList

if( acceptEncodingHeadeList.contains("gzip,deflate") )
{
    // return the name of the response you want to dispatch
    return "GZiped Response"
}

*/
</con:dispatchPath><con:response name="Response 1" httpResponseStatus="200"><con:settings/></con:response></con:restMockAction><con:restMockAction name="/alfresco/service/workspaces//views//elements//comments" method="PUT" resourcePath="/alfresco/service/workspaces//views//elements//comments"><con:settings/><con:defaultResponse>Response 1</con:defaultResponse><con:dispatchStyle>SEQUENCE</con:dispatchStyle><con:dispatchPath>/*
// Examples showing how to match based on path, query param and header
// Match based on path
def requestPath = mockRequest.getPath()
log.info "Path: "+ requestPath

if( requestPath.contains("json") )
{
    // return the name of the response you want to dispatch
    return "JSON Response"
}


// Match based on query parameter
def queryString = mockRequest.getRequest().getQueryString()
log.info "QueryString: " + queryString

if( queryString.contains("stockholm") )
{
    // return the name of the response you want to dispatch
    return "Response Stockholm"
}
else if( queryString.contains("london") )
{
    // return the name of the response you want to dispatch
    return "Response London"
}


// Match based on header
def acceptEncodingHeadeList = mockRequest.getRequestHeaders().get("Accept-Encoding")
log.info "AcceptEncodig Header List: " + acceptEncodingHeadeList

if( acceptEncodingHeadeList.contains("gzip,deflate") )
{
    // return the name of the response you want to dispatch
    return "GZiped Response"
}

*/
</con:dispatchPath><con:response name="Response 1" httpResponseStatus="200"><con:settings/></con:response></con:restMockAction><con:restMockAction name="/alfresco/service/workspaces//views//elements//comments" method="DELETE" resourcePath="/alfresco/service/workspaces//views//elements//comments"><con:settings/><con:defaultResponse>Response 1</con:defaultResponse><con:dispatchStyle>SEQUENCE</con:dispatchStyle><con:dispatchPath>/*
// Examples showing how to match based on path, query param and header
// Match based on path
def requestPath = mockRequest.getPath()
log.info "Path: "+ requestPath

if( requestPath.contains("json") )
{
    // return the name of the response you want to dispatch
    return "JSON Response"
}


// Match based on query parameter
def queryString = mockRequest.getRequest().getQueryString()
log.info "QueryString: " + queryString

if( queryString.contains("stockholm") )
{
    // return the name of the response you want to dispatch
    return "Response Stockholm"
}
else if( queryString.contains("london") )
{
    // return the name of the response you want to dispatch
    return "Response London"
}


// Match based on header
def acceptEncodingHeadeList = mockRequest.getRequestHeaders().get("Accept-Encoding")
log.info "AcceptEncodig Header List: " + acceptEncodingHeadeList

if( acceptEncodingHeadeList.contains("gzip,deflate") )
{
    // return the name of the response you want to dispatch
    return "GZiped Response"
}

*/
</con:dispatchPath><con:response name="Response 1" httpResponseStatus="200"><con:settings/></con:response></con:restMockAction><con:restMockAction name="/alfresco/service/workspaces//views//elements//comments" method="GET" resourcePath="/alfresco/service/workspaces//views//elements//comments"><con:settings/><con:defaultResponse>Response 1</con:defaultResponse><con:dispatchStyle>SEQUENCE</con:dispatchStyle><con:dispatchPath>/*
// Examples showing how to match based on path, query param and header
// Match based on path
def requestPath = mockRequest.getPath()
log.info "Path: "+ requestPath

if( requestPath.contains("json") )
{
    // return the name of the response you want to dispatch
    return "JSON Response"
}


// Match based on query parameter
def queryString = mockRequest.getRequest().getQueryString()
log.info "QueryString: " + queryString

if( queryString.contains("stockholm") )
{
    // return the name of the response you want to dispatch
    return "Response Stockholm"
}
else if( queryString.contains("london") )
{
    // return the name of the response you want to dispatch
    return "Response London"
}


// Match based on header
def acceptEncodingHeadeList = mockRequest.getRequestHeaders().get("Accept-Encoding")
log.info "AcceptEncodig Header List: " + acceptEncodingHeadeList

if( acceptEncodingHeadeList.contains("gzip,deflate") )
{
    // return the name of the response you want to dispatch
    return "GZiped Response"
}

*/
</con:dispatchPath><con:response name="Response 1" httpResponseStatus="200"><con:settings/></con:response></con:restMockAction><con:restMockAction name="/alfresco/service/workspaces//views//elements//comments/" method="POST" resourcePath="/alfresco/service/workspaces//views//elements//comments/"><con:settings/><con:defaultResponse>Response 1</con:defaultResponse><con:dispatchStyle>SEQUENCE</con:dispatchStyle><con:dispatchPath>/*
// Examples showing how to match based on path, query param and header
// Match based on path
def requestPath = mockRequest.getPath()
log.info "Path: "+ requestPath

if( requestPath.contains("json") )
{
    // return the name of the response you want to dispatch
    return "JSON Response"
}


// Match based on query parameter
def queryString = mockRequest.getRequest().getQueryString()
log.info "QueryString: " + queryString

if( queryString.contains("stockholm") )
{
    // return the name of the response you want to dispatch
    return "Response Stockholm"
}
else if( queryString.contains("london") )
{
    // return the name of the response you want to dispatch
    return "Response London"
}


// Match based on header
def acceptEncodingHeadeList = mockRequest.getRequestHeaders().get("Accept-Encoding")
log.info "AcceptEncodig Header List: " + acceptEncodingHeadeList

if( acceptEncodingHeadeList.contains("gzip,deflate") )
{
    // return the name of the response you want to dispatch
    return "GZiped Response"
}

*/
</con:dispatchPath><con:response name="Response 1" httpResponseStatus="200"><con:settings/></con:response></con:restMockAction><con:restMockAction name="/alfresco/service/workspaces//views//elements//comments/" method="PUT" resourcePath="/alfresco/service/workspaces//views//elements//comments/"><con:settings/><con:defaultResponse>Response 1</con:defaultResponse><con:dispatchStyle>SEQUENCE</con:dispatchStyle><con:dispatchPath>/*
// Examples showing how to match based on path, query param and header
// Match based on path
def requestPath = mockRequest.getPath()
log.info "Path: "+ requestPath

if( requestPath.contains("json") )
{
    // return the name of the response you want to dispatch
    return "JSON Response"
}


// Match based on query parameter
def queryString = mockRequest.getRequest().getQueryString()
log.info "QueryString: " + queryString

if( queryString.contains("stockholm") )
{
    // return the name of the response you want to dispatch
    return "Response Stockholm"
}
else if( queryString.contains("london") )
{
    // return the name of the response you want to dispatch
    return "Response London"
}


// Match based on header
def acceptEncodingHeadeList = mockRequest.getRequestHeaders().get("Accept-Encoding")
log.info "AcceptEncodig Header List: " + acceptEncodingHeadeList

if( acceptEncodingHeadeList.contains("gzip,deflate") )
{
    // return the name of the response you want to dispatch
    return "GZiped Response"
}

*/
</con:dispatchPath><con:response name="Response 1" httpResponseStatus="200"><con:settings/></con:response></con:restMockAction><con:restMockAction name="/alfresco/service/workspaces//views//elements//comments/" method="DELETE" resourcePath="/alfresco/service/workspaces//views//elements//comments/"><con:settings/><con:defaultResponse>Response 1</con:defaultResponse><con:dispatchStyle>SEQUENCE</con:dispatchStyle><con:dispatchPath>/*
// Examples showing how to match based on path, query param and header
// Match based on path
def requestPath = mockRequest.getPath()
log.info "Path: "+ requestPath

if( requestPath.contains("json") )
{
    // return the name of the response you want to dispatch
    return "JSON Response"
}


// Match based on query parameter
def queryString = mockRequest.getRequest().getQueryString()
log.info "QueryString: " + queryString

if( queryString.contains("stockholm") )
{
    // return the name of the response you want to dispatch
    return "Response Stockholm"
}
else if( queryString.contains("london") )
{
    // return the name of the response you want to dispatch
    return "Response London"
}


// Match based on header
def acceptEncodingHeadeList = mockRequest.getRequestHeaders().get("Accept-Encoding")
log.info "AcceptEncodig Header List: " + acceptEncodingHeadeList

if( acceptEncodingHeadeList.contains("gzip,deflate") )
{
    // return the name of the response you want to dispatch
    return "GZiped Response"
}

*/
</con:dispatchPath><con:response name="Response 1" httpResponseStatus="200"><con:settings/></con:response></con:restMockAction><con:restMockAction name="/alfresco/service/workspaces//views//elements//comments/" method="GET" resourcePath="/alfresco/service/workspaces//views//elements//comments/"><con:settings/><con:defaultResponse>Response 1</con:defaultResponse><con:dispatchStyle>SEQUENCE</con:dispatchStyle><con:dispatchPath>/*
// Examples showing how to match based on path, query param and header
// Match based on path
def requestPath = mockRequest.getPath()
log.info "Path: "+ requestPath

if( requestPath.contains("json") )
{
    // return the name of the response you want to dispatch
    return "JSON Response"
}


// Match based on query parameter
def queryString = mockRequest.getRequest().getQueryString()
log.info "QueryString: " + queryString

if( queryString.contains("stockholm") )
{
    // return the name of the response you want to dispatch
    return "Response Stockholm"
}
else if( queryString.contains("london") )
{
    // return the name of the response you want to dispatch
    return "Response London"
}


// Match based on header
def acceptEncodingHeadeList = mockRequest.getRequestHeaders().get("Accept-Encoding")
log.info "AcceptEncodig Header List: " + acceptEncodingHeadeList

if( acceptEncodingHeadeList.contains("gzip,deflate") )
{
    // return the name of the response you want to dispatch
    return "GZiped Response"
}

*/
</con:dispatchPath><con:response name="Response 1" httpResponseStatus="200"><con:settings/></con:response></con:restMockAction><con:restMockAction name="/alfresco/service/workspaces//configurations" method="POST" resourcePath="/alfresco/service/workspaces//configurations"><con:settings/><con:defaultResponse>Response 1</con:defaultResponse><con:dispatchStyle>SEQUENCE</con:dispatchStyle><con:dispatchPath>/*
// Examples showing how to match based on path, query param and header
// Match based on path
def requestPath = mockRequest.getPath()
log.info "Path: "+ requestPath

if( requestPath.contains("json") )
{
    // return the name of the response you want to dispatch
    return "JSON Response"
}


// Match based on query parameter
def queryString = mockRequest.getRequest().getQueryString()
log.info "QueryString: " + queryString

if( queryString.contains("stockholm") )
{
    // return the name of the response you want to dispatch
    return "Response Stockholm"
}
else if( queryString.contains("london") )
{
    // return the name of the response you want to dispatch
    return "Response London"
}


// Match based on header
def acceptEncodingHeadeList = mockRequest.getRequestHeaders().get("Accept-Encoding")
log.info "AcceptEncodig Header List: " + acceptEncodingHeadeList

if( acceptEncodingHeadeList.contains("gzip,deflate") )
{
    // return the name of the response you want to dispatch
    return "GZiped Response"
}

*/
</con:dispatchPath><con:response name="Response 1" httpResponseStatus="200"><con:settings/></con:response></con:restMockAction><con:restMockAction name="/alfresco/service/workspaces//configurations" method="PUT" resourcePath="/alfresco/service/workspaces//configurations"><con:settings/><con:defaultResponse>Response 1</con:defaultResponse><con:dispatchStyle>SEQUENCE</con:dispatchStyle><con:dispatchPath>/*
// Examples showing how to match based on path, query param and header
// Match based on path
def requestPath = mockRequest.getPath()
log.info "Path: "+ requestPath

if( requestPath.contains("json") )
{
    // return the name of the response you want to dispatch
    return "JSON Response"
}


// Match based on query parameter
def queryString = mockRequest.getRequest().getQueryString()
log.info "QueryString: " + queryString

if( queryString.contains("stockholm") )
{
    // return the name of the response you want to dispatch
    return "Response Stockholm"
}
else if( queryString.contains("london") )
{
    // return the name of the response you want to dispatch
    return "Response London"
}


// Match based on header
def acceptEncodingHeadeList = mockRequest.getRequestHeaders().get("Accept-Encoding")
log.info "AcceptEncodig Header List: " + acceptEncodingHeadeList

if( acceptEncodingHeadeList.contains("gzip,deflate") )
{
    // return the name of the response you want to dispatch
    return "GZiped Response"
}

*/
</con:dispatchPath><con:response name="Response 1" httpResponseStatus="200"><con:settings/></con:response></con:restMockAction><con:restMockAction name="/alfresco/service/workspaces//configurations" method="DELETE" resourcePath="/alfresco/service/workspaces//configurations"><con:settings/><con:defaultResponse>Response 1</con:defaultResponse><con:dispatchStyle>SEQUENCE</con:dispatchStyle><con:dispatchPath>/*
// Examples showing how to match based on path, query param and header
// Match based on path
def requestPath = mockRequest.getPath()
log.info "Path: "+ requestPath

if( requestPath.contains("json") )
{
    // return the name of the response you want to dispatch
    return "JSON Response"
}


// Match based on query parameter
def queryString = mockRequest.getRequest().getQueryString()
log.info "QueryString: " + queryString

if( queryString.contains("stockholm") )
{
    // return the name of the response you want to dispatch
    return "Response Stockholm"
}
else if( queryString.contains("london") )
{
    // return the name of the response you want to dispatch
    return "Response London"
}


// Match based on header
def acceptEncodingHeadeList = mockRequest.getRequestHeaders().get("Accept-Encoding")
log.info "AcceptEncodig Header List: " + acceptEncodingHeadeList

if( acceptEncodingHeadeList.contains("gzip,deflate") )
{
    // return the name of the response you want to dispatch
    return "GZiped Response"
}

*/
</con:dispatchPath><con:response name="Response 1" httpResponseStatus="200"><con:settings/></con:response></con:restMockAction><con:restMockAction name="/alfresco/service/workspaces//configurations" method="GET" resourcePath="/alfresco/service/workspaces//configurations"><con:settings/><con:defaultResponse>Response 1</con:defaultResponse><con:dispatchStyle>SEQUENCE</con:dispatchStyle><con:dispatchPath>/*
// Examples showing how to match based on path, query param and header
// Match based on path
def requestPath = mockRequest.getPath()
log.info "Path: "+ requestPath

if( requestPath.contains("json") )
{
    // return the name of the response you want to dispatch
    return "JSON Response"
}


// Match based on query parameter
def queryString = mockRequest.getRequest().getQueryString()
log.info "QueryString: " + queryString

if( queryString.contains("stockholm") )
{
    // return the name of the response you want to dispatch
    return "Response Stockholm"
}
else if( queryString.contains("london") )
{
    // return the name of the response you want to dispatch
    return "Response London"
}


// Match based on header
def acceptEncodingHeadeList = mockRequest.getRequestHeaders().get("Accept-Encoding")
log.info "AcceptEncodig Header List: " + acceptEncodingHeadeList

if( acceptEncodingHeadeList.contains("gzip,deflate") )
{
    // return the name of the response you want to dispatch
    return "GZiped Response"
}

*/
</con:dispatchPath><con:response name="Response 1" httpResponseStatus="200"><con:settings/></con:response></con:restMockAction><con:restMockAction name="/alfresco/service/workspaces//configurations/" method="POST" resourcePath="/alfresco/service/workspaces//configurations/"><con:settings/><con:defaultResponse>Response 1</con:defaultResponse><con:dispatchStyle>SEQUENCE</con:dispatchStyle><con:dispatchPath>/*
// Examples showing how to match based on path, query param and header
// Match based on path
def requestPath = mockRequest.getPath()
log.info "Path: "+ requestPath

if( requestPath.contains("json") )
{
    // return the name of the response you want to dispatch
    return "JSON Response"
}


// Match based on query parameter
def queryString = mockRequest.getRequest().getQueryString()
log.info "QueryString: " + queryString

if( queryString.contains("stockholm") )
{
    // return the name of the response you want to dispatch
    return "Response Stockholm"
}
else if( queryString.contains("london") )
{
    // return the name of the response you want to dispatch
    return "Response London"
}


// Match based on header
def acceptEncodingHeadeList = mockRequest.getRequestHeaders().get("Accept-Encoding")
log.info "AcceptEncodig Header List: " + acceptEncodingHeadeList

if( acceptEncodingHeadeList.contains("gzip,deflate") )
{
    // return the name of the response you want to dispatch
    return "GZiped Response"
}

*/
</con:dispatchPath><con:response name="Response 1" httpResponseStatus="200"><con:settings/></con:response></con:restMockAction><con:restMockAction name="/alfresco/service/workspaces//configurations/" method="PUT" resourcePath="/alfresco/service/workspaces//configurations/"><con:settings/><con:defaultResponse>Response 1</con:defaultResponse><con:dispatchStyle>SEQUENCE</con:dispatchStyle><con:dispatchPath>/*
// Examples showing how to match based on path, query param and header
// Match based on path
def requestPath = mockRequest.getPath()
log.info "Path: "+ requestPath

if( requestPath.contains("json") )
{
    // return the name of the response you want to dispatch
    return "JSON Response"
}


// Match based on query parameter
def queryString = mockRequest.getRequest().getQueryString()
log.info "QueryString: " + queryString

if( queryString.contains("stockholm") )
{
    // return the name of the response you want to dispatch
    return "Response Stockholm"
}
else if( queryString.contains("london") )
{
    // return the name of the response you want to dispatch
    return "Response London"
}


// Match based on header
def acceptEncodingHeadeList = mockRequest.getRequestHeaders().get("Accept-Encoding")
log.info "AcceptEncodig Header List: " + acceptEncodingHeadeList

if( acceptEncodingHeadeList.contains("gzip,deflate") )
{
    // return the name of the response you want to dispatch
    return "GZiped Response"
}

*/
</con:dispatchPath><con:response name="Response 1" httpResponseStatus="200"><con:settings/></con:response></con:restMockAction><con:restMockAction name="/alfresco/service/workspaces//configurations/" method="DELETE" resourcePath="/alfresco/service/workspaces//configurations/"><con:settings/><con:defaultResponse>Response 1</con:defaultResponse><con:dispatchStyle>SEQUENCE</con:dispatchStyle><con:dispatchPath>/*
// Examples showing how to match based on path, query param and header
// Match based on path
def requestPath = mockRequest.getPath()
log.info "Path: "+ requestPath

if( requestPath.contains("json") )
{
    // return the name of the response you want to dispatch
    return "JSON Response"
}


// Match based on query parameter
def queryString = mockRequest.getRequest().getQueryString()
log.info "QueryString: " + queryString

if( queryString.contains("stockholm") )
{
    // return the name of the response you want to dispatch
    return "Response Stockholm"
}
else if( queryString.contains("london") )
{
    // return the name of the response you want to dispatch
    return "Response London"
}


// Match based on header
def acceptEncodingHeadeList = mockRequest.getRequestHeaders().get("Accept-Encoding")
log.info "AcceptEncodig Header List: " + acceptEncodingHeadeList

if( acceptEncodingHeadeList.contains("gzip,deflate") )
{
    // return the name of the response you want to dispatch
    return "GZiped Response"
}

*/
</con:dispatchPath><con:response name="Response 1" httpResponseStatus="200"><con:settings/></con:response></con:restMockAction><con:restMockAction name="/alfresco/service/workspaces//configurations/" method="GET" resourcePath="/alfresco/service/workspaces//configurations/"><con:settings/><con:defaultResponse>Response 1</con:defaultResponse><con:dispatchStyle>SEQUENCE</con:dispatchStyle><con:dispatchPath>/*
// Examples showing how to match based on path, query param and header
// Match based on path
def requestPath = mockRequest.getPath()
log.info "Path: "+ requestPath

if( requestPath.contains("json") )
{
    // return the name of the response you want to dispatch
    return "JSON Response"
}


// Match based on query parameter
def queryString = mockRequest.getRequest().getQueryString()
log.info "QueryString: " + queryString

if( queryString.contains("stockholm") )
{
    // return the name of the response you want to dispatch
    return "Response Stockholm"
}
else if( queryString.contains("london") )
{
    // return the name of the response you want to dispatch
    return "Response London"
}


// Match based on header
def acceptEncodingHeadeList = mockRequest.getRequestHeaders().get("Accept-Encoding")
log.info "AcceptEncodig Header List: " + acceptEncodingHeadeList

if( acceptEncodingHeadeList.contains("gzip,deflate") )
{
    // return the name of the response you want to dispatch
    return "GZiped Response"
}

*/
</con:dispatchPath><con:response name="Response 1" httpResponseStatus="200"><con:settings/></con:response></con:restMockAction><con:restMockAction name="/alfresco/service/workspaces//configurations//snapshots" method="POST" resourcePath="/alfresco/service/workspaces//configurations//snapshots"><con:settings/><con:defaultResponse>Response 1</con:defaultResponse><con:dispatchStyle>SEQUENCE</con:dispatchStyle><con:dispatchPath>/*
// Examples showing how to match based on path, query param and header
// Match based on path
def requestPath = mockRequest.getPath()
log.info "Path: "+ requestPath

if( requestPath.contains("json") )
{
    // return the name of the response you want to dispatch
    return "JSON Response"
}


// Match based on query parameter
def queryString = mockRequest.getRequest().getQueryString()
log.info "QueryString: " + queryString

if( queryString.contains("stockholm") )
{
    // return the name of the response you want to dispatch
    return "Response Stockholm"
}
else if( queryString.contains("london") )
{
    // return the name of the response you want to dispatch
    return "Response London"
}


// Match based on header
def acceptEncodingHeadeList = mockRequest.getRequestHeaders().get("Accept-Encoding")
log.info "AcceptEncodig Header List: " + acceptEncodingHeadeList

if( acceptEncodingHeadeList.contains("gzip,deflate") )
{
    // return the name of the response you want to dispatch
    return "GZiped Response"
}

*/
</con:dispatchPath><con:response name="Response 1" httpResponseStatus="200"><con:settings/></con:response></con:restMockAction><con:restMockAction name="/alfresco/service/workspaces//configurations//snapshots" method="PUT" resourcePath="/alfresco/service/workspaces//configurations//snapshots"><con:settings/><con:defaultResponse>Response 1</con:defaultResponse><con:dispatchStyle>SEQUENCE</con:dispatchStyle><con:dispatchPath>/*
// Examples showing how to match based on path, query param and header
// Match based on path
def requestPath = mockRequest.getPath()
log.info "Path: "+ requestPath

if( requestPath.contains("json") )
{
    // return the name of the response you want to dispatch
    return "JSON Response"
}


// Match based on query parameter
def queryString = mockRequest.getRequest().getQueryString()
log.info "QueryString: " + queryString

if( queryString.contains("stockholm") )
{
    // return the name of the response you want to dispatch
    return "Response Stockholm"
}
else if( queryString.contains("london") )
{
    // return the name of the response you want to dispatch
    return "Response London"
}


// Match based on header
def acceptEncodingHeadeList = mockRequest.getRequestHeaders().get("Accept-Encoding")
log.info "AcceptEncodig Header List: " + acceptEncodingHeadeList

if( acceptEncodingHeadeList.contains("gzip,deflate") )
{
    // return the name of the response you want to dispatch
    return "GZiped Response"
}

*/
</con:dispatchPath><con:response name="Response 1" httpResponseStatus="200"><con:settings/></con:response></con:restMockAction><con:restMockAction name="/alfresco/service/workspaces//configurations//snapshots" method="DELETE" resourcePath="/alfresco/service/workspaces//configurations//snapshots"><con:settings/><con:defaultResponse>Response 1</con:defaultResponse><con:dispatchStyle>SEQUENCE</con:dispatchStyle><con:dispatchPath>/*
// Examples showing how to match based on path, query param and header
// Match based on path
def requestPath = mockRequest.getPath()
log.info "Path: "+ requestPath

if( requestPath.contains("json") )
{
    // return the name of the response you want to dispatch
    return "JSON Response"
}


// Match based on query parameter
def queryString = mockRequest.getRequest().getQueryString()
log.info "QueryString: " + queryString

if( queryString.contains("stockholm") )
{
    // return the name of the response you want to dispatch
    return "Response Stockholm"
}
else if( queryString.contains("london") )
{
    // return the name of the response you want to dispatch
    return "Response London"
}


// Match based on header
def acceptEncodingHeadeList = mockRequest.getRequestHeaders().get("Accept-Encoding")
log.info "AcceptEncodig Header List: " + acceptEncodingHeadeList

if( acceptEncodingHeadeList.contains("gzip,deflate") )
{
    // return the name of the response you want to dispatch
    return "GZiped Response"
}

*/
</con:dispatchPath><con:response name="Response 1" httpResponseStatus="200"><con:settings/></con:response></con:restMockAction><con:restMockAction name="/alfresco/service/workspaces//configurations//snapshots" method="GET" resourcePath="/alfresco/service/workspaces//configurations//snapshots"><con:settings/><con:defaultResponse>Response 1</con:defaultResponse><con:dispatchStyle>SEQUENCE</con:dispatchStyle><con:dispatchPath>/*
// Examples showing how to match based on path, query param and header
// Match based on path
def requestPath = mockRequest.getPath()
log.info "Path: "+ requestPath

if( requestPath.contains("json") )
{
    // return the name of the response you want to dispatch
    return "JSON Response"
}


// Match based on query parameter
def queryString = mockRequest.getRequest().getQueryString()
log.info "QueryString: " + queryString

if( queryString.contains("stockholm") )
{
    // return the name of the response you want to dispatch
    return "Response Stockholm"
}
else if( queryString.contains("london") )
{
    // return the name of the response you want to dispatch
    return "Response London"
}


// Match based on header
def acceptEncodingHeadeList = mockRequest.getRequestHeaders().get("Accept-Encoding")
log.info "AcceptEncodig Header List: " + acceptEncodingHeadeList

if( acceptEncodingHeadeList.contains("gzip,deflate") )
{
    // return the name of the response you want to dispatch
    return "GZiped Response"
}

*/
</con:dispatchPath><con:response name="Response 1" httpResponseStatus="200"><con:settings/></con:response></con:restMockAction><con:restMockAction name="/alfresco/service/workspaces//configurations//snapshots/" method="POST" resourcePath="/alfresco/service/workspaces//configurations//snapshots/"><con:settings/><con:defaultResponse>Response 1</con:defaultResponse><con:dispatchStyle>SEQUENCE</con:dispatchStyle><con:dispatchPath>/*
// Examples showing how to match based on path, query param and header
// Match based on path
def requestPath = mockRequest.getPath()
log.info "Path: "+ requestPath

if( requestPath.contains("json") )
{
    // return the name of the response you want to dispatch
    return "JSON Response"
}


// Match based on query parameter
def queryString = mockRequest.getRequest().getQueryString()
log.info "QueryString: " + queryString

if( queryString.contains("stockholm") )
{
    // return the name of the response you want to dispatch
    return "Response Stockholm"
}
else if( queryString.contains("london") )
{
    // return the name of the response you want to dispatch
    return "Response London"
}


// Match based on header
def acceptEncodingHeadeList = mockRequest.getRequestHeaders().get("Accept-Encoding")
log.info "AcceptEncodig Header List: " + acceptEncodingHeadeList

if( acceptEncodingHeadeList.contains("gzip,deflate") )
{
    // return the name of the response you want to dispatch
    return "GZiped Response"
}

*/
</con:dispatchPath><con:response name="Response 1" httpResponseStatus="200"><con:settings/></con:response></con:restMockAction><con:restMockAction name="/alfresco/service/workspaces//configurations//snapshots/" method="PUT" resourcePath="/alfresco/service/workspaces//configurations//snapshots/"><con:settings/><con:defaultResponse>Response 1</con:defaultResponse><con:dispatchStyle>SEQUENCE</con:dispatchStyle><con:dispatchPath>/*
// Examples showing how to match based on path, query param and header
// Match based on path
def requestPath = mockRequest.getPath()
log.info "Path: "+ requestPath

if( requestPath.contains("json") )
{
    // return the name of the response you want to dispatch
    return "JSON Response"
}


// Match based on query parameter
def queryString = mockRequest.getRequest().getQueryString()
log.info "QueryString: " + queryString

if( queryString.contains("stockholm") )
{
    // return the name of the response you want to dispatch
    return "Response Stockholm"
}
else if( queryString.contains("london") )
{
    // return the name of the response you want to dispatch
    return "Response London"
}


// Match based on header
def acceptEncodingHeadeList = mockRequest.getRequestHeaders().get("Accept-Encoding")
log.info "AcceptEncodig Header List: " + acceptEncodingHeadeList

if( acceptEncodingHeadeList.contains("gzip,deflate") )
{
    // return the name of the response you want to dispatch
    return "GZiped Response"
}

*/
</con:dispatchPath><con:response name="Response 1" httpResponseStatus="200"><con:settings/></con:response></con:restMockAction><con:restMockAction name="/alfresco/service/workspaces//configurations//snapshots/" method="DELETE" resourcePath="/alfresco/service/workspaces//configurations//snapshots/"><con:settings/><con:defaultResponse>Response 1</con:defaultResponse><con:dispatchStyle>SEQUENCE</con:dispatchStyle><con:dispatchPath>/*
// Examples showing how to match based on path, query param and header
// Match based on path
def requestPath = mockRequest.getPath()
log.info "Path: "+ requestPath

if( requestPath.contains("json") )
{
    // return the name of the response you want to dispatch
    return "JSON Response"
}


// Match based on query parameter
def queryString = mockRequest.getRequest().getQueryString()
log.info "QueryString: " + queryString

if( queryString.contains("stockholm") )
{
    // return the name of the response you want to dispatch
    return "Response Stockholm"
}
else if( queryString.contains("london") )
{
    // return the name of the response you want to dispatch
    return "Response London"
}


// Match based on header
def acceptEncodingHeadeList = mockRequest.getRequestHeaders().get("Accept-Encoding")
log.info "AcceptEncodig Header List: " + acceptEncodingHeadeList

if( acceptEncodingHeadeList.contains("gzip,deflate") )
{
    // return the name of the response you want to dispatch
    return "GZiped Response"
}

*/
</con:dispatchPath><con:response name="Response 1" httpResponseStatus="200"><con:settings/></con:response></con:restMockAction><con:restMockAction name="/alfresco/service/workspaces//configurations//snapshots/" method="GET" resourcePath="/alfresco/service/workspaces//configurations//snapshots/"><con:settings/><con:defaultResponse>Response 1</con:defaultResponse><con:dispatchStyle>SEQUENCE</con:dispatchStyle><con:dispatchPath>/*
// Examples showing how to match based on path, query param and header
// Match based on path
def requestPath = mockRequest.getPath()
log.info "Path: "+ requestPath

if( requestPath.contains("json") )
{
    // return the name of the response you want to dispatch
    return "JSON Response"
}


// Match based on query parameter
def queryString = mockRequest.getRequest().getQueryString()
log.info "QueryString: " + queryString

if( queryString.contains("stockholm") )
{
    // return the name of the response you want to dispatch
    return "Response Stockholm"
}
else if( queryString.contains("london") )
{
    // return the name of the response you want to dispatch
    return "Response London"
}


// Match based on header
def acceptEncodingHeadeList = mockRequest.getRequestHeaders().get("Accept-Encoding")
log.info "AcceptEncodig Header List: " + acceptEncodingHeadeList

if( acceptEncodingHeadeList.contains("gzip,deflate") )
{
    // return the name of the response you want to dispatch
    return "GZiped Response"
}

*/
</con:dispatchPath><con:response name="Response 1" httpResponseStatus="200"><con:settings/></con:response></con:restMockAction><con:restMockAction name="/alfresco/service/workspaces//changesets" method="POST" resourcePath="/alfresco/service/workspaces//changesets"><con:settings/><con:defaultResponse>Response 1</con:defaultResponse><con:dispatchStyle>SEQUENCE</con:dispatchStyle><con:dispatchPath>/*
// Examples showing how to match based on path, query param and header
// Match based on path
def requestPath = mockRequest.getPath()
log.info "Path: "+ requestPath

if( requestPath.contains("json") )
{
    // return the name of the response you want to dispatch
    return "JSON Response"
}


// Match based on query parameter
def queryString = mockRequest.getRequest().getQueryString()
log.info "QueryString: " + queryString

if( queryString.contains("stockholm") )
{
    // return the name of the response you want to dispatch
    return "Response Stockholm"
}
else if( queryString.contains("london") )
{
    // return the name of the response you want to dispatch
    return "Response London"
}


// Match based on header
def acceptEncodingHeadeList = mockRequest.getRequestHeaders().get("Accept-Encoding")
log.info "AcceptEncodig Header List: " + acceptEncodingHeadeList

if( acceptEncodingHeadeList.contains("gzip,deflate") )
{
    // return the name of the response you want to dispatch
    return "GZiped Response"
}

*/
</con:dispatchPath><con:response name="Response 1" httpResponseStatus="200"><con:settings/></con:response></con:restMockAction><con:restMockAction name="/alfresco/service/workspaces//changesets" method="PUT" resourcePath="/alfresco/service/workspaces//changesets"><con:settings/><con:defaultResponse>Response 1</con:defaultResponse><con:dispatchStyle>SEQUENCE</con:dispatchStyle><con:dispatchPath>/*
// Examples showing how to match based on path, query param and header
// Match based on path
def requestPath = mockRequest.getPath()
log.info "Path: "+ requestPath

if( requestPath.contains("json") )
{
    // return the name of the response you want to dispatch
    return "JSON Response"
}


// Match based on query parameter
def queryString = mockRequest.getRequest().getQueryString()
log.info "QueryString: " + queryString

if( queryString.contains("stockholm") )
{
    // return the name of the response you want to dispatch
    return "Response Stockholm"
}
else if( queryString.contains("london") )
{
    // return the name of the response you want to dispatch
    return "Response London"
}


// Match based on header
def acceptEncodingHeadeList = mockRequest.getRequestHeaders().get("Accept-Encoding")
log.info "AcceptEncodig Header List: " + acceptEncodingHeadeList

if( acceptEncodingHeadeList.contains("gzip,deflate") )
{
    // return the name of the response you want to dispatch
    return "GZiped Response"
}

*/
</con:dispatchPath><con:response name="Response 1" httpResponseStatus="200"><con:settings/></con:response></con:restMockAction><con:restMockAction name="/alfresco/service/workspaces//changesets" method="DELETE" resourcePath="/alfresco/service/workspaces//changesets"><con:settings/><con:defaultResponse>Response 1</con:defaultResponse><con:dispatchStyle>SEQUENCE</con:dispatchStyle><con:dispatchPath>/*
// Examples showing how to match based on path, query param and header
// Match based on path
def requestPath = mockRequest.getPath()
log.info "Path: "+ requestPath

if( requestPath.contains("json") )
{
    // return the name of the response you want to dispatch
    return "JSON Response"
}


// Match based on query parameter
def queryString = mockRequest.getRequest().getQueryString()
log.info "QueryString: " + queryString

if( queryString.contains("stockholm") )
{
    // return the name of the response you want to dispatch
    return "Response Stockholm"
}
else if( queryString.contains("london") )
{
    // return the name of the response you want to dispatch
    return "Response London"
}


// Match based on header
def acceptEncodingHeadeList = mockRequest.getRequestHeaders().get("Accept-Encoding")
log.info "AcceptEncodig Header List: " + acceptEncodingHeadeList

if( acceptEncodingHeadeList.contains("gzip,deflate") )
{
    // return the name of the response you want to dispatch
    return "GZiped Response"
}

*/
</con:dispatchPath><con:response name="Response 1" httpResponseStatus="200"><con:settings/></con:response></con:restMockAction><con:restMockAction name="/alfresco/service/workspaces//changesets" method="GET" resourcePath="/alfresco/service/workspaces//changesets"><con:settings/><con:defaultResponse>Response 1</con:defaultResponse><con:dispatchStyle>SEQUENCE</con:dispatchStyle><con:dispatchPath>/*
// Examples showing how to match based on path, query param and header
// Match based on path
def requestPath = mockRequest.getPath()
log.info "Path: "+ requestPath

if( requestPath.contains("json") )
{
    // return the name of the response you want to dispatch
    return "JSON Response"
}


// Match based on query parameter
def queryString = mockRequest.getRequest().getQueryString()
log.info "QueryString: " + queryString

if( queryString.contains("stockholm") )
{
    // return the name of the response you want to dispatch
    return "Response Stockholm"
}
else if( queryString.contains("london") )
{
    // return the name of the response you want to dispatch
    return "Response London"
}


// Match based on header
def acceptEncodingHeadeList = mockRequest.getRequestHeaders().get("Accept-Encoding")
log.info "AcceptEncodig Header List: " + acceptEncodingHeadeList

if( acceptEncodingHeadeList.contains("gzip,deflate") )
{
    // return the name of the response you want to dispatch
    return "GZiped Response"
}

*/
</con:dispatchPath><con:response name="Response 1" httpResponseStatus="200"><con:settings/></con:response></con:restMockAction><con:restMockAction name="/alfresco/service/workspaces//constraints" method="GET" resourcePath="/alfresco/service/workspaces//constraints"><con:settings/><con:defaultResponse>Response 1</con:defaultResponse><con:dispatchStyle>SEQUENCE</con:dispatchStyle><con:dispatchPath>/*
// Examples showing how to match based on path, query param and header
// Match based on path
def requestPath = mockRequest.getPath()
log.info "Path: "+ requestPath

if( requestPath.contains("json") )
{
    // return the name of the response you want to dispatch
    return "JSON Response"
}


// Match based on query parameter
def queryString = mockRequest.getRequest().getQueryString()
log.info "QueryString: " + queryString

if( queryString.contains("stockholm") )
{
    // return the name of the response you want to dispatch
    return "Response Stockholm"
}
else if( queryString.contains("london") )
{
    // return the name of the response you want to dispatch
    return "Response London"
}


// Match based on header
def acceptEncodingHeadeList = mockRequest.getRequestHeaders().get("Accept-Encoding")
log.info "AcceptEncodig Header List: " + acceptEncodingHeadeList

if( acceptEncodingHeadeList.contains("gzip,deflate") )
{
    // return the name of the response you want to dispatch
    return "GZiped Response"
}

*/
</con:dispatchPath><con:response name="Response 1" httpResponseStatus="200"><con:settings/></con:response></con:restMockAction><con:restMockAction name="/alfresco/service/workspaces//elements" method="POST" resourcePath="/alfresco/service/workspaces//elements"><con:settings/><con:defaultResponse>Response 1</con:defaultResponse><con:dispatchStyle>SEQUENCE</con:dispatchStyle><con:dispatchPath>/*
// Examples showing how to match based on path, query param and header
// Match based on path
def requestPath = mockRequest.getPath()
log.info "Path: "+ requestPath

if( requestPath.contains("json") )
{
    // return the name of the response you want to dispatch
    return "JSON Response"
}


// Match based on query parameter
def queryString = mockRequest.getRequest().getQueryString()
log.info "QueryString: " + queryString

if( queryString.contains("stockholm") )
{
    // return the name of the response you want to dispatch
    return "Response Stockholm"
}
else if( queryString.contains("london") )
{
    // return the name of the response you want to dispatch
    return "Response London"
}


// Match based on header
def acceptEncodingHeadeList = mockRequest.getRequestHeaders().get("Accept-Encoding")
log.info "AcceptEncodig Header List: " + acceptEncodingHeadeList

if( acceptEncodingHeadeList.contains("gzip,deflate") )
{
    // return the name of the response you want to dispatch
    return "GZiped Response"
}

*/
</con:dispatchPath><con:response name="Response 1" httpResponseStatus="200"><con:settings/></con:response></con:restMockAction><con:restMockAction name="/alfresco/service/workspaces//elements" method="PUT" resourcePath="/alfresco/service/workspaces//elements"><con:settings/><con:defaultResponse>Response 1</con:defaultResponse><con:dispatchStyle>SEQUENCE</con:dispatchStyle><con:dispatchPath>/*
// Examples showing how to match based on path, query param and header
// Match based on path
def requestPath = mockRequest.getPath()
log.info "Path: "+ requestPath

if( requestPath.contains("json") )
{
    // return the name of the response you want to dispatch
    return "JSON Response"
}


// Match based on query parameter
def queryString = mockRequest.getRequest().getQueryString()
log.info "QueryString: " + queryString

if( queryString.contains("stockholm") )
{
    // return the name of the response you want to dispatch
    return "Response Stockholm"
}
else if( queryString.contains("london") )
{
    // return the name of the response you want to dispatch
    return "Response London"
}


// Match based on header
def acceptEncodingHeadeList = mockRequest.getRequestHeaders().get("Accept-Encoding")
log.info "AcceptEncodig Header List: " + acceptEncodingHeadeList

if( acceptEncodingHeadeList.contains("gzip,deflate") )
{
    // return the name of the response you want to dispatch
    return "GZiped Response"
}

*/
</con:dispatchPath><con:response name="Response 1" httpResponseStatus="200"><con:settings/></con:response></con:restMockAction><con:restMockAction name="/alfresco/service/workspaces//elements" method="DELETE" resourcePath="/alfresco/service/workspaces//elements"><con:settings/><con:defaultResponse>Response 1</con:defaultResponse><con:dispatchStyle>SEQUENCE</con:dispatchStyle><con:dispatchPath>/*
// Examples showing how to match based on path, query param and header
// Match based on path
def requestPath = mockRequest.getPath()
log.info "Path: "+ requestPath

if( requestPath.contains("json") )
{
    // return the name of the response you want to dispatch
    return "JSON Response"
}


// Match based on query parameter
def queryString = mockRequest.getRequest().getQueryString()
log.info "QueryString: " + queryString

if( queryString.contains("stockholm") )
{
    // return the name of the response you want to dispatch
    return "Response Stockholm"
}
else if( queryString.contains("london") )
{
    // return the name of the response you want to dispatch
    return "Response London"
}


// Match based on header
def acceptEncodingHeadeList = mockRequest.getRequestHeaders().get("Accept-Encoding")
log.info "AcceptEncodig Header List: " + acceptEncodingHeadeList

if( acceptEncodingHeadeList.contains("gzip,deflate") )
{
    // return the name of the response you want to dispatch
    return "GZiped Response"
}

*/
</con:dispatchPath><con:response name="Response 1" httpResponseStatus="200"><con:settings/></con:response></con:restMockAction><con:restMockAction name="/alfresco/service/workspaces//elements" method="GET" resourcePath="/alfresco/service/workspaces//elements"><con:settings/><con:defaultResponse>Response 1</con:defaultResponse><con:dispatchStyle>SEQUENCE</con:dispatchStyle><con:dispatchPath>/*
// Examples showing how to match based on path, query param and header
// Match based on path
def requestPath = mockRequest.getPath()
log.info "Path: "+ requestPath

if( requestPath.contains("json") )
{
    // return the name of the response you want to dispatch
    return "JSON Response"
}


// Match based on query parameter
def queryString = mockRequest.getRequest().getQueryString()
log.info "QueryString: " + queryString

if( queryString.contains("stockholm") )
{
    // return the name of the response you want to dispatch
    return "Response Stockholm"
}
else if( queryString.contains("london") )
{
    // return the name of the response you want to dispatch
    return "Response London"
}


// Match based on header
def acceptEncodingHeadeList = mockRequest.getRequestHeaders().get("Accept-Encoding")
log.info "AcceptEncodig Header List: " + acceptEncodingHeadeList

if( acceptEncodingHeadeList.contains("gzip,deflate") )
{
    // return the name of the response you want to dispatch
    return "GZiped Response"
}

*/
</con:dispatchPath><con:response name="Response 1" httpResponseStatus="200"><con:settings/></con:response></con:restMockAction><con:restMockAction name="/alfresco/service/workspaces//elements/" method="POST" resourcePath="/alfresco/service/workspaces//elements/"><con:settings/><con:defaultResponse>Response 1</con:defaultResponse><con:dispatchStyle>SEQUENCE</con:dispatchStyle><con:dispatchPath>/*
// Examples showing how to match based on path, query param and header
// Match based on path
def requestPath = mockRequest.getPath()
log.info "Path: "+ requestPath

if( requestPath.contains("json") )
{
    // return the name of the response you want to dispatch
    return "JSON Response"
}


// Match based on query parameter
def queryString = mockRequest.getRequest().getQueryString()
log.info "QueryString: " + queryString

if( queryString.contains("stockholm") )
{
    // return the name of the response you want to dispatch
    return "Response Stockholm"
}
else if( queryString.contains("london") )
{
    // return the name of the response you want to dispatch
    return "Response London"
}


// Match based on header
def acceptEncodingHeadeList = mockRequest.getRequestHeaders().get("Accept-Encoding")
log.info "AcceptEncodig Header List: " + acceptEncodingHeadeList

if( acceptEncodingHeadeList.contains("gzip,deflate") )
{
    // return the name of the response you want to dispatch
    return "GZiped Response"
}

*/
</con:dispatchPath><con:response name="Response 1" httpResponseStatus="200"><con:settings/><con:responseContent/></con:response></con:restMockAction><con:restMockAction name="/alfresco/service/workspaces//elements/" method="PUT" resourcePath="/alfresco/service/workspaces//elements/"><con:settings/><con:defaultResponse>Response 1</con:defaultResponse><con:dispatchStyle>SEQUENCE</con:dispatchStyle><con:dispatchPath>/*
// Examples showing how to match based on path, query param and header
// Match based on path
def requestPath = mockRequest.getPath()
log.info "Path: "+ requestPath

if( requestPath.contains("json") )
{
    // return the name of the response you want to dispatch
    return "JSON Response"
}


// Match based on query parameter
def queryString = mockRequest.getRequest().getQueryString()
log.info "QueryString: " + queryString

if( queryString.contains("stockholm") )
{
    // return the name of the response you want to dispatch
    return "Response Stockholm"
}
else if( queryString.contains("london") )
{
    // return the name of the response you want to dispatch
    return "Response London"
}


// Match based on header
def acceptEncodingHeadeList = mockRequest.getRequestHeaders().get("Accept-Encoding")
log.info "AcceptEncodig Header List: " + acceptEncodingHeadeList

if( acceptEncodingHeadeList.contains("gzip,deflate") )
{
    // return the name of the response you want to dispatch
    return "GZiped Response"
}

*/
</con:dispatchPath><con:response name="Response 1" httpResponseStatus="200"><con:settings/><con:responseContent/></con:response></con:restMockAction><con:restMockAction name="/alfresco/service/workspaces//elements/" method="DELETE" resourcePath="/alfresco/service/workspaces//elements/"><con:settings/><con:defaultResponse>Response 1</con:defaultResponse><con:dispatchStyle>SEQUENCE</con:dispatchStyle><con:dispatchPath>/*
// Examples showing how to match based on path, query param and header
// Match based on path
def requestPath = mockRequest.getPath()
log.info "Path: "+ requestPath

if( requestPath.contains("json") )
{
    // return the name of the response you want to dispatch
    return "JSON Response"
}


// Match based on query parameter
def queryString = mockRequest.getRequest().getQueryString()
log.info "QueryString: " + queryString

if( queryString.contains("stockholm") )
{
    // return the name of the response you want to dispatch
    return "Response Stockholm"
}
else if( queryString.contains("london") )
{
    // return the name of the response you want to dispatch
    return "Response London"
}


// Match based on header
def acceptEncodingHeadeList = mockRequest.getRequestHeaders().get("Accept-Encoding")
log.info "AcceptEncodig Header List: " + acceptEncodingHeadeList

if( acceptEncodingHeadeList.contains("gzip,deflate") )
{
    // return the name of the response you want to dispatch
    return "GZiped Response"
}

*/
</con:dispatchPath><con:response name="Response 1" httpResponseStatus="200"><con:settings/><con:responseContent/></con:response></con:restMockAction><con:restMockAction name="/alfresco/service/workspaces/master/elements/19" method="GET" resourcePath="/alfresco/service/workspaces/master/elements/19"><con:settings/><con:defaultResponse>Response 1</con:defaultResponse><con:dispatchStyle>SEQUENCE</con:dispatchStyle><con:dispatchPath>/*
// Examples showing how to match based on path, query param and header
// Match based on path
def requestPath = mockRequest.getPath()
log.info "Path: "+ requestPath

if( requestPath.contains("json") )
{
    // return the name of the response you want to dispatch
    return "JSON Response"
}


// Match based on query parameter
def queryString = mockRequest.getRequest().getQueryString()
log.info "QueryString: " + queryString

if( queryString.contains("stockholm") )
{
    // return the name of the response you want to dispatch
    return "Response Stockholm"
}
else if( queryString.contains("london") )
{
    // return the name of the response you want to dispatch
    return "Response London"
}


// Match based on header
def acceptEncodingHeadeList = mockRequest.getRequestHeaders().get("Accept-Encoding")
log.info "AcceptEncodig Header List: " + acceptEncodingHeadeList

if( acceptEncodingHeadeList.contains("gzip,deflate") )
{
    // return the name of the response you want to dispatch
    return "GZiped Response"
}

*/
log.info("reached?");
</con:dispatchPath><con:response name="Response 200" httpResponseStatus="200" mediaType="application/json"><con:settings/><con:script>log.info("reaching correct response");</con:script><con:responseContent>"elements": [
	"author": "muschek"
]</con:responseContent></con:response></con:restMockAction><con:restMockAction name="/alfresco/service/workspaces//elements//versions" method="POST" resourcePath="/alfresco/service/workspaces//elements//versions"><con:settings/><con:defaultResponse>Response 1</con:defaultResponse><con:dispatchStyle>SEQUENCE</con:dispatchStyle><con:dispatchPath>/*
// Examples showing how to match based on path, query param and header
// Match based on path
def requestPath = mockRequest.getPath()
log.info "Path: "+ requestPath

if( requestPath.contains("json") )
{
    // return the name of the response you want to dispatch
    return "JSON Response"
}


// Match based on query parameter
def queryString = mockRequest.getRequest().getQueryString()
log.info "QueryString: " + queryString

if( queryString.contains("stockholm") )
{
    // return the name of the response you want to dispatch
    return "Response Stockholm"
}
else if( queryString.contains("london") )
{
    // return the name of the response you want to dispatch
    return "Response London"
}


// Match based on header
def acceptEncodingHeadeList = mockRequest.getRequestHeaders().get("Accept-Encoding")
log.info "AcceptEncodig Header List: " + acceptEncodingHeadeList

if( acceptEncodingHeadeList.contains("gzip,deflate") )
{
    // return the name of the response you want to dispatch
    return "GZiped Response"
}

*/
</con:dispatchPath><con:response name="Response 1" httpResponseStatus="200"><con:settings/></con:response></con:restMockAction><con:restMockAction name="/alfresco/service/workspaces//elements//versions" method="PUT" resourcePath="/alfresco/service/workspaces//elements//versions"><con:settings/><con:defaultResponse>Response 1</con:defaultResponse><con:dispatchStyle>SEQUENCE</con:dispatchStyle><con:dispatchPath>/*
// Examples showing how to match based on path, query param and header
// Match based on path
def requestPath = mockRequest.getPath()
log.info "Path: "+ requestPath

if( requestPath.contains("json") )
{
    // return the name of the response you want to dispatch
    return "JSON Response"
}


// Match based on query parameter
def queryString = mockRequest.getRequest().getQueryString()
log.info "QueryString: " + queryString

if( queryString.contains("stockholm") )
{
    // return the name of the response you want to dispatch
    return "Response Stockholm"
}
else if( queryString.contains("london") )
{
    // return the name of the response you want to dispatch
    return "Response London"
}


// Match based on header
def acceptEncodingHeadeList = mockRequest.getRequestHeaders().get("Accept-Encoding")
log.info "AcceptEncodig Header List: " + acceptEncodingHeadeList

if( acceptEncodingHeadeList.contains("gzip,deflate") )
{
    // return the name of the response you want to dispatch
    return "GZiped Response"
}

*/
</con:dispatchPath><con:response name="Response 1" httpResponseStatus="200"><con:settings/></con:response></con:restMockAction><con:restMockAction name="/alfresco/service/workspaces//elements//versions" method="DELETE" resourcePath="/alfresco/service/workspaces//elements//versions"><con:settings/><con:defaultResponse>Response 1</con:defaultResponse><con:dispatchStyle>SEQUENCE</con:dispatchStyle><con:dispatchPath>/*
// Examples showing how to match based on path, query param and header
// Match based on path
def requestPath = mockRequest.getPath()
log.info "Path: "+ requestPath

if( requestPath.contains("json") )
{
    // return the name of the response you want to dispatch
    return "JSON Response"
}


// Match based on query parameter
def queryString = mockRequest.getRequest().getQueryString()
log.info "QueryString: " + queryString

if( queryString.contains("stockholm") )
{
    // return the name of the response you want to dispatch
    return "Response Stockholm"
}
else if( queryString.contains("london") )
{
    // return the name of the response you want to dispatch
    return "Response London"
}


// Match based on header
def acceptEncodingHeadeList = mockRequest.getRequestHeaders().get("Accept-Encoding")
log.info "AcceptEncodig Header List: " + acceptEncodingHeadeList

if( acceptEncodingHeadeList.contains("gzip,deflate") )
{
    // return the name of the response you want to dispatch
    return "GZiped Response"
}

*/
</con:dispatchPath><con:response name="Response 1" httpResponseStatus="200"><con:settings/></con:response></con:restMockAction><con:restMockAction name="/alfresco/service/workspaces//elements//versions" method="GET" resourcePath="/alfresco/service/workspaces//elements//versions"><con:settings/><con:defaultResponse>Response 1</con:defaultResponse><con:dispatchStyle>SEQUENCE</con:dispatchStyle><con:dispatchPath>/*
// Examples showing how to match based on path, query param and header
// Match based on path
def requestPath = mockRequest.getPath()
log.info "Path: "+ requestPath

if( requestPath.contains("json") )
{
    // return the name of the response you want to dispatch
    return "JSON Response"
}


// Match based on query parameter
def queryString = mockRequest.getRequest().getQueryString()
log.info "QueryString: " + queryString

if( queryString.contains("stockholm") )
{
    // return the name of the response you want to dispatch
    return "Response Stockholm"
}
else if( queryString.contains("london") )
{
    // return the name of the response you want to dispatch
    return "Response London"
}


// Match based on header
def acceptEncodingHeadeList = mockRequest.getRequestHeaders().get("Accept-Encoding")
log.info "AcceptEncodig Header List: " + acceptEncodingHeadeList

if( acceptEncodingHeadeList.contains("gzip,deflate") )
{
    // return the name of the response you want to dispatch
    return "GZiped Response"
}

*/
</con:dispatchPath><con:response name="Response 1" httpResponseStatus="200"><con:settings/></con:response></con:restMockAction><con:restMockAction name="/alfresco/service/workspaces//elements//versions/" method="POST" resourcePath="/alfresco/service/workspaces//elements//versions/"><con:settings/><con:defaultResponse>Response 1</con:defaultResponse><con:dispatchStyle>SEQUENCE</con:dispatchStyle><con:dispatchPath>/*
// Examples showing how to match based on path, query param and header
// Match based on path
def requestPath = mockRequest.getPath()
log.info "Path: "+ requestPath

if( requestPath.contains("json") )
{
    // return the name of the response you want to dispatch
    return "JSON Response"
}


// Match based on query parameter
def queryString = mockRequest.getRequest().getQueryString()
log.info "QueryString: " + queryString

if( queryString.contains("stockholm") )
{
    // return the name of the response you want to dispatch
    return "Response Stockholm"
}
else if( queryString.contains("london") )
{
    // return the name of the response you want to dispatch
    return "Response London"
}


// Match based on header
def acceptEncodingHeadeList = mockRequest.getRequestHeaders().get("Accept-Encoding")
log.info "AcceptEncodig Header List: " + acceptEncodingHeadeList

if( acceptEncodingHeadeList.contains("gzip,deflate") )
{
    // return the name of the response you want to dispatch
    return "GZiped Response"
}

*/
</con:dispatchPath><con:response name="Response 1" httpResponseStatus="200"><con:settings/></con:response></con:restMockAction><con:restMockAction name="/alfresco/service/workspaces//elements//versions/" method="PUT" resourcePath="/alfresco/service/workspaces//elements//versions/"><con:settings/><con:defaultResponse>Response 1</con:defaultResponse><con:dispatchStyle>SEQUENCE</con:dispatchStyle><con:dispatchPath>/*
// Examples showing how to match based on path, query param and header
// Match based on path
def requestPath = mockRequest.getPath()
log.info "Path: "+ requestPath

if( requestPath.contains("json") )
{
    // return the name of the response you want to dispatch
    return "JSON Response"
}


// Match based on query parameter
def queryString = mockRequest.getRequest().getQueryString()
log.info "QueryString: " + queryString

if( queryString.contains("stockholm") )
{
    // return the name of the response you want to dispatch
    return "Response Stockholm"
}
else if( queryString.contains("london") )
{
    // return the name of the response you want to dispatch
    return "Response London"
}


// Match based on header
def acceptEncodingHeadeList = mockRequest.getRequestHeaders().get("Accept-Encoding")
log.info "AcceptEncodig Header List: " + acceptEncodingHeadeList

if( acceptEncodingHeadeList.contains("gzip,deflate") )
{
    // return the name of the response you want to dispatch
    return "GZiped Response"
}

*/
</con:dispatchPath><con:response name="Response 1" httpResponseStatus="200"><con:settings/></con:response></con:restMockAction><con:restMockAction name="/alfresco/service/workspaces//elements//versions/" method="DELETE" resourcePath="/alfresco/service/workspaces//elements//versions/"><con:settings/><con:defaultResponse>Response 1</con:defaultResponse><con:dispatchStyle>SEQUENCE</con:dispatchStyle><con:dispatchPath>/*
// Examples showing how to match based on path, query param and header
// Match based on path
def requestPath = mockRequest.getPath()
log.info "Path: "+ requestPath

if( requestPath.contains("json") )
{
    // return the name of the response you want to dispatch
    return "JSON Response"
}


// Match based on query parameter
def queryString = mockRequest.getRequest().getQueryString()
log.info "QueryString: " + queryString

if( queryString.contains("stockholm") )
{
    // return the name of the response you want to dispatch
    return "Response Stockholm"
}
else if( queryString.contains("london") )
{
    // return the name of the response you want to dispatch
    return "Response London"
}


// Match based on header
def acceptEncodingHeadeList = mockRequest.getRequestHeaders().get("Accept-Encoding")
log.info "AcceptEncodig Header List: " + acceptEncodingHeadeList

if( acceptEncodingHeadeList.contains("gzip,deflate") )
{
    // return the name of the response you want to dispatch
    return "GZiped Response"
}

*/
</con:dispatchPath><con:response name="Response 1" httpResponseStatus="200"><con:settings/></con:response></con:restMockAction><con:restMockAction name="/alfresco/service/workspaces//elements//versions/" method="GET" resourcePath="/alfresco/service/workspaces//elements//versions/"><con:settings/><con:defaultResponse xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/><con:dispatchStyle>SEQUENCE</con:dispatchStyle><con:dispatchPath>/*
// Examples showing how to match based on path, query param and header
// Match based on path
def requestPath = mockRequest.getPath()
log.info "Path: "+ requestPath

if( requestPath.contains("json") )
{
    // return the name of the response you want to dispatch
    return "JSON Response"
}


// Match based on query parameter
def queryString = mockRequest.getRequest().getQueryString()
log.info "QueryString: " + queryString

if( queryString.contains("stockholm") )
{
    // return the name of the response you want to dispatch
    return "Response Stockholm"
}
else if( queryString.contains("london") )
{
    // return the name of the response you want to dispatch
    return "Response London"
}


// Match based on header
def acceptEncodingHeadeList = mockRequest.getRequestHeaders().get("Accept-Encoding")
log.info "AcceptEncodig Header List: " + acceptEncodingHeadeList

if( acceptEncodingHeadeList.contains("gzip,deflate") )
{
    // return the name of the response you want to dispatch
    return "GZiped Response"
}

*/
</con:dispatchPath><con:response name="Response 1" httpResponseStatus="200"><con:settings/></con:response></con:restMockAction><con:restMockAction name="/alfresco/service/workspaces//elements//comments" method="POST" resourcePath="/alfresco/service/workspaces//elements//comments"><con:settings/><con:defaultResponse>Response 1</con:defaultResponse><con:dispatchStyle>SEQUENCE</con:dispatchStyle><con:dispatchPath>/*
// Examples showing how to match based on path, query param and header
// Match based on path
def requestPath = mockRequest.getPath()
log.info "Path: "+ requestPath

if( requestPath.contains("json") )
{
    // return the name of the response you want to dispatch
    return "JSON Response"
}


// Match based on query parameter
def queryString = mockRequest.getRequest().getQueryString()
log.info "QueryString: " + queryString

if( queryString.contains("stockholm") )
{
    // return the name of the response you want to dispatch
    return "Response Stockholm"
}
else if( queryString.contains("london") )
{
    // return the name of the response you want to dispatch
    return "Response London"
}


// Match based on header
def acceptEncodingHeadeList = mockRequest.getRequestHeaders().get("Accept-Encoding")
log.info "AcceptEncodig Header List: " + acceptEncodingHeadeList

if( acceptEncodingHeadeList.contains("gzip,deflate") )
{
    // return the name of the response you want to dispatch
    return "GZiped Response"
}

*/
</con:dispatchPath><con:response name="Response 1" httpResponseStatus="200"><con:settings/></con:response></con:restMockAction><con:restMockAction name="/alfresco/service/workspaces//elements//comments" method="PUT" resourcePath="/alfresco/service/workspaces//elements//comments"><con:settings/><con:defaultResponse>Response 1</con:defaultResponse><con:dispatchStyle>SEQUENCE</con:dispatchStyle><con:dispatchPath>/*
// Examples showing how to match based on path, query param and header
// Match based on path
def requestPath = mockRequest.getPath()
log.info "Path: "+ requestPath

if( requestPath.contains("json") )
{
    // return the name of the response you want to dispatch
    return "JSON Response"
}


// Match based on query parameter
def queryString = mockRequest.getRequest().getQueryString()
log.info "QueryString: " + queryString

if( queryString.contains("stockholm") )
{
    // return the name of the response you want to dispatch
    return "Response Stockholm"
}
else if( queryString.contains("london") )
{
    // return the name of the response you want to dispatch
    return "Response London"
}


// Match based on header
def acceptEncodingHeadeList = mockRequest.getRequestHeaders().get("Accept-Encoding")
log.info "AcceptEncodig Header List: " + acceptEncodingHeadeList

if( acceptEncodingHeadeList.contains("gzip,deflate") )
{
    // return the name of the response you want to dispatch
    return "GZiped Response"
}

*/
</con:dispatchPath><con:response name="Response 1" httpResponseStatus="200"><con:settings/></con:response></con:restMockAction><con:restMockAction name="/alfresco/service/workspaces//elements//comments" method="DELETE" resourcePath="/alfresco/service/workspaces//elements//comments"><con:settings/><con:defaultResponse>Response 1</con:defaultResponse><con:dispatchStyle>SEQUENCE</con:dispatchStyle><con:dispatchPath>/*
// Examples showing how to match based on path, query param and header
// Match based on path
def requestPath = mockRequest.getPath()
log.info "Path: "+ requestPath

if( requestPath.contains("json") )
{
    // return the name of the response you want to dispatch
    return "JSON Response"
}


// Match based on query parameter
def queryString = mockRequest.getRequest().getQueryString()
log.info "QueryString: " + queryString

if( queryString.contains("stockholm") )
{
    // return the name of the response you want to dispatch
    return "Response Stockholm"
}
else if( queryString.contains("london") )
{
    // return the name of the response you want to dispatch
    return "Response London"
}


// Match based on header
def acceptEncodingHeadeList = mockRequest.getRequestHeaders().get("Accept-Encoding")
log.info "AcceptEncodig Header List: " + acceptEncodingHeadeList

if( acceptEncodingHeadeList.contains("gzip,deflate") )
{
    // return the name of the response you want to dispatch
    return "GZiped Response"
}

*/
</con:dispatchPath><con:response name="Response 1" httpResponseStatus="200"><con:settings/></con:response></con:restMockAction><con:restMockAction name="/alfresco/service/workspaces//elements//comments" method="GET" resourcePath="/alfresco/service/workspaces//elements//comments"><con:settings/><con:defaultResponse>Response 1</con:defaultResponse><con:dispatchStyle>SEQUENCE</con:dispatchStyle><con:dispatchPath>/*
// Examples showing how to match based on path, query param and header
// Match based on path
def requestPath = mockRequest.getPath()
log.info "Path: "+ requestPath

if( requestPath.contains("json") )
{
    // return the name of the response you want to dispatch
    return "JSON Response"
}


// Match based on query parameter
def queryString = mockRequest.getRequest().getQueryString()
log.info "QueryString: " + queryString

if( queryString.contains("stockholm") )
{
    // return the name of the response you want to dispatch
    return "Response Stockholm"
}
else if( queryString.contains("london") )
{
    // return the name of the response you want to dispatch
    return "Response London"
}


// Match based on header
def acceptEncodingHeadeList = mockRequest.getRequestHeaders().get("Accept-Encoding")
log.info "AcceptEncodig Header List: " + acceptEncodingHeadeList

if( acceptEncodingHeadeList.contains("gzip,deflate") )
{
    // return the name of the response you want to dispatch
    return "GZiped Response"
}

*/
</con:dispatchPath><con:response name="Response 1" httpResponseStatus="200"><con:settings/></con:response></con:restMockAction><con:restMockAction name="/alfresco/service/workspaces//elements//comments/" method="POST" resourcePath="/alfresco/service/workspaces//elements//comments/"><con:settings/><con:defaultResponse>Response 1</con:defaultResponse><con:dispatchStyle>SEQUENCE</con:dispatchStyle><con:dispatchPath>/*
// Examples showing how to match based on path, query param and header
// Match based on path
def requestPath = mockRequest.getPath()
log.info "Path: "+ requestPath

if( requestPath.contains("json") )
{
    // return the name of the response you want to dispatch
    return "JSON Response"
}


// Match based on query parameter
def queryString = mockRequest.getRequest().getQueryString()
log.info "QueryString: " + queryString

if( queryString.contains("stockholm") )
{
    // return the name of the response you want to dispatch
    return "Response Stockholm"
}
else if( queryString.contains("london") )
{
    // return the name of the response you want to dispatch
    return "Response London"
}


// Match based on header
def acceptEncodingHeadeList = mockRequest.getRequestHeaders().get("Accept-Encoding")
log.info "AcceptEncodig Header List: " + acceptEncodingHeadeList

if( acceptEncodingHeadeList.contains("gzip,deflate") )
{
    // return the name of the response you want to dispatch
    return "GZiped Response"
}

*/
</con:dispatchPath><con:response name="Response 1" httpResponseStatus="200"><con:settings/></con:response></con:restMockAction><con:restMockAction name="/alfresco/service/workspaces//elements//comments/" method="PUT" resourcePath="/alfresco/service/workspaces//elements//comments/"><con:settings/><con:defaultResponse>Response 1</con:defaultResponse><con:dispatchStyle>SEQUENCE</con:dispatchStyle><con:dispatchPath>/*
// Examples showing how to match based on path, query param and header
// Match based on path
def requestPath = mockRequest.getPath()
log.info "Path: "+ requestPath

if( requestPath.contains("json") )
{
    // return the name of the response you want to dispatch
    return "JSON Response"
}


// Match based on query parameter
def queryString = mockRequest.getRequest().getQueryString()
log.info "QueryString: " + queryString

if( queryString.contains("stockholm") )
{
    // return the name of the response you want to dispatch
    return "Response Stockholm"
}
else if( queryString.contains("london") )
{
    // return the name of the response you want to dispatch
    return "Response London"
}


// Match based on header
def acceptEncodingHeadeList = mockRequest.getRequestHeaders().get("Accept-Encoding")
log.info "AcceptEncodig Header List: " + acceptEncodingHeadeList

if( acceptEncodingHeadeList.contains("gzip,deflate") )
{
    // return the name of the response you want to dispatch
    return "GZiped Response"
}

*/
</con:dispatchPath><con:response name="Response 1" httpResponseStatus="200"><con:settings/></con:response></con:restMockAction><con:restMockAction name="/alfresco/service/workspaces//elements//comments/" method="DELETE" resourcePath="/alfresco/service/workspaces//elements//comments/"><con:settings/><con:defaultResponse>Response 1</con:defaultResponse><con:dispatchStyle>SEQUENCE</con:dispatchStyle><con:dispatchPath>/*
// Examples showing how to match based on path, query param and header
// Match based on path
def requestPath = mockRequest.getPath()
log.info "Path: "+ requestPath

if( requestPath.contains("json") )
{
    // return the name of the response you want to dispatch
    return "JSON Response"
}


// Match based on query parameter
def queryString = mockRequest.getRequest().getQueryString()
log.info "QueryString: " + queryString

if( queryString.contains("stockholm") )
{
    // return the name of the response you want to dispatch
    return "Response Stockholm"
}
else if( queryString.contains("london") )
{
    // return the name of the response you want to dispatch
    return "Response London"
}


// Match based on header
def acceptEncodingHeadeList = mockRequest.getRequestHeaders().get("Accept-Encoding")
log.info "AcceptEncodig Header List: " + acceptEncodingHeadeList

if( acceptEncodingHeadeList.contains("gzip,deflate") )
{
    // return the name of the response you want to dispatch
    return "GZiped Response"
}

*/
</con:dispatchPath><con:response name="Response 1" httpResponseStatus="200"><con:settings/></con:response></con:restMockAction><con:restMockAction name="/alfresco/service/workspaces//elements//comments/" method="GET" resourcePath="/alfresco/service/workspaces//elements//comments/"><con:settings/><con:defaultResponse>Response 1</con:defaultResponse><con:dispatchStyle>SEQUENCE</con:dispatchStyle><con:dispatchPath>/*
// Examples showing how to match based on path, query param and header
// Match based on path
def requestPath = mockRequest.getPath()
log.info "Path: "+ requestPath

if( requestPath.contains("json") )
{
    // return the name of the response you want to dispatch
    return "JSON Response"
}


// Match based on query parameter
def queryString = mockRequest.getRequest().getQueryString()
log.info "QueryString: " + queryString

if( queryString.contains("stockholm") )
{
    // return the name of the response you want to dispatch
    return "Response Stockholm"
}
else if( queryString.contains("london") )
{
    // return the name of the response you want to dispatch
    return "Response London"
}


// Match based on header
def acceptEncodingHeadeList = mockRequest.getRequestHeaders().get("Accept-Encoding")
log.info "AcceptEncodig Header List: " + acceptEncodingHeadeList

if( acceptEncodingHeadeList.contains("gzip,deflate") )
{
    // return the name of the response you want to dispatch
    return "GZiped Response"
}

*/
</con:dispatchPath><con:response name="Response 1" httpResponseStatus="200"><con:settings/></con:response></con:restMockAction></con:restMockService><con:requirements/><con:properties/><con:wssContainer/><con:databaseConnectionContainer/><con:oAuth2ProfileContainer/><con:reporting><con:xmlTemplates/><con:parameters/></con:reporting></con:soapui-project>