#%RAML 0.8
---
# NOTE: to import into SOAPUI, change all the schema references to '|' since it
#       can't find them and to remove the examples since it can't parse them
title: mms
version: v1.0
mediaType: application/json
baseUri: https://{server}/alfresco/service
protocols: [HTTPS]
documentation: 
  - title: Home
    content: |
      Welcome to the _Model Management System (MMS) API_ Documentation. The _MMS API_
      allows you to connect your application to our RESTful service for accessing
      systems engineering model information.

securitySchemes:
  - basic:
      type: Basic Authentication

schemas:
  # these all return elements - search may need to be paged
  - elements: !include elements.json
  - views:    !include elements.json
  - products: !include elements.json

  - comments:       !include elements.json    
  - configurations: !include configurations.json
  - projects:       !include projects.json
  - snapshots:      !include snapshots.json
  - versions:       !include versions.json
    
  - sites:       !include sites.json
  - workspaces:  !include workspaces.json
    
  - diff:        !include diff.json
  - client:      !include client.json
  
  # include post/ put and delete responses
  #- elementsResponse: !include postResponse.json
  #- viewsResponse: !include postResponse.json
traits:
  - backgroundable:
      description: Aspect for resources that can be created/updated in the asynchronously in
                   the background. Mostly for large, long running creations.
      queryParameters:
        background:
          description: Runs create/update in the asynchronously in the background
                       if true, or synchronously if false or not specified
          type: boolean
  - constrainable:
      description: Aspect for resources that are or can be constrained
      queryParameters:
        fix:
          description: If true, fixes the constraint as scoped by the element (defaults false)
          type: boolean
        validate:
          description: If true, validates the constraint as scoped by the element (defaults false). If specified with fix, overrides fix
          type: boolean
  - recursable:
      description: Aspect for resources that can be retrieved recursively
      queryParameters:
        recurse:
          description: If true, finds all elements recursively based on containment hierarchy
          type: boolean
        recurseDepth:
          description: Recurse depth. 0 specifies infinite recursion (e.g., until all leaf
                       nodes are found).
          type: integer
  - searchable:
      description: Aspect for resources that can be searched for any resource type
      queryParameters:
        search:
          description: Regular expression of the search to be executed at the specified scope.
                       Currently search is against id, name, documentation, body.
          type: string
        type:
          description: Filter results based on specified type
          type: string
  - sliceable:
      description: Aspect for resources that can be queried via a timestamp
      queryParameters:
        timestamp:
          description: Timestamp to find most recent version of <<resourcePathName>>,
                       specified in ISO8601 time format.
          type: date
  - diffable:
      description: Aspect for resources that can be diffed or merged
      queryParameters:
        workspace1:
          description: The source workspaces to compare against
          type: string
        workspace2:
          description: The target workspaces to compare
          type: string
resourceTypes:
  - readCollection:
      securedBy: [basic]
      usage: Resources with read capabilities and standard responses
      description: Read operations for <<resourcePathName>>
      get:
          is: [recursable, searchable, sliceable]
          description: Read operation for <<resourcePathName>>
          responses:
              200:
                description: <<resourcePathName>> read successful
                body:
                  application/json:
                    schema: <<resourcePathName>>
              400:
                description: Malformed request by client
              401:
                description: User does not have read permissions to <<resourcePathName>>
              404:
                description: <<resourcePathName>> not found
              500:
                description: Could not read <<resourcePathName>> due to internal server error
  - collection:
      type: readCollection
      usage: Resources with CRUD capabilities
      description: Create, Read, Update, and Delete operations for <<resourcePathName>>
      post:
        description: Append operation for <<resourcePathName>>
        body:
          application/json:
            schema: <<resourcePathName>>
        responses:
          200:
            body:
              application/json:
                schema: <<resourcePathName>>PostResponse
            description: <<resourcePathName>> append successful
          202:
            description: <<resourcePathName>> append started, but not yet completed
          401:
            description: User does not have write permissions to <<resourcePathName>>
          404:
            description: <<resourcePathName>> not found
          409:
            description: <<resourcePathName>> conflict detected (e.g., intervening update
                         occurred between when user accessed resource and when user saved
                         resource)
          500:
            description: Could not append to <<resourcePathName>> due to internal server error   
      put:
        description: Create/update operation for <<resourcePathName>>
        body:
          application/json:
            schema: <<resourcePathName>>
        responses:
          200:
            description: <<resourcePathName>> update successful
            body:
              application/json:
                schema: <<resourcePathName>>PutResponse
          201:
            description: <<resourcePathName>> create successful
          202:
            description: <<resourcePathName>> create/update started, but not yet completed
          401:
            description: User does not have create/update permissions to <<resourcePathName>>
          404:
            description: <<resourcePathName>> not found
          409:
            description: <<resourcePathName>> conflict detected (e.g., intervening update 
                         occurred between when user accessed resource and when user updated
                         resource)
          500:
            description: Could not append to <<resourcePathName>> due to internal server error
      delete:
        description: Delete operation for <<resourcePathName>>
        responses:
          200:
            description: <<resourcePathName>> delete successful
            body:
              application/json:
                schema:  <<resourcePathName>>DeleteResponse
          202:
            description: <<resourcePathName>> delete started, but not yet completed
          401:
            description: User does not have delete permissions to <<resourcePathName>>
          404:
            description: <<resourcePathName>> not found
          500:
            description: Could not delete <<resourcePathName>> due to internal server error
/workspaces:
  description: All resources are "namespaced" by the workspace (aka branch).
  type: readCollection
  /{workspaceId}:
    type: collection
    uriParameters:
      workspaceId:
        description: Workspace ID under consideration. "master" is always defined and is the
                     "trunk" workspace to which all other workspaces should be merged.
                     "master" is what is contained at the Alfresco sites level.
    post:
      queryParameters:
        sourceWorkspace:
          description: The source workspace to branch from 
          type: string
    /elements:
      type: collection
      /{elementId}:
        post:
          is: [constrainable]
        put:
          is: [constrainable]
        type: collection
        uriParameters:
          elementId:
            description: Sysml ID for the element under consideration
        /comments:
          type: collection
          /{commentId}:
            type: collection
            uriParameters:
              commentId:
                description: Sysml ID for comment under consideration
        /versions:
          type: collection
          /{versionId}:
            type: collection
            uriParameters:
              versionId:
                description: Sysml ID for the version under consideration
    /sites:
      type: readCollection
      get:
        description: Retrieve all sites for which user has read permissions
        responses:
          200:
      /{siteId}:
        uriParameters:
          siteId:
            description: Alfresco site identifier for the project under consideration
        /configurations:
          type: collection
          /{configurationId}:
            type: collection
            uriParameters:
              configurationId:
                description: ID for the configuration under consideration
            /products:
              description: Get products for the specified configuration
              type: collection
            /snapshots:
              description: Get snapshots for the specified configuration
              type: collection
        /projects:
          type: readCollection
          get:
            description: Retrieve all projects for which user has read permissions
            responses:
              200:
          /{projectId}:
            type: readCollection
            uriParameters:
              projectId:
                description: MD project ID for the project under consideration
        /products:
          type: collection
          get:
            description: Retrieve all products for which user has read permissions
            responses:
              200:
          /{productId}:
            type: collection
            uriParameters:
              productId:
                description: Sysml ID for the product (document) under consideration
            /views:
              type: readCollection
            /snapshots:
              description: Scoped under /configurations and /products
              type: collection
              /{snapshotId}:
                type: collection
                uriParameters:
                  snapshotId:
                    description: ID for the snapshot under consideration
    /views:
      type: collection
      /{viewId}:
        type: collection
        uriParameters:
          viewId:
            description: Sysml ID for the view under consideration
        /elements:
          type: collection
          /{elementId}:
            post:
              is: [constrainable]
            put:
              is: [constrainable]
            type: collection
            uriParameters:
              elementId:
                description: Sysml ID for the element under consideration
            /comments:
              type: collection
              /{commentId}:
                type: collection
                uriParameters:
                  commentId:
                    description: Sysml ID for comment under consideration
            /versions:
              type: collection
              /{versionId}:
                type: collection
                uriParameters:
                  versionId:
                    description: Sysml ID for the version under consideration
    /changesets:
      type: readCollection
      description: Track groups of changes together so they can be rolled back together if
                   necessary as well
      /{changesetId}:
        post:
          description: Revert Alfresco to the specified change set
          responses:
            200:
              description: Successfully reverted the changeset
    /artifacts:
      /{artifactId}:
        type: collection
/operations:
  description: Service for executing operations, e.g., like the OCL Execution capabilities in MDK. Details still TBD.
/diff:
  description: Service for diffing between two model versions between projects
  type: collection
  get:
    is: [diffable]
    queryParameters:      
      workspace1Timestamp:
        description: The source workspace timestamp to use in comparison (if not specified, gets latest)
        type: date
      workspace2Timestamp:
        description: The target workspace timestamp to use in comparison (if not specified, gets latest)
        type: date
/merge:
  post:
    is: [diffable]
/client:
  post:
    queryParameters:
      unregister:
        description: if specified, indicates deregistration, otherwise if not specified, always registration or update 
        type: boolean
    body:
      application/json:
        schema:
          client