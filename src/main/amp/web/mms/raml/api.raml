#%RAML 0.8

title: mms
version: v1.0
mediaType: application/json
baseUri: https://{server}/alfresco/service
protocols: [HTTPS]
documentation: 
  - title: Home
    content: |
      Welcome to the _Model Management System (MMS) API_ Documentation. The _MMS API_
      allows you to connect your application to our RESTful service for accessing
      systems engineering model information.

securitySchemes:
  - basic:
      type: Basic Authentication

schemas:
  - elements: |
  - views:    |
  - products: |

  - configurations: |
  - projects:       |
  - snapshots:      |
    
  - sites:       |
  - workspaces:  |
    
  - diff:        |
  - client:      |
    
  - connections: |
  
  # include post/ put and delete responses
  #- elementsResponse: |
  #- viewsResponse: |
traits:
  - backgroundable:
      description: Aspect for resources that can be created/updated in the asynchronously in
                   the background. Mostly for large, long running creations.
      queryParameters:
        background:
          description: Runs create/update in the asynchronously in the background
                       if true, or synchronously if false or not specified
          type: boolean
  - constrainable:
      description: Aspect for resources that are or can be constrained
      queryParameters:
        fix:
          description: If true, fixes the constraint as scoped by the element (defaults false)
          type: boolean
        validate:
          description: If true, validates the constraint as scoped by the element (defaults false). If specified with fix, overrides fix
          type: boolean
  - qualifiable:
      description: Aspect for resources that can be that can exclude the qualified names/ids
      queryParameters:
        qualified:
          description: If false, doesn't display qualified names
          type: boolean
  - recursable:
      description: Aspect for resources that can be retrieved recursively
      queryParameters:
        recurse:
          description: If true, finds all elements recursively based on containment hierarchy.
                       This overrides depth so it is -1 regardless if depth is specified. 
          type: boolean
        depth:
          description: Recurse depth. -1 specifies infinite recursion (e.g., until all leaf
                       nodes are found). 0 is the same as specifying no depth. 1 finds
                       everything 1 level deep, so on and so forth.
          type: integer
  - searchable:
      description: Aspect for resources that can be searched for any resource type
      queryParameters:
        search:
          description: Regular expression of the search to be executed at the specified scope.
                       Currently search is against id, name, documentation, body.
          type: string
        type:
          description: Filter results based on specified type
          type: string
  - sliceable:
      description: Aspect for resources that can be queried via a timestamp
      queryParameters:
        timestamp:
          description: Timestamp to find most recent version of <<resourcePathName>>,
                       specified in ISO8601 time format.
          type: date
  - diffable:
      description: Aspect for resources that can be diffed or merged
      queryParameters:
        workspace1:
          description: The source workspaces to compare against
          type: string
        workspace2:
          description: The target workspaces to compare
          type: string
        timestamp1:
          description: The source workspace timestamp to use in comparison (if not specified, gets latest)
          type: date
        timestamp2:
          description: The target workspace timestamp to use in comparison (if not specified, gets latest)
          type: date
  - workspaceable:
        queryParameters:
            sourceWorkspace:
              description: The source workspace to branch from 
              type: string
            copyTime:
              description: The time to branch this workspace off the source workspace
              type: date
            follow:
              description: Flag to indicate using a following branch.  Will ignore copyTime in this case.
          
resourceTypes:
  - readCollection:
      securedBy: [basic]
      usage: Resources with read capabilities and standard responses
      description: Read operations for <<resourcePathName>>
      get:
          #is: [recursable, searchable, sliceable]
          is: [recursable, sliceable] # Not searchable yet
          description: Read operation for <<resourcePathName>>
          responses:
              200:
                description: <<resourcePathName>> read successful
                body:
                  application/json:
                    schema: <<resourcePathName>>
              400:
                description: Malformed request by client
              401:
                description: User does not have read permissions to <<resourcePathName>>
              404:
                description: <<resourcePathName>> not found
              500:
                description: Could not read <<resourcePathName>> due to internal server error
  - collection:
      type: readCollection
      usage: Resources with CRUD capabilities
      description: Create, Read, Update, and Delete operations for <<resourcePathName>>
      post:
        description: Append operation for <<resourcePathName>>
        body:
          application/json:
            schema: <<resourcePathName>>
        responses:
          200:
            body:
              application/json:
                schema: <<resourcePathName>>
            description: <<resourcePathName>> append successful
          202:
            description: <<resourcePathName>> append started, but not yet completed
          401:
            description: User does not have write permissions to <<resourcePathName>>
          404:
            description: <<resourcePathName>> not found
          409:
            description: <<resourcePathName>> conflict detected (e.g., intervening update
                         occurred between when user accessed resource and when user saved
                         resource)
          500:
            description: Could not append to <<resourcePathName>> due to internal server error   
#      put:
#        description: Create/update operation for <<resourcePathName>>
#        body:
#          schema: <<resourcePathName>>
#        responses:
#          200:
#            description: <<resourcePathName>> update successful
#            body:
#              schema: <<resourcePathName>>PutResponse
#          201:
#            description: <<resourcePathName>> create successful
#          202:
#            description: <<resourcePathName>> create/update started, but not yet completed
#          401:
#            description: User does not have create/update permissions to <<resourcePathName>>
#          404:
#            description: <<resourcePathName>> not found
#          409:
#            description: <<resourcePathName>> conflict detected (e.g., intervening update 
#                         occurred between when user accessed resource and when user updated
#                         resource)
#          500:
#            description: Could not append to <<resourcePathName>> due to internal server error
      delete:
        description: Delete operation for <<resourcePathName>>
        responses:
          200:
            description: <<resourcePathName>> delete successful
            body:
              application/json:
                schema:  <<resourcePathName>>
          202:
            description: <<resourcePathName>> delete started, but not yet completed
          401:
            description: User does not have delete permissions to <<resourcePathName>>
          404:
            description: <<resourcePathName>> not found
          500:
            description: Could not delete <<resourcePathName>> due to internal server error
  - connection:
      get:
        description: Get configuration for <<resourcePathName>>
        responses:
          200:
            body:
              application/json:
                schema: connections
      post:
        description: Configure <<resourcePathName>>
        body:
          application/json:
            schema: connections
        responses:
          200:
          	#description
  
/workspaces:
  description: All resources are "namespaced" by the workspace (aka branch).
  #type: readCollection  # doesnt support any of the query parameters
  get:
      description: Get all the workspaces
  post:
      description: Post a workspace using the query parameters and supplied json
      body:
        application/json:
          schema: workspaces
      is: [workspaceable]
  /{workspaceId}:
    #type: collection  # Doesnt support all the query parameters yet
    uriParameters:
      workspaceId:
        description: Workspace ID under consideration. "master" is always defined and is the
                     "trunk" workspace to which all other workspaces should be merged.
                     "master" is what is contained at the Alfresco sites level.
    post:
      description: Post a workspace using the query parameters
      is: [workspaceable]
    get:
      description: Get the specified workspace
    delete:
      description: Delete the specified workspace
    /elements:
      type: collection
      /{elementId}:
        type: collection
        uriParameters:
          elementId:
            description: Sysml ID for the element under consideration
    /configurations:
      #type: collection
      get:
      	description: Get all configuration sets for a specified workspace #in ConfigurationGet it says for site, but should it be for workspace instead
      post:
      	description: Post a configuration set for a specified #site in ConfigurationGet it says for site, but should it be for workspace instead
      /{configurationId}:
        #type: collection
        delete:
        	description: Delete the configuration set specified by the configuration ID
        get:
        	description: Get the configuration using the configuration ID
        uriParameters:
          configurationId:
            description: ID for the configuration under consideration
        /products:
          description: Get products for the specified configuration
          #type: collection
          post:
          	description: Post a product for the specified configuration set
          get:
          	description: Get products for specified configuration set
        /snapshots:
          description: Handles creation of a snapshot or generation snapshot elements for the specified configuration set
                  #old description said the following but SnapshotPost.java says the former #Get snapshots for the specified configuration
          #type: collection
          post:
          	description: Post a snapshot or generate artificats for the specified configuration set
          get: #does this exist #i dont see SnapshotGet.java but there is like snapshot.get.desc.xml and snapshot.get.json.ftl
          	description: Get snapshots for the specified configuration set 
    /sites:
      #type: readCollection  # Doesnt have all these params yet
      is: [sliceable]
      get:
        description: Retrieve all sites for which user has read permissions
        responses:
          200:
          	#body:
          		#application/json:
          			#schema: <<resourcePathName>>
          	#description: Site retrieval was successful 
          	
          401:
                description: User does not have read permissions to <<resourcePathName>> #User does not have read permissions for retriving sites
      /{siteId}:
#       uriParameters:
          siteId:
#            description: Alfresco site identifier for the project under consideration
		get:
			description: Retrieve specified site for which user has read permissions
        /projects:
          post:
            description: Post a project using the supplied json
            body:
              application/json:
                schema: projects
          type: readCollection
          #get:
          #  description: Retrieve all projects for which user has read permissions
          #  responses:
          #    200:
          /{projectId}:
            type: readCollection
            uriParameters:
              projectId:
                description: MD project ID for the project under consideration
            get:
            	description: Retrieve specified project for which user has read permissions
            responses:
            	200: 
            		description: Retrieval of project was successfully retrieved
            	401:
            		description: User does not have read permissions to <<resourcePathName>> #User does not have read permissions for retriving sites
            	
        /products:
          #type: collection
          post:
          get:
            description: Retrieve all products for which user has read permissions
            responses:
              200:
          /{productId}:
            #type: collection
            post:
            get:
            uriParameters:
              productId:
                description: Sysml ID for the product (document) under consideration
            #/views:
            #  type: readCollection
            /snapshots:
              description: Scoped under /configurations and /products
              #type: collection
              get:
              post:
              /{snapshotId}:
                type: collection
                uriParameters:
                  snapshotId:
                    description: ID for the snapshot under consideration
        /elements:
            post:   
        /artifacts:
          /{artifactId}:
            post:
                description: Post artifact with {artifactId}
    /views:
      #type: collection
      post:
      /{viewId}:
        #type: collection
        get:
        uriParameters:
          viewId:
            description: Sysml ID for the view under consideration
        /elements:
          #type: collection
          get:
          /{elementId}:
            post:
              is: [constrainable]
#            put:
#              is: [constrainable]
            type: collection
            uriParameters:
              elementId:
                description: Sysml ID for the element under consideration
    /changesets:
      type: readCollection
      description: Track groups of changes together so they can be rolled back together if
                   necessary as well
      /{changesetId}:
        get:
        #post:
        #  description: Revert Alfresco to the specified change set
        #  responses:
        #    200:
        #      description: Successfully reverted the changeset
    /artifacts:
      /{artifactId}:
        post:
        get:
          is: [sliceable]
    /products:
        /{productId}:
            /views:
              get:
                description: Retrieve all views for the specified product for which user has read permissions
                responses:
                  200:
    /projects:
      post:
        description: Post a project using the supplied json
        body:
          application/json:
            schema: projects
      /{projectId}:
        type: readCollection
        uriParameters:
          projectId:
            description: MD project ID for the project under consideration
    /search:
      description: Service for searching for elements in a particular workspace
      get:
        is: [sliceable]
        queryParameters:
          propertyName:
            description: The property name to search for
          keyword:
            description: Mandatory field for specifying what to look for.
          filters:
            description: Comma separated list of id, documentation, name, value, aspect, appliedMetatypes, metatypes to search against. If not specified, defaults to documentation. appliedMetatypes and metatypes search using the ID of the metatypes.
/operations:
  description: Service for executing operations, e.g., like the OCL Execution capabilities in MDK. Details still TBD.
/diff:
  description: Service for diffing between two model versions between projects
  get:
    is: [diffable]
    description: workspace diff get
/merge:
  description: Service for merging two workspaces.  timestamp args are not implemented yet.
  post:
    is: [diffable]
    description: workspace merge post
/sites/permissions:
  post:
    description: Service for syncing permissions from Alfresco Share sites to corresponding model packages
/workspaceldapgroup:
  post:
    description: Service updating the LDAP group that has permissions to do workspace operations.
    queryParameters:
      ldapGroup:
        description: The LDAP group (string)
        type: string
/connection/jms:
  type: connection
/connection/jmswl:
  type: connection
/connection/rest:
  type: connection
        
#/client:
#  post:
#    queryParameters:
#      unregister:
#        description: if specified, indicates deregistration, otherwise if not specified, always registration or update 
#        type: boolean
#    body:
#      application/json:
#        schema:
#          client
